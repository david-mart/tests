
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
export const prismaVersion: PrismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  SequelizeMeta: 'SequelizeMeta',
  adverse_actions: 'adverse_actions',
  bankruptcy_status: 'bankruptcy_status',
  bankruptcy_type: 'bankruptcy_type',
  characteristic_scores: 'characteristic_scores',
  charge_off_status: 'charge_off_status',
  delos_crm: 'delos_crm',
  delos_crm_staging: 'delos_crm_staging',
  factortrust_credit_attributes: 'factortrust_credit_attributes',
  factortrust_credit_attributes_staging: 'factortrust_credit_attributes_staging',
  investor: 'investor',
  lexisnexis_credit_attributes: 'lexisnexis_credit_attributes',
  lexisnexis_credit_attributes_staging: 'lexisnexis_credit_attributes_staging',
  loan: 'loan',
  loan_application: 'loan_application',
  loan_application_staging: 'loan_application_staging',
  loan_modification: 'loan_modification',
  loan_modification_staging: 'loan_modification_staging',
  loan_modification_status: 'loan_modification_status',
  loan_modification_type: 'loan_modification_type',
  loan_product: 'loan_product',
  loan_staging: 'loan_staging',
  loan_status: 'loan_status',
  loan_transaction: 'loan_transaction',
  loan_transaction_staging: 'loan_transaction_staging',
  loan_transaction_type: 'loan_transaction_type',
  loan_trial_balance: 'loan_trial_balance',
  loan_trial_balance_staging: 'loan_trial_balance_staging',
  oln_credit_attributes: 'oln_credit_attributes',
  oln_credit_attributes_staging: 'oln_credit_attributes_staging',
  originator: 'originator',
  pricing_engine: 'pricing_engine',
  pricing_grid: 'pricing_grid',
  second_look_adverse_actions: 'second_look_adverse_actions',
  second_look_adverse_actions_staging: 'second_look_adverse_actions_staging',
  second_look_applications: 'second_look_applications',
  second_look_applications_staging: 'second_look_applications_staging',
  second_look_crm: 'second_look_crm',
  second_look_crm_staging: 'second_look_crm_staging',
  second_look_metrics: 'second_look_metrics',
  second_look_offers: 'second_look_offers',
  second_look_offers_staging: 'second_look_offers_staging',
  settlement_status: 'settlement_status',
  simulation_bytea: 'simulation_bytea',
  tu_attributes_all_tradelines: 'tu_attributes_all_tradelines',
  tu_attributes_all_tradelines_staging: 'tu_attributes_all_tradelines_staging',
  tu_attributes_non_revolving: 'tu_attributes_non_revolving',
  tu_attributes_non_revolving_staging: 'tu_attributes_non_revolving_staging',
  tu_attributes_non_standard: 'tu_attributes_non_standard',
  tu_attributes_non_standard_staging: 'tu_attributes_non_standard_staging',
  tu_attributes_other: 'tu_attributes_other',
  tu_attributes_other_staging: 'tu_attributes_other_staging',
  tu_attributes_revolving: 'tu_attributes_revolving',
  tu_attributes_revolving_staging: 'tu_attributes_revolving_staging',
  xpn_attributes_all_tradelines: 'xpn_attributes_all_tradelines',
  xpn_attributes_all_tradelines_staging: 'xpn_attributes_all_tradelines_staging',
  xpn_attributes_non_revolving: 'xpn_attributes_non_revolving',
  xpn_attributes_non_revolving_staging: 'xpn_attributes_non_revolving_staging',
  xpn_attributes_other: 'xpn_attributes_other',
  xpn_attributes_other_staging: 'xpn_attributes_other_staging',
  xpn_attributes_revolving: 'xpn_attributes_revolving',
  xpn_attributes_revolving_staging: 'xpn_attributes_revolving_staging'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "sequelizeMeta" | "adverse_actions" | "bankruptcy_status" | "bankruptcy_type" | "characteristic_scores" | "charge_off_status" | "delos_crm" | "delos_crm_staging" | "factortrust_credit_attributes" | "factortrust_credit_attributes_staging" | "investor" | "lexisnexis_credit_attributes" | "lexisnexis_credit_attributes_staging" | "loan" | "loan_application" | "loan_application_staging" | "loan_modification" | "loan_modification_staging" | "loan_modification_status" | "loan_modification_type" | "loan_product" | "loan_staging" | "loan_status" | "loan_transaction" | "loan_transaction_staging" | "loan_transaction_type" | "loan_trial_balance" | "loan_trial_balance_staging" | "oln_credit_attributes" | "oln_credit_attributes_staging" | "originator" | "pricing_engine" | "pricing_grid" | "second_look_adverse_actions" | "second_look_adverse_actions_staging" | "second_look_applications" | "second_look_applications_staging" | "second_look_crm" | "second_look_crm_staging" | "second_look_metrics" | "second_look_offers" | "second_look_offers_staging" | "settlement_status" | "simulation_bytea" | "tu_attributes_all_tradelines" | "tu_attributes_all_tradelines_staging" | "tu_attributes_non_revolving" | "tu_attributes_non_revolving_staging" | "tu_attributes_non_standard" | "tu_attributes_non_standard_staging" | "tu_attributes_other" | "tu_attributes_other_staging" | "tu_attributes_revolving" | "tu_attributes_revolving_staging" | "xpn_attributes_all_tradelines" | "xpn_attributes_all_tradelines_staging" | "xpn_attributes_non_revolving" | "xpn_attributes_non_revolving_staging" | "xpn_attributes_other" | "xpn_attributes_other_staging" | "xpn_attributes_revolving" | "xpn_attributes_revolving_staging"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    SequelizeMeta: {
      payload: Prisma.$SequelizeMetaPayload<ExtArgs>
      fields: Prisma.SequelizeMetaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SequelizeMetaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SequelizeMetaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload>
        }
        findFirst: {
          args: Prisma.SequelizeMetaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SequelizeMetaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload>
        }
        findMany: {
          args: Prisma.SequelizeMetaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload>[]
        }
        create: {
          args: Prisma.SequelizeMetaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload>
        }
        createMany: {
          args: Prisma.SequelizeMetaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SequelizeMetaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload>[]
        }
        delete: {
          args: Prisma.SequelizeMetaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload>
        }
        update: {
          args: Prisma.SequelizeMetaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload>
        }
        deleteMany: {
          args: Prisma.SequelizeMetaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SequelizeMetaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SequelizeMetaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload>[]
        }
        upsert: {
          args: Prisma.SequelizeMetaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SequelizeMetaPayload>
        }
        aggregate: {
          args: Prisma.SequelizeMetaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSequelizeMeta>
        }
        groupBy: {
          args: Prisma.SequelizeMetaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SequelizeMetaGroupByOutputType>[]
        }
        count: {
          args: Prisma.SequelizeMetaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SequelizeMetaCountAggregateOutputType> | number
        }
      }
    }
    adverse_actions: {
      payload: Prisma.$adverse_actionsPayload<ExtArgs>
      fields: Prisma.adverse_actionsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.adverse_actionsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.adverse_actionsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload>
        }
        findFirst: {
          args: Prisma.adverse_actionsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.adverse_actionsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload>
        }
        findMany: {
          args: Prisma.adverse_actionsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload>[]
        }
        create: {
          args: Prisma.adverse_actionsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload>
        }
        createMany: {
          args: Prisma.adverse_actionsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.adverse_actionsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload>[]
        }
        delete: {
          args: Prisma.adverse_actionsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload>
        }
        update: {
          args: Prisma.adverse_actionsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload>
        }
        deleteMany: {
          args: Prisma.adverse_actionsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.adverse_actionsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.adverse_actionsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload>[]
        }
        upsert: {
          args: Prisma.adverse_actionsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$adverse_actionsPayload>
        }
        aggregate: {
          args: Prisma.Adverse_actionsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAdverse_actions>
        }
        groupBy: {
          args: Prisma.adverse_actionsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Adverse_actionsGroupByOutputType>[]
        }
        count: {
          args: Prisma.adverse_actionsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Adverse_actionsCountAggregateOutputType> | number
        }
      }
    }
    bankruptcy_status: {
      payload: Prisma.$bankruptcy_statusPayload<ExtArgs>
      fields: Prisma.bankruptcy_statusFieldRefs
      operations: {
        findUnique: {
          args: Prisma.bankruptcy_statusFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.bankruptcy_statusFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload>
        }
        findFirst: {
          args: Prisma.bankruptcy_statusFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.bankruptcy_statusFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload>
        }
        findMany: {
          args: Prisma.bankruptcy_statusFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload>[]
        }
        create: {
          args: Prisma.bankruptcy_statusCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload>
        }
        createMany: {
          args: Prisma.bankruptcy_statusCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.bankruptcy_statusCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload>[]
        }
        delete: {
          args: Prisma.bankruptcy_statusDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload>
        }
        update: {
          args: Prisma.bankruptcy_statusUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload>
        }
        deleteMany: {
          args: Prisma.bankruptcy_statusDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.bankruptcy_statusUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.bankruptcy_statusUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload>[]
        }
        upsert: {
          args: Prisma.bankruptcy_statusUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_statusPayload>
        }
        aggregate: {
          args: Prisma.Bankruptcy_statusAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBankruptcy_status>
        }
        groupBy: {
          args: Prisma.bankruptcy_statusGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Bankruptcy_statusGroupByOutputType>[]
        }
        count: {
          args: Prisma.bankruptcy_statusCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Bankruptcy_statusCountAggregateOutputType> | number
        }
      }
    }
    bankruptcy_type: {
      payload: Prisma.$bankruptcy_typePayload<ExtArgs>
      fields: Prisma.bankruptcy_typeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.bankruptcy_typeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.bankruptcy_typeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload>
        }
        findFirst: {
          args: Prisma.bankruptcy_typeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.bankruptcy_typeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload>
        }
        findMany: {
          args: Prisma.bankruptcy_typeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload>[]
        }
        create: {
          args: Prisma.bankruptcy_typeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload>
        }
        createMany: {
          args: Prisma.bankruptcy_typeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.bankruptcy_typeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload>[]
        }
        delete: {
          args: Prisma.bankruptcy_typeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload>
        }
        update: {
          args: Prisma.bankruptcy_typeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload>
        }
        deleteMany: {
          args: Prisma.bankruptcy_typeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.bankruptcy_typeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.bankruptcy_typeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload>[]
        }
        upsert: {
          args: Prisma.bankruptcy_typeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$bankruptcy_typePayload>
        }
        aggregate: {
          args: Prisma.Bankruptcy_typeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBankruptcy_type>
        }
        groupBy: {
          args: Prisma.bankruptcy_typeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Bankruptcy_typeGroupByOutputType>[]
        }
        count: {
          args: Prisma.bankruptcy_typeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Bankruptcy_typeCountAggregateOutputType> | number
        }
      }
    }
    characteristic_scores: {
      payload: Prisma.$characteristic_scoresPayload<ExtArgs>
      fields: Prisma.characteristic_scoresFieldRefs
      operations: {
        findUnique: {
          args: Prisma.characteristic_scoresFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$characteristic_scoresPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.characteristic_scoresFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$characteristic_scoresPayload>
        }
        findFirst: {
          args: Prisma.characteristic_scoresFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$characteristic_scoresPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.characteristic_scoresFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$characteristic_scoresPayload>
        }
        findMany: {
          args: Prisma.characteristic_scoresFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$characteristic_scoresPayload>[]
        }
        delete: {
          args: Prisma.characteristic_scoresDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$characteristic_scoresPayload>
        }
        update: {
          args: Prisma.characteristic_scoresUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$characteristic_scoresPayload>
        }
        deleteMany: {
          args: Prisma.characteristic_scoresDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.characteristic_scoresUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.characteristic_scoresUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$characteristic_scoresPayload>[]
        }
        aggregate: {
          args: Prisma.Characteristic_scoresAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCharacteristic_scores>
        }
        groupBy: {
          args: Prisma.characteristic_scoresGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Characteristic_scoresGroupByOutputType>[]
        }
        count: {
          args: Prisma.characteristic_scoresCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Characteristic_scoresCountAggregateOutputType> | number
        }
      }
    }
    charge_off_status: {
      payload: Prisma.$charge_off_statusPayload<ExtArgs>
      fields: Prisma.charge_off_statusFieldRefs
      operations: {
        findUnique: {
          args: Prisma.charge_off_statusFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.charge_off_statusFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload>
        }
        findFirst: {
          args: Prisma.charge_off_statusFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.charge_off_statusFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload>
        }
        findMany: {
          args: Prisma.charge_off_statusFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload>[]
        }
        create: {
          args: Prisma.charge_off_statusCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload>
        }
        createMany: {
          args: Prisma.charge_off_statusCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.charge_off_statusCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload>[]
        }
        delete: {
          args: Prisma.charge_off_statusDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload>
        }
        update: {
          args: Prisma.charge_off_statusUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload>
        }
        deleteMany: {
          args: Prisma.charge_off_statusDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.charge_off_statusUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.charge_off_statusUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload>[]
        }
        upsert: {
          args: Prisma.charge_off_statusUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$charge_off_statusPayload>
        }
        aggregate: {
          args: Prisma.Charge_off_statusAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCharge_off_status>
        }
        groupBy: {
          args: Prisma.charge_off_statusGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Charge_off_statusGroupByOutputType>[]
        }
        count: {
          args: Prisma.charge_off_statusCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Charge_off_statusCountAggregateOutputType> | number
        }
      }
    }
    delos_crm: {
      payload: Prisma.$delos_crmPayload<ExtArgs>
      fields: Prisma.delos_crmFieldRefs
      operations: {
        findUnique: {
          args: Prisma.delos_crmFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.delos_crmFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload>
        }
        findFirst: {
          args: Prisma.delos_crmFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.delos_crmFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload>
        }
        findMany: {
          args: Prisma.delos_crmFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload>[]
        }
        create: {
          args: Prisma.delos_crmCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload>
        }
        createMany: {
          args: Prisma.delos_crmCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.delos_crmCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload>[]
        }
        delete: {
          args: Prisma.delos_crmDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload>
        }
        update: {
          args: Prisma.delos_crmUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload>
        }
        deleteMany: {
          args: Prisma.delos_crmDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.delos_crmUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.delos_crmUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload>[]
        }
        upsert: {
          args: Prisma.delos_crmUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crmPayload>
        }
        aggregate: {
          args: Prisma.Delos_crmAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDelos_crm>
        }
        groupBy: {
          args: Prisma.delos_crmGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Delos_crmGroupByOutputType>[]
        }
        count: {
          args: Prisma.delos_crmCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Delos_crmCountAggregateOutputType> | number
        }
      }
    }
    delos_crm_staging: {
      payload: Prisma.$delos_crm_stagingPayload<ExtArgs>
      fields: Prisma.delos_crm_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.delos_crm_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.delos_crm_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload>
        }
        findFirst: {
          args: Prisma.delos_crm_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.delos_crm_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload>
        }
        findMany: {
          args: Prisma.delos_crm_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload>[]
        }
        create: {
          args: Prisma.delos_crm_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload>
        }
        createMany: {
          args: Prisma.delos_crm_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.delos_crm_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload>[]
        }
        delete: {
          args: Prisma.delos_crm_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload>
        }
        update: {
          args: Prisma.delos_crm_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload>
        }
        deleteMany: {
          args: Prisma.delos_crm_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.delos_crm_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.delos_crm_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload>[]
        }
        upsert: {
          args: Prisma.delos_crm_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delos_crm_stagingPayload>
        }
        aggregate: {
          args: Prisma.Delos_crm_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDelos_crm_staging>
        }
        groupBy: {
          args: Prisma.delos_crm_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Delos_crm_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.delos_crm_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Delos_crm_stagingCountAggregateOutputType> | number
        }
      }
    }
    factortrust_credit_attributes: {
      payload: Prisma.$factortrust_credit_attributesPayload<ExtArgs>
      fields: Prisma.factortrust_credit_attributesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.factortrust_credit_attributesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.factortrust_credit_attributesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload>
        }
        findFirst: {
          args: Prisma.factortrust_credit_attributesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.factortrust_credit_attributesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload>
        }
        findMany: {
          args: Prisma.factortrust_credit_attributesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload>[]
        }
        create: {
          args: Prisma.factortrust_credit_attributesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload>
        }
        createMany: {
          args: Prisma.factortrust_credit_attributesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.factortrust_credit_attributesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload>[]
        }
        delete: {
          args: Prisma.factortrust_credit_attributesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload>
        }
        update: {
          args: Prisma.factortrust_credit_attributesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload>
        }
        deleteMany: {
          args: Prisma.factortrust_credit_attributesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.factortrust_credit_attributesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.factortrust_credit_attributesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload>[]
        }
        upsert: {
          args: Prisma.factortrust_credit_attributesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributesPayload>
        }
        aggregate: {
          args: Prisma.Factortrust_credit_attributesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFactortrust_credit_attributes>
        }
        groupBy: {
          args: Prisma.factortrust_credit_attributesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Factortrust_credit_attributesGroupByOutputType>[]
        }
        count: {
          args: Prisma.factortrust_credit_attributesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Factortrust_credit_attributesCountAggregateOutputType> | number
        }
      }
    }
    factortrust_credit_attributes_staging: {
      payload: Prisma.$factortrust_credit_attributes_stagingPayload<ExtArgs>
      fields: Prisma.factortrust_credit_attributes_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.factortrust_credit_attributes_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.factortrust_credit_attributes_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload>
        }
        findFirst: {
          args: Prisma.factortrust_credit_attributes_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.factortrust_credit_attributes_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload>
        }
        findMany: {
          args: Prisma.factortrust_credit_attributes_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload>[]
        }
        create: {
          args: Prisma.factortrust_credit_attributes_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload>
        }
        createMany: {
          args: Prisma.factortrust_credit_attributes_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.factortrust_credit_attributes_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload>[]
        }
        delete: {
          args: Prisma.factortrust_credit_attributes_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload>
        }
        update: {
          args: Prisma.factortrust_credit_attributes_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload>
        }
        deleteMany: {
          args: Prisma.factortrust_credit_attributes_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.factortrust_credit_attributes_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.factortrust_credit_attributes_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload>[]
        }
        upsert: {
          args: Prisma.factortrust_credit_attributes_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$factortrust_credit_attributes_stagingPayload>
        }
        aggregate: {
          args: Prisma.Factortrust_credit_attributes_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFactortrust_credit_attributes_staging>
        }
        groupBy: {
          args: Prisma.factortrust_credit_attributes_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Factortrust_credit_attributes_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.factortrust_credit_attributes_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Factortrust_credit_attributes_stagingCountAggregateOutputType> | number
        }
      }
    }
    investor: {
      payload: Prisma.$investorPayload<ExtArgs>
      fields: Prisma.investorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.investorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.investorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload>
        }
        findFirst: {
          args: Prisma.investorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.investorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload>
        }
        findMany: {
          args: Prisma.investorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload>[]
        }
        create: {
          args: Prisma.investorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload>
        }
        createMany: {
          args: Prisma.investorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.investorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload>[]
        }
        delete: {
          args: Prisma.investorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload>
        }
        update: {
          args: Prisma.investorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload>
        }
        deleteMany: {
          args: Prisma.investorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.investorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.investorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload>[]
        }
        upsert: {
          args: Prisma.investorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$investorPayload>
        }
        aggregate: {
          args: Prisma.InvestorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvestor>
        }
        groupBy: {
          args: Prisma.investorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvestorGroupByOutputType>[]
        }
        count: {
          args: Prisma.investorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvestorCountAggregateOutputType> | number
        }
      }
    }
    lexisnexis_credit_attributes: {
      payload: Prisma.$lexisnexis_credit_attributesPayload<ExtArgs>
      fields: Prisma.lexisnexis_credit_attributesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.lexisnexis_credit_attributesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.lexisnexis_credit_attributesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload>
        }
        findFirst: {
          args: Prisma.lexisnexis_credit_attributesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.lexisnexis_credit_attributesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload>
        }
        findMany: {
          args: Prisma.lexisnexis_credit_attributesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload>[]
        }
        create: {
          args: Prisma.lexisnexis_credit_attributesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload>
        }
        createMany: {
          args: Prisma.lexisnexis_credit_attributesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.lexisnexis_credit_attributesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload>[]
        }
        delete: {
          args: Prisma.lexisnexis_credit_attributesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload>
        }
        update: {
          args: Prisma.lexisnexis_credit_attributesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload>
        }
        deleteMany: {
          args: Prisma.lexisnexis_credit_attributesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.lexisnexis_credit_attributesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.lexisnexis_credit_attributesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload>[]
        }
        upsert: {
          args: Prisma.lexisnexis_credit_attributesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributesPayload>
        }
        aggregate: {
          args: Prisma.Lexisnexis_credit_attributesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLexisnexis_credit_attributes>
        }
        groupBy: {
          args: Prisma.lexisnexis_credit_attributesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Lexisnexis_credit_attributesGroupByOutputType>[]
        }
        count: {
          args: Prisma.lexisnexis_credit_attributesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Lexisnexis_credit_attributesCountAggregateOutputType> | number
        }
      }
    }
    lexisnexis_credit_attributes_staging: {
      payload: Prisma.$lexisnexis_credit_attributes_stagingPayload<ExtArgs>
      fields: Prisma.lexisnexis_credit_attributes_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.lexisnexis_credit_attributes_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.lexisnexis_credit_attributes_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload>
        }
        findFirst: {
          args: Prisma.lexisnexis_credit_attributes_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.lexisnexis_credit_attributes_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload>
        }
        findMany: {
          args: Prisma.lexisnexis_credit_attributes_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload>[]
        }
        create: {
          args: Prisma.lexisnexis_credit_attributes_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload>
        }
        createMany: {
          args: Prisma.lexisnexis_credit_attributes_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.lexisnexis_credit_attributes_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload>[]
        }
        delete: {
          args: Prisma.lexisnexis_credit_attributes_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload>
        }
        update: {
          args: Prisma.lexisnexis_credit_attributes_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload>
        }
        deleteMany: {
          args: Prisma.lexisnexis_credit_attributes_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.lexisnexis_credit_attributes_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.lexisnexis_credit_attributes_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload>[]
        }
        upsert: {
          args: Prisma.lexisnexis_credit_attributes_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$lexisnexis_credit_attributes_stagingPayload>
        }
        aggregate: {
          args: Prisma.Lexisnexis_credit_attributes_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLexisnexis_credit_attributes_staging>
        }
        groupBy: {
          args: Prisma.lexisnexis_credit_attributes_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Lexisnexis_credit_attributes_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.lexisnexis_credit_attributes_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Lexisnexis_credit_attributes_stagingCountAggregateOutputType> | number
        }
      }
    }
    loan: {
      payload: Prisma.$loanPayload<ExtArgs>
      fields: Prisma.loanFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loanFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loanFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload>
        }
        findFirst: {
          args: Prisma.loanFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loanFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload>
        }
        findMany: {
          args: Prisma.loanFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload>[]
        }
        create: {
          args: Prisma.loanCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload>
        }
        createMany: {
          args: Prisma.loanCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loanCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload>[]
        }
        delete: {
          args: Prisma.loanDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload>
        }
        update: {
          args: Prisma.loanUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload>
        }
        deleteMany: {
          args: Prisma.loanDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loanUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loanUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload>[]
        }
        upsert: {
          args: Prisma.loanUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loanPayload>
        }
        aggregate: {
          args: Prisma.LoanAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan>
        }
        groupBy: {
          args: Prisma.loanGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LoanGroupByOutputType>[]
        }
        count: {
          args: Prisma.loanCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LoanCountAggregateOutputType> | number
        }
      }
    }
    loan_application: {
      payload: Prisma.$loan_applicationPayload<ExtArgs>
      fields: Prisma.loan_applicationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_applicationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_applicationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload>
        }
        findFirst: {
          args: Prisma.loan_applicationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_applicationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload>
        }
        findMany: {
          args: Prisma.loan_applicationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload>[]
        }
        create: {
          args: Prisma.loan_applicationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload>
        }
        createMany: {
          args: Prisma.loan_applicationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_applicationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload>[]
        }
        delete: {
          args: Prisma.loan_applicationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload>
        }
        update: {
          args: Prisma.loan_applicationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload>
        }
        deleteMany: {
          args: Prisma.loan_applicationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_applicationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_applicationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload>[]
        }
        upsert: {
          args: Prisma.loan_applicationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_applicationPayload>
        }
        aggregate: {
          args: Prisma.Loan_applicationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_application>
        }
        groupBy: {
          args: Prisma.loan_applicationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_applicationGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_applicationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_applicationCountAggregateOutputType> | number
        }
      }
    }
    loan_application_staging: {
      payload: Prisma.$loan_application_stagingPayload<ExtArgs>
      fields: Prisma.loan_application_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_application_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_application_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload>
        }
        findFirst: {
          args: Prisma.loan_application_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_application_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload>
        }
        findMany: {
          args: Prisma.loan_application_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload>[]
        }
        create: {
          args: Prisma.loan_application_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload>
        }
        createMany: {
          args: Prisma.loan_application_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_application_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload>[]
        }
        delete: {
          args: Prisma.loan_application_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload>
        }
        update: {
          args: Prisma.loan_application_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload>
        }
        deleteMany: {
          args: Prisma.loan_application_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_application_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_application_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload>[]
        }
        upsert: {
          args: Prisma.loan_application_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_application_stagingPayload>
        }
        aggregate: {
          args: Prisma.Loan_application_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_application_staging>
        }
        groupBy: {
          args: Prisma.loan_application_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_application_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_application_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_application_stagingCountAggregateOutputType> | number
        }
      }
    }
    loan_modification: {
      payload: Prisma.$loan_modificationPayload<ExtArgs>
      fields: Prisma.loan_modificationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_modificationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_modificationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload>
        }
        findFirst: {
          args: Prisma.loan_modificationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_modificationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload>
        }
        findMany: {
          args: Prisma.loan_modificationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload>[]
        }
        create: {
          args: Prisma.loan_modificationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload>
        }
        createMany: {
          args: Prisma.loan_modificationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_modificationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload>[]
        }
        delete: {
          args: Prisma.loan_modificationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload>
        }
        update: {
          args: Prisma.loan_modificationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload>
        }
        deleteMany: {
          args: Prisma.loan_modificationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_modificationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_modificationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload>[]
        }
        upsert: {
          args: Prisma.loan_modificationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modificationPayload>
        }
        aggregate: {
          args: Prisma.Loan_modificationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_modification>
        }
        groupBy: {
          args: Prisma.loan_modificationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_modificationGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_modificationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_modificationCountAggregateOutputType> | number
        }
      }
    }
    loan_modification_staging: {
      payload: Prisma.$loan_modification_stagingPayload<ExtArgs>
      fields: Prisma.loan_modification_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_modification_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_modification_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload>
        }
        findFirst: {
          args: Prisma.loan_modification_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_modification_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload>
        }
        findMany: {
          args: Prisma.loan_modification_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload>[]
        }
        create: {
          args: Prisma.loan_modification_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload>
        }
        createMany: {
          args: Prisma.loan_modification_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_modification_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload>[]
        }
        delete: {
          args: Prisma.loan_modification_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload>
        }
        update: {
          args: Prisma.loan_modification_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload>
        }
        deleteMany: {
          args: Prisma.loan_modification_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_modification_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_modification_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload>[]
        }
        upsert: {
          args: Prisma.loan_modification_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_stagingPayload>
        }
        aggregate: {
          args: Prisma.Loan_modification_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_modification_staging>
        }
        groupBy: {
          args: Prisma.loan_modification_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_modification_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_modification_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_modification_stagingCountAggregateOutputType> | number
        }
      }
    }
    loan_modification_status: {
      payload: Prisma.$loan_modification_statusPayload<ExtArgs>
      fields: Prisma.loan_modification_statusFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_modification_statusFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_modification_statusFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload>
        }
        findFirst: {
          args: Prisma.loan_modification_statusFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_modification_statusFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload>
        }
        findMany: {
          args: Prisma.loan_modification_statusFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload>[]
        }
        create: {
          args: Prisma.loan_modification_statusCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload>
        }
        createMany: {
          args: Prisma.loan_modification_statusCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_modification_statusCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload>[]
        }
        delete: {
          args: Prisma.loan_modification_statusDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload>
        }
        update: {
          args: Prisma.loan_modification_statusUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload>
        }
        deleteMany: {
          args: Prisma.loan_modification_statusDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_modification_statusUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_modification_statusUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload>[]
        }
        upsert: {
          args: Prisma.loan_modification_statusUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_statusPayload>
        }
        aggregate: {
          args: Prisma.Loan_modification_statusAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_modification_status>
        }
        groupBy: {
          args: Prisma.loan_modification_statusGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_modification_statusGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_modification_statusCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_modification_statusCountAggregateOutputType> | number
        }
      }
    }
    loan_modification_type: {
      payload: Prisma.$loan_modification_typePayload<ExtArgs>
      fields: Prisma.loan_modification_typeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_modification_typeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_modification_typeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload>
        }
        findFirst: {
          args: Prisma.loan_modification_typeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_modification_typeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload>
        }
        findMany: {
          args: Prisma.loan_modification_typeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload>[]
        }
        create: {
          args: Prisma.loan_modification_typeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload>
        }
        createMany: {
          args: Prisma.loan_modification_typeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_modification_typeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload>[]
        }
        delete: {
          args: Prisma.loan_modification_typeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload>
        }
        update: {
          args: Prisma.loan_modification_typeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload>
        }
        deleteMany: {
          args: Prisma.loan_modification_typeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_modification_typeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_modification_typeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload>[]
        }
        upsert: {
          args: Prisma.loan_modification_typeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_modification_typePayload>
        }
        aggregate: {
          args: Prisma.Loan_modification_typeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_modification_type>
        }
        groupBy: {
          args: Prisma.loan_modification_typeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_modification_typeGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_modification_typeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_modification_typeCountAggregateOutputType> | number
        }
      }
    }
    loan_product: {
      payload: Prisma.$loan_productPayload<ExtArgs>
      fields: Prisma.loan_productFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_productFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_productFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload>
        }
        findFirst: {
          args: Prisma.loan_productFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_productFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload>
        }
        findMany: {
          args: Prisma.loan_productFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload>[]
        }
        create: {
          args: Prisma.loan_productCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload>
        }
        createMany: {
          args: Prisma.loan_productCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_productCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload>[]
        }
        delete: {
          args: Prisma.loan_productDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload>
        }
        update: {
          args: Prisma.loan_productUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload>
        }
        deleteMany: {
          args: Prisma.loan_productDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_productUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_productUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload>[]
        }
        upsert: {
          args: Prisma.loan_productUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_productPayload>
        }
        aggregate: {
          args: Prisma.Loan_productAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_product>
        }
        groupBy: {
          args: Prisma.loan_productGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_productGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_productCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_productCountAggregateOutputType> | number
        }
      }
    }
    loan_staging: {
      payload: Prisma.$loan_stagingPayload<ExtArgs>
      fields: Prisma.loan_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload>
        }
        findFirst: {
          args: Prisma.loan_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload>
        }
        findMany: {
          args: Prisma.loan_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload>[]
        }
        create: {
          args: Prisma.loan_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload>
        }
        createMany: {
          args: Prisma.loan_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload>[]
        }
        delete: {
          args: Prisma.loan_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload>
        }
        update: {
          args: Prisma.loan_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload>
        }
        deleteMany: {
          args: Prisma.loan_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload>[]
        }
        upsert: {
          args: Prisma.loan_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_stagingPayload>
        }
        aggregate: {
          args: Prisma.Loan_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_staging>
        }
        groupBy: {
          args: Prisma.loan_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_stagingCountAggregateOutputType> | number
        }
      }
    }
    loan_status: {
      payload: Prisma.$loan_statusPayload<ExtArgs>
      fields: Prisma.loan_statusFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_statusFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_statusFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload>
        }
        findFirst: {
          args: Prisma.loan_statusFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_statusFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload>
        }
        findMany: {
          args: Prisma.loan_statusFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload>[]
        }
        create: {
          args: Prisma.loan_statusCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload>
        }
        createMany: {
          args: Prisma.loan_statusCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_statusCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload>[]
        }
        delete: {
          args: Prisma.loan_statusDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload>
        }
        update: {
          args: Prisma.loan_statusUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload>
        }
        deleteMany: {
          args: Prisma.loan_statusDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_statusUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_statusUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload>[]
        }
        upsert: {
          args: Prisma.loan_statusUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_statusPayload>
        }
        aggregate: {
          args: Prisma.Loan_statusAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_status>
        }
        groupBy: {
          args: Prisma.loan_statusGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_statusGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_statusCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_statusCountAggregateOutputType> | number
        }
      }
    }
    loan_transaction: {
      payload: Prisma.$loan_transactionPayload<ExtArgs>
      fields: Prisma.loan_transactionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_transactionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_transactionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload>
        }
        findFirst: {
          args: Prisma.loan_transactionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_transactionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload>
        }
        findMany: {
          args: Prisma.loan_transactionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload>[]
        }
        create: {
          args: Prisma.loan_transactionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload>
        }
        createMany: {
          args: Prisma.loan_transactionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_transactionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload>[]
        }
        delete: {
          args: Prisma.loan_transactionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload>
        }
        update: {
          args: Prisma.loan_transactionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload>
        }
        deleteMany: {
          args: Prisma.loan_transactionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_transactionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_transactionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload>[]
        }
        upsert: {
          args: Prisma.loan_transactionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transactionPayload>
        }
        aggregate: {
          args: Prisma.Loan_transactionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_transaction>
        }
        groupBy: {
          args: Prisma.loan_transactionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_transactionGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_transactionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_transactionCountAggregateOutputType> | number
        }
      }
    }
    loan_transaction_staging: {
      payload: Prisma.$loan_transaction_stagingPayload<ExtArgs>
      fields: Prisma.loan_transaction_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_transaction_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_transaction_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload>
        }
        findFirst: {
          args: Prisma.loan_transaction_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_transaction_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload>
        }
        findMany: {
          args: Prisma.loan_transaction_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload>[]
        }
        create: {
          args: Prisma.loan_transaction_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload>
        }
        createMany: {
          args: Prisma.loan_transaction_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_transaction_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload>[]
        }
        delete: {
          args: Prisma.loan_transaction_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload>
        }
        update: {
          args: Prisma.loan_transaction_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload>
        }
        deleteMany: {
          args: Prisma.loan_transaction_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_transaction_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_transaction_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload>[]
        }
        upsert: {
          args: Prisma.loan_transaction_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_stagingPayload>
        }
        aggregate: {
          args: Prisma.Loan_transaction_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_transaction_staging>
        }
        groupBy: {
          args: Prisma.loan_transaction_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_transaction_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_transaction_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_transaction_stagingCountAggregateOutputType> | number
        }
      }
    }
    loan_transaction_type: {
      payload: Prisma.$loan_transaction_typePayload<ExtArgs>
      fields: Prisma.loan_transaction_typeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_transaction_typeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_transaction_typeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload>
        }
        findFirst: {
          args: Prisma.loan_transaction_typeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_transaction_typeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload>
        }
        findMany: {
          args: Prisma.loan_transaction_typeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload>[]
        }
        create: {
          args: Prisma.loan_transaction_typeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload>
        }
        createMany: {
          args: Prisma.loan_transaction_typeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_transaction_typeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload>[]
        }
        delete: {
          args: Prisma.loan_transaction_typeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload>
        }
        update: {
          args: Prisma.loan_transaction_typeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload>
        }
        deleteMany: {
          args: Prisma.loan_transaction_typeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_transaction_typeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_transaction_typeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload>[]
        }
        upsert: {
          args: Prisma.loan_transaction_typeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_transaction_typePayload>
        }
        aggregate: {
          args: Prisma.Loan_transaction_typeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_transaction_type>
        }
        groupBy: {
          args: Prisma.loan_transaction_typeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_transaction_typeGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_transaction_typeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_transaction_typeCountAggregateOutputType> | number
        }
      }
    }
    loan_trial_balance: {
      payload: Prisma.$loan_trial_balancePayload<ExtArgs>
      fields: Prisma.loan_trial_balanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_trial_balanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_trial_balanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload>
        }
        findFirst: {
          args: Prisma.loan_trial_balanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_trial_balanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload>
        }
        findMany: {
          args: Prisma.loan_trial_balanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload>[]
        }
        create: {
          args: Prisma.loan_trial_balanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload>
        }
        createMany: {
          args: Prisma.loan_trial_balanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_trial_balanceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload>[]
        }
        delete: {
          args: Prisma.loan_trial_balanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload>
        }
        update: {
          args: Prisma.loan_trial_balanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload>
        }
        deleteMany: {
          args: Prisma.loan_trial_balanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_trial_balanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_trial_balanceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload>[]
        }
        upsert: {
          args: Prisma.loan_trial_balanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balancePayload>
        }
        aggregate: {
          args: Prisma.Loan_trial_balanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_trial_balance>
        }
        groupBy: {
          args: Prisma.loan_trial_balanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_trial_balanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_trial_balanceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_trial_balanceCountAggregateOutputType> | number
        }
      }
    }
    loan_trial_balance_staging: {
      payload: Prisma.$loan_trial_balance_stagingPayload<ExtArgs>
      fields: Prisma.loan_trial_balance_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.loan_trial_balance_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.loan_trial_balance_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload>
        }
        findFirst: {
          args: Prisma.loan_trial_balance_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.loan_trial_balance_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload>
        }
        findMany: {
          args: Prisma.loan_trial_balance_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload>[]
        }
        create: {
          args: Prisma.loan_trial_balance_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload>
        }
        createMany: {
          args: Prisma.loan_trial_balance_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.loan_trial_balance_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload>[]
        }
        delete: {
          args: Prisma.loan_trial_balance_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload>
        }
        update: {
          args: Prisma.loan_trial_balance_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload>
        }
        deleteMany: {
          args: Prisma.loan_trial_balance_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.loan_trial_balance_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.loan_trial_balance_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload>[]
        }
        upsert: {
          args: Prisma.loan_trial_balance_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$loan_trial_balance_stagingPayload>
        }
        aggregate: {
          args: Prisma.Loan_trial_balance_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLoan_trial_balance_staging>
        }
        groupBy: {
          args: Prisma.loan_trial_balance_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_trial_balance_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.loan_trial_balance_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Loan_trial_balance_stagingCountAggregateOutputType> | number
        }
      }
    }
    oln_credit_attributes: {
      payload: Prisma.$oln_credit_attributesPayload<ExtArgs>
      fields: Prisma.oln_credit_attributesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.oln_credit_attributesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.oln_credit_attributesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload>
        }
        findFirst: {
          args: Prisma.oln_credit_attributesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.oln_credit_attributesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload>
        }
        findMany: {
          args: Prisma.oln_credit_attributesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload>[]
        }
        create: {
          args: Prisma.oln_credit_attributesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload>
        }
        createMany: {
          args: Prisma.oln_credit_attributesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.oln_credit_attributesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload>[]
        }
        delete: {
          args: Prisma.oln_credit_attributesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload>
        }
        update: {
          args: Prisma.oln_credit_attributesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload>
        }
        deleteMany: {
          args: Prisma.oln_credit_attributesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.oln_credit_attributesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.oln_credit_attributesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload>[]
        }
        upsert: {
          args: Prisma.oln_credit_attributesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributesPayload>
        }
        aggregate: {
          args: Prisma.Oln_credit_attributesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOln_credit_attributes>
        }
        groupBy: {
          args: Prisma.oln_credit_attributesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Oln_credit_attributesGroupByOutputType>[]
        }
        count: {
          args: Prisma.oln_credit_attributesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Oln_credit_attributesCountAggregateOutputType> | number
        }
      }
    }
    oln_credit_attributes_staging: {
      payload: Prisma.$oln_credit_attributes_stagingPayload<ExtArgs>
      fields: Prisma.oln_credit_attributes_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.oln_credit_attributes_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.oln_credit_attributes_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload>
        }
        findFirst: {
          args: Prisma.oln_credit_attributes_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.oln_credit_attributes_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload>
        }
        findMany: {
          args: Prisma.oln_credit_attributes_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload>[]
        }
        create: {
          args: Prisma.oln_credit_attributes_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload>
        }
        createMany: {
          args: Prisma.oln_credit_attributes_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.oln_credit_attributes_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload>[]
        }
        delete: {
          args: Prisma.oln_credit_attributes_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload>
        }
        update: {
          args: Prisma.oln_credit_attributes_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload>
        }
        deleteMany: {
          args: Prisma.oln_credit_attributes_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.oln_credit_attributes_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.oln_credit_attributes_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload>[]
        }
        upsert: {
          args: Prisma.oln_credit_attributes_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$oln_credit_attributes_stagingPayload>
        }
        aggregate: {
          args: Prisma.Oln_credit_attributes_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOln_credit_attributes_staging>
        }
        groupBy: {
          args: Prisma.oln_credit_attributes_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Oln_credit_attributes_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.oln_credit_attributes_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Oln_credit_attributes_stagingCountAggregateOutputType> | number
        }
      }
    }
    originator: {
      payload: Prisma.$originatorPayload<ExtArgs>
      fields: Prisma.originatorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.originatorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.originatorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload>
        }
        findFirst: {
          args: Prisma.originatorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.originatorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload>
        }
        findMany: {
          args: Prisma.originatorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload>[]
        }
        create: {
          args: Prisma.originatorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload>
        }
        createMany: {
          args: Prisma.originatorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.originatorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload>[]
        }
        delete: {
          args: Prisma.originatorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload>
        }
        update: {
          args: Prisma.originatorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload>
        }
        deleteMany: {
          args: Prisma.originatorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.originatorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.originatorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload>[]
        }
        upsert: {
          args: Prisma.originatorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$originatorPayload>
        }
        aggregate: {
          args: Prisma.OriginatorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOriginator>
        }
        groupBy: {
          args: Prisma.originatorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OriginatorGroupByOutputType>[]
        }
        count: {
          args: Prisma.originatorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OriginatorCountAggregateOutputType> | number
        }
      }
    }
    pricing_engine: {
      payload: Prisma.$pricing_enginePayload<ExtArgs>
      fields: Prisma.pricing_engineFieldRefs
      operations: {
        findUnique: {
          args: Prisma.pricing_engineFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_enginePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.pricing_engineFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_enginePayload>
        }
        findFirst: {
          args: Prisma.pricing_engineFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_enginePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.pricing_engineFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_enginePayload>
        }
        findMany: {
          args: Prisma.pricing_engineFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_enginePayload>[]
        }
        delete: {
          args: Prisma.pricing_engineDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_enginePayload>
        }
        update: {
          args: Prisma.pricing_engineUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_enginePayload>
        }
        deleteMany: {
          args: Prisma.pricing_engineDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.pricing_engineUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.pricing_engineUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_enginePayload>[]
        }
        aggregate: {
          args: Prisma.Pricing_engineAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePricing_engine>
        }
        groupBy: {
          args: Prisma.pricing_engineGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Pricing_engineGroupByOutputType>[]
        }
        count: {
          args: Prisma.pricing_engineCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Pricing_engineCountAggregateOutputType> | number
        }
      }
    }
    pricing_grid: {
      payload: Prisma.$pricing_gridPayload<ExtArgs>
      fields: Prisma.pricing_gridFieldRefs
      operations: {
        findUnique: {
          args: Prisma.pricing_gridFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.pricing_gridFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload>
        }
        findFirst: {
          args: Prisma.pricing_gridFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.pricing_gridFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload>
        }
        findMany: {
          args: Prisma.pricing_gridFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload>[]
        }
        create: {
          args: Prisma.pricing_gridCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload>
        }
        createMany: {
          args: Prisma.pricing_gridCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.pricing_gridCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload>[]
        }
        delete: {
          args: Prisma.pricing_gridDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload>
        }
        update: {
          args: Prisma.pricing_gridUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload>
        }
        deleteMany: {
          args: Prisma.pricing_gridDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.pricing_gridUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.pricing_gridUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload>[]
        }
        upsert: {
          args: Prisma.pricing_gridUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pricing_gridPayload>
        }
        aggregate: {
          args: Prisma.Pricing_gridAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePricing_grid>
        }
        groupBy: {
          args: Prisma.pricing_gridGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Pricing_gridGroupByOutputType>[]
        }
        count: {
          args: Prisma.pricing_gridCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Pricing_gridCountAggregateOutputType> | number
        }
      }
    }
    second_look_adverse_actions: {
      payload: Prisma.$second_look_adverse_actionsPayload<ExtArgs>
      fields: Prisma.second_look_adverse_actionsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.second_look_adverse_actionsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.second_look_adverse_actionsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload>
        }
        findFirst: {
          args: Prisma.second_look_adverse_actionsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.second_look_adverse_actionsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload>
        }
        findMany: {
          args: Prisma.second_look_adverse_actionsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload>[]
        }
        create: {
          args: Prisma.second_look_adverse_actionsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload>
        }
        createMany: {
          args: Prisma.second_look_adverse_actionsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.second_look_adverse_actionsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload>[]
        }
        delete: {
          args: Prisma.second_look_adverse_actionsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload>
        }
        update: {
          args: Prisma.second_look_adverse_actionsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload>
        }
        deleteMany: {
          args: Prisma.second_look_adverse_actionsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.second_look_adverse_actionsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.second_look_adverse_actionsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload>[]
        }
        upsert: {
          args: Prisma.second_look_adverse_actionsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actionsPayload>
        }
        aggregate: {
          args: Prisma.Second_look_adverse_actionsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecond_look_adverse_actions>
        }
        groupBy: {
          args: Prisma.second_look_adverse_actionsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_adverse_actionsGroupByOutputType>[]
        }
        count: {
          args: Prisma.second_look_adverse_actionsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_adverse_actionsCountAggregateOutputType> | number
        }
      }
    }
    second_look_adverse_actions_staging: {
      payload: Prisma.$second_look_adverse_actions_stagingPayload<ExtArgs>
      fields: Prisma.second_look_adverse_actions_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.second_look_adverse_actions_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.second_look_adverse_actions_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload>
        }
        findFirst: {
          args: Prisma.second_look_adverse_actions_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.second_look_adverse_actions_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload>
        }
        findMany: {
          args: Prisma.second_look_adverse_actions_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload>[]
        }
        create: {
          args: Prisma.second_look_adverse_actions_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload>
        }
        createMany: {
          args: Prisma.second_look_adverse_actions_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.second_look_adverse_actions_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload>[]
        }
        delete: {
          args: Prisma.second_look_adverse_actions_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload>
        }
        update: {
          args: Prisma.second_look_adverse_actions_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload>
        }
        deleteMany: {
          args: Prisma.second_look_adverse_actions_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.second_look_adverse_actions_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.second_look_adverse_actions_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload>[]
        }
        upsert: {
          args: Prisma.second_look_adverse_actions_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_adverse_actions_stagingPayload>
        }
        aggregate: {
          args: Prisma.Second_look_adverse_actions_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecond_look_adverse_actions_staging>
        }
        groupBy: {
          args: Prisma.second_look_adverse_actions_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_adverse_actions_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.second_look_adverse_actions_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_adverse_actions_stagingCountAggregateOutputType> | number
        }
      }
    }
    second_look_applications: {
      payload: Prisma.$second_look_applicationsPayload<ExtArgs>
      fields: Prisma.second_look_applicationsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.second_look_applicationsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.second_look_applicationsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload>
        }
        findFirst: {
          args: Prisma.second_look_applicationsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.second_look_applicationsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload>
        }
        findMany: {
          args: Prisma.second_look_applicationsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload>[]
        }
        create: {
          args: Prisma.second_look_applicationsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload>
        }
        createMany: {
          args: Prisma.second_look_applicationsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.second_look_applicationsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload>[]
        }
        delete: {
          args: Prisma.second_look_applicationsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload>
        }
        update: {
          args: Prisma.second_look_applicationsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload>
        }
        deleteMany: {
          args: Prisma.second_look_applicationsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.second_look_applicationsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.second_look_applicationsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload>[]
        }
        upsert: {
          args: Prisma.second_look_applicationsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applicationsPayload>
        }
        aggregate: {
          args: Prisma.Second_look_applicationsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecond_look_applications>
        }
        groupBy: {
          args: Prisma.second_look_applicationsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_applicationsGroupByOutputType>[]
        }
        count: {
          args: Prisma.second_look_applicationsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_applicationsCountAggregateOutputType> | number
        }
      }
    }
    second_look_applications_staging: {
      payload: Prisma.$second_look_applications_stagingPayload<ExtArgs>
      fields: Prisma.second_look_applications_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.second_look_applications_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.second_look_applications_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload>
        }
        findFirst: {
          args: Prisma.second_look_applications_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.second_look_applications_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload>
        }
        findMany: {
          args: Prisma.second_look_applications_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload>[]
        }
        create: {
          args: Prisma.second_look_applications_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload>
        }
        createMany: {
          args: Prisma.second_look_applications_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.second_look_applications_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload>[]
        }
        delete: {
          args: Prisma.second_look_applications_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload>
        }
        update: {
          args: Prisma.second_look_applications_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload>
        }
        deleteMany: {
          args: Prisma.second_look_applications_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.second_look_applications_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.second_look_applications_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload>[]
        }
        upsert: {
          args: Prisma.second_look_applications_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_applications_stagingPayload>
        }
        aggregate: {
          args: Prisma.Second_look_applications_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecond_look_applications_staging>
        }
        groupBy: {
          args: Prisma.second_look_applications_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_applications_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.second_look_applications_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_applications_stagingCountAggregateOutputType> | number
        }
      }
    }
    second_look_crm: {
      payload: Prisma.$second_look_crmPayload<ExtArgs>
      fields: Prisma.second_look_crmFieldRefs
      operations: {
        findUnique: {
          args: Prisma.second_look_crmFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.second_look_crmFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload>
        }
        findFirst: {
          args: Prisma.second_look_crmFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.second_look_crmFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload>
        }
        findMany: {
          args: Prisma.second_look_crmFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload>[]
        }
        create: {
          args: Prisma.second_look_crmCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload>
        }
        createMany: {
          args: Prisma.second_look_crmCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.second_look_crmCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload>[]
        }
        delete: {
          args: Prisma.second_look_crmDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload>
        }
        update: {
          args: Prisma.second_look_crmUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload>
        }
        deleteMany: {
          args: Prisma.second_look_crmDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.second_look_crmUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.second_look_crmUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload>[]
        }
        upsert: {
          args: Prisma.second_look_crmUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crmPayload>
        }
        aggregate: {
          args: Prisma.Second_look_crmAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecond_look_crm>
        }
        groupBy: {
          args: Prisma.second_look_crmGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_crmGroupByOutputType>[]
        }
        count: {
          args: Prisma.second_look_crmCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_crmCountAggregateOutputType> | number
        }
      }
    }
    second_look_crm_staging: {
      payload: Prisma.$second_look_crm_stagingPayload<ExtArgs>
      fields: Prisma.second_look_crm_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.second_look_crm_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.second_look_crm_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload>
        }
        findFirst: {
          args: Prisma.second_look_crm_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.second_look_crm_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload>
        }
        findMany: {
          args: Prisma.second_look_crm_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload>[]
        }
        create: {
          args: Prisma.second_look_crm_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload>
        }
        createMany: {
          args: Prisma.second_look_crm_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.second_look_crm_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload>[]
        }
        delete: {
          args: Prisma.second_look_crm_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload>
        }
        update: {
          args: Prisma.second_look_crm_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload>
        }
        deleteMany: {
          args: Prisma.second_look_crm_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.second_look_crm_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.second_look_crm_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload>[]
        }
        upsert: {
          args: Prisma.second_look_crm_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_crm_stagingPayload>
        }
        aggregate: {
          args: Prisma.Second_look_crm_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecond_look_crm_staging>
        }
        groupBy: {
          args: Prisma.second_look_crm_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_crm_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.second_look_crm_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_crm_stagingCountAggregateOutputType> | number
        }
      }
    }
    second_look_metrics: {
      payload: Prisma.$second_look_metricsPayload<ExtArgs>
      fields: Prisma.second_look_metricsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.second_look_metricsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.second_look_metricsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload>
        }
        findFirst: {
          args: Prisma.second_look_metricsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.second_look_metricsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload>
        }
        findMany: {
          args: Prisma.second_look_metricsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload>[]
        }
        create: {
          args: Prisma.second_look_metricsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload>
        }
        createMany: {
          args: Prisma.second_look_metricsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.second_look_metricsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload>[]
        }
        delete: {
          args: Prisma.second_look_metricsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload>
        }
        update: {
          args: Prisma.second_look_metricsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload>
        }
        deleteMany: {
          args: Prisma.second_look_metricsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.second_look_metricsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.second_look_metricsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload>[]
        }
        upsert: {
          args: Prisma.second_look_metricsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_metricsPayload>
        }
        aggregate: {
          args: Prisma.Second_look_metricsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecond_look_metrics>
        }
        groupBy: {
          args: Prisma.second_look_metricsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_metricsGroupByOutputType>[]
        }
        count: {
          args: Prisma.second_look_metricsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_metricsCountAggregateOutputType> | number
        }
      }
    }
    second_look_offers: {
      payload: Prisma.$second_look_offersPayload<ExtArgs>
      fields: Prisma.second_look_offersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.second_look_offersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.second_look_offersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload>
        }
        findFirst: {
          args: Prisma.second_look_offersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.second_look_offersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload>
        }
        findMany: {
          args: Prisma.second_look_offersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload>[]
        }
        create: {
          args: Prisma.second_look_offersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload>
        }
        createMany: {
          args: Prisma.second_look_offersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.second_look_offersCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload>[]
        }
        delete: {
          args: Prisma.second_look_offersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload>
        }
        update: {
          args: Prisma.second_look_offersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload>
        }
        deleteMany: {
          args: Prisma.second_look_offersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.second_look_offersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.second_look_offersUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload>[]
        }
        upsert: {
          args: Prisma.second_look_offersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offersPayload>
        }
        aggregate: {
          args: Prisma.Second_look_offersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecond_look_offers>
        }
        groupBy: {
          args: Prisma.second_look_offersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_offersGroupByOutputType>[]
        }
        count: {
          args: Prisma.second_look_offersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_offersCountAggregateOutputType> | number
        }
      }
    }
    second_look_offers_staging: {
      payload: Prisma.$second_look_offers_stagingPayload<ExtArgs>
      fields: Prisma.second_look_offers_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.second_look_offers_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.second_look_offers_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload>
        }
        findFirst: {
          args: Prisma.second_look_offers_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.second_look_offers_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload>
        }
        findMany: {
          args: Prisma.second_look_offers_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload>[]
        }
        create: {
          args: Prisma.second_look_offers_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload>
        }
        createMany: {
          args: Prisma.second_look_offers_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.second_look_offers_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload>[]
        }
        delete: {
          args: Prisma.second_look_offers_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload>
        }
        update: {
          args: Prisma.second_look_offers_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload>
        }
        deleteMany: {
          args: Prisma.second_look_offers_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.second_look_offers_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.second_look_offers_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload>[]
        }
        upsert: {
          args: Prisma.second_look_offers_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$second_look_offers_stagingPayload>
        }
        aggregate: {
          args: Prisma.Second_look_offers_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecond_look_offers_staging>
        }
        groupBy: {
          args: Prisma.second_look_offers_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_offers_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.second_look_offers_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Second_look_offers_stagingCountAggregateOutputType> | number
        }
      }
    }
    settlement_status: {
      payload: Prisma.$settlement_statusPayload<ExtArgs>
      fields: Prisma.settlement_statusFieldRefs
      operations: {
        findUnique: {
          args: Prisma.settlement_statusFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.settlement_statusFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload>
        }
        findFirst: {
          args: Prisma.settlement_statusFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.settlement_statusFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload>
        }
        findMany: {
          args: Prisma.settlement_statusFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload>[]
        }
        create: {
          args: Prisma.settlement_statusCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload>
        }
        createMany: {
          args: Prisma.settlement_statusCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.settlement_statusCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload>[]
        }
        delete: {
          args: Prisma.settlement_statusDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload>
        }
        update: {
          args: Prisma.settlement_statusUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload>
        }
        deleteMany: {
          args: Prisma.settlement_statusDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.settlement_statusUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.settlement_statusUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload>[]
        }
        upsert: {
          args: Prisma.settlement_statusUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settlement_statusPayload>
        }
        aggregate: {
          args: Prisma.Settlement_statusAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSettlement_status>
        }
        groupBy: {
          args: Prisma.settlement_statusGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Settlement_statusGroupByOutputType>[]
        }
        count: {
          args: Prisma.settlement_statusCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Settlement_statusCountAggregateOutputType> | number
        }
      }
    }
    simulation_bytea: {
      payload: Prisma.$simulation_byteaPayload<ExtArgs>
      fields: Prisma.simulation_byteaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.simulation_byteaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.simulation_byteaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload>
        }
        findFirst: {
          args: Prisma.simulation_byteaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.simulation_byteaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload>
        }
        findMany: {
          args: Prisma.simulation_byteaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload>[]
        }
        create: {
          args: Prisma.simulation_byteaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload>
        }
        createMany: {
          args: Prisma.simulation_byteaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.simulation_byteaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload>[]
        }
        delete: {
          args: Prisma.simulation_byteaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload>
        }
        update: {
          args: Prisma.simulation_byteaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload>
        }
        deleteMany: {
          args: Prisma.simulation_byteaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.simulation_byteaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.simulation_byteaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload>[]
        }
        upsert: {
          args: Prisma.simulation_byteaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$simulation_byteaPayload>
        }
        aggregate: {
          args: Prisma.Simulation_byteaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSimulation_bytea>
        }
        groupBy: {
          args: Prisma.simulation_byteaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Simulation_byteaGroupByOutputType>[]
        }
        count: {
          args: Prisma.simulation_byteaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Simulation_byteaCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_all_tradelines: {
      payload: Prisma.$tu_attributes_all_tradelinesPayload<ExtArgs>
      fields: Prisma.tu_attributes_all_tradelinesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_all_tradelinesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_all_tradelinesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_all_tradelinesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_all_tradelinesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_all_tradelinesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_all_tradelinesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_all_tradelinesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_all_tradelinesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_all_tradelinesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload>
        }
        update: {
          args: Prisma.tu_attributes_all_tradelinesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_all_tradelinesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_all_tradelinesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_all_tradelinesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_all_tradelinesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelinesPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_all_tradelinesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_all_tradelines>
        }
        groupBy: {
          args: Prisma.tu_attributes_all_tradelinesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_all_tradelinesGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_all_tradelinesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_all_tradelinesCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_all_tradelines_staging: {
      payload: Prisma.$tu_attributes_all_tradelines_stagingPayload<ExtArgs>
      fields: Prisma.tu_attributes_all_tradelines_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_all_tradelines_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_all_tradelines_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_all_tradelines_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_all_tradelines_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_all_tradelines_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_all_tradelines_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_all_tradelines_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_all_tradelines_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_all_tradelines_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload>
        }
        update: {
          args: Prisma.tu_attributes_all_tradelines_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_all_tradelines_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_all_tradelines_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_all_tradelines_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_all_tradelines_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_all_tradelines_stagingPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_all_tradelines_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_all_tradelines_staging>
        }
        groupBy: {
          args: Prisma.tu_attributes_all_tradelines_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_all_tradelines_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_all_tradelines_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_all_tradelines_stagingCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_non_revolving: {
      payload: Prisma.$tu_attributes_non_revolvingPayload<ExtArgs>
      fields: Prisma.tu_attributes_non_revolvingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_non_revolvingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_non_revolvingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_non_revolvingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_non_revolvingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_non_revolvingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_non_revolvingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_non_revolvingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_non_revolvingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_non_revolvingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload>
        }
        update: {
          args: Prisma.tu_attributes_non_revolvingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_non_revolvingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_non_revolvingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_non_revolvingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_non_revolvingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolvingPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_non_revolvingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_non_revolving>
        }
        groupBy: {
          args: Prisma.tu_attributes_non_revolvingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_non_revolvingGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_non_revolvingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_non_revolvingCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_non_revolving_staging: {
      payload: Prisma.$tu_attributes_non_revolving_stagingPayload<ExtArgs>
      fields: Prisma.tu_attributes_non_revolving_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_non_revolving_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_non_revolving_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_non_revolving_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_non_revolving_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_non_revolving_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_non_revolving_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_non_revolving_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_non_revolving_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_non_revolving_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload>
        }
        update: {
          args: Prisma.tu_attributes_non_revolving_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_non_revolving_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_non_revolving_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_non_revolving_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_non_revolving_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_revolving_stagingPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_non_revolving_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_non_revolving_staging>
        }
        groupBy: {
          args: Prisma.tu_attributes_non_revolving_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_non_revolving_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_non_revolving_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_non_revolving_stagingCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_non_standard: {
      payload: Prisma.$tu_attributes_non_standardPayload<ExtArgs>
      fields: Prisma.tu_attributes_non_standardFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_non_standardFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_non_standardFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_non_standardFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_non_standardFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_non_standardFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_non_standardCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_non_standardCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_non_standardCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_non_standardDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload>
        }
        update: {
          args: Prisma.tu_attributes_non_standardUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_non_standardDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_non_standardUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_non_standardUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_non_standardUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standardPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_non_standardAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_non_standard>
        }
        groupBy: {
          args: Prisma.tu_attributes_non_standardGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_non_standardGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_non_standardCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_non_standardCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_non_standard_staging: {
      payload: Prisma.$tu_attributes_non_standard_stagingPayload<ExtArgs>
      fields: Prisma.tu_attributes_non_standard_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_non_standard_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_non_standard_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_non_standard_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_non_standard_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_non_standard_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_non_standard_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_non_standard_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_non_standard_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_non_standard_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload>
        }
        update: {
          args: Prisma.tu_attributes_non_standard_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_non_standard_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_non_standard_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_non_standard_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_non_standard_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_non_standard_stagingPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_non_standard_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_non_standard_staging>
        }
        groupBy: {
          args: Prisma.tu_attributes_non_standard_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_non_standard_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_non_standard_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_non_standard_stagingCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_other: {
      payload: Prisma.$tu_attributes_otherPayload<ExtArgs>
      fields: Prisma.tu_attributes_otherFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_otherFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_otherFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_otherFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_otherFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_otherFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_otherCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_otherCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_otherCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_otherDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload>
        }
        update: {
          args: Prisma.tu_attributes_otherUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_otherDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_otherUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_otherUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_otherUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_otherPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_otherAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_other>
        }
        groupBy: {
          args: Prisma.tu_attributes_otherGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_otherGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_otherCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_otherCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_other_staging: {
      payload: Prisma.$tu_attributes_other_stagingPayload<ExtArgs>
      fields: Prisma.tu_attributes_other_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_other_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_other_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_other_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_other_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_other_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_other_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_other_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_other_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_other_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload>
        }
        update: {
          args: Prisma.tu_attributes_other_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_other_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_other_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_other_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_other_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_other_stagingPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_other_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_other_staging>
        }
        groupBy: {
          args: Prisma.tu_attributes_other_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_other_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_other_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_other_stagingCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_revolving: {
      payload: Prisma.$tu_attributes_revolvingPayload<ExtArgs>
      fields: Prisma.tu_attributes_revolvingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_revolvingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_revolvingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_revolvingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_revolvingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_revolvingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_revolvingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_revolvingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_revolvingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_revolvingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload>
        }
        update: {
          args: Prisma.tu_attributes_revolvingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_revolvingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_revolvingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_revolvingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_revolvingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolvingPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_revolvingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_revolving>
        }
        groupBy: {
          args: Prisma.tu_attributes_revolvingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_revolvingGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_revolvingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_revolvingCountAggregateOutputType> | number
        }
      }
    }
    tu_attributes_revolving_staging: {
      payload: Prisma.$tu_attributes_revolving_stagingPayload<ExtArgs>
      fields: Prisma.tu_attributes_revolving_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tu_attributes_revolving_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tu_attributes_revolving_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload>
        }
        findFirst: {
          args: Prisma.tu_attributes_revolving_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tu_attributes_revolving_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload>
        }
        findMany: {
          args: Prisma.tu_attributes_revolving_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload>[]
        }
        create: {
          args: Prisma.tu_attributes_revolving_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload>
        }
        createMany: {
          args: Prisma.tu_attributes_revolving_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.tu_attributes_revolving_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload>[]
        }
        delete: {
          args: Prisma.tu_attributes_revolving_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload>
        }
        update: {
          args: Prisma.tu_attributes_revolving_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload>
        }
        deleteMany: {
          args: Prisma.tu_attributes_revolving_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tu_attributes_revolving_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.tu_attributes_revolving_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload>[]
        }
        upsert: {
          args: Prisma.tu_attributes_revolving_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tu_attributes_revolving_stagingPayload>
        }
        aggregate: {
          args: Prisma.Tu_attributes_revolving_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTu_attributes_revolving_staging>
        }
        groupBy: {
          args: Prisma.tu_attributes_revolving_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_revolving_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.tu_attributes_revolving_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tu_attributes_revolving_stagingCountAggregateOutputType> | number
        }
      }
    }
    xpn_attributes_all_tradelines: {
      payload: Prisma.$xpn_attributes_all_tradelinesPayload<ExtArgs>
      fields: Prisma.xpn_attributes_all_tradelinesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.xpn_attributes_all_tradelinesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.xpn_attributes_all_tradelinesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload>
        }
        findFirst: {
          args: Prisma.xpn_attributes_all_tradelinesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.xpn_attributes_all_tradelinesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload>
        }
        findMany: {
          args: Prisma.xpn_attributes_all_tradelinesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload>[]
        }
        create: {
          args: Prisma.xpn_attributes_all_tradelinesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload>
        }
        createMany: {
          args: Prisma.xpn_attributes_all_tradelinesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.xpn_attributes_all_tradelinesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload>[]
        }
        delete: {
          args: Prisma.xpn_attributes_all_tradelinesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload>
        }
        update: {
          args: Prisma.xpn_attributes_all_tradelinesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload>
        }
        deleteMany: {
          args: Prisma.xpn_attributes_all_tradelinesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.xpn_attributes_all_tradelinesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.xpn_attributes_all_tradelinesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload>[]
        }
        upsert: {
          args: Prisma.xpn_attributes_all_tradelinesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelinesPayload>
        }
        aggregate: {
          args: Prisma.Xpn_attributes_all_tradelinesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateXpn_attributes_all_tradelines>
        }
        groupBy: {
          args: Prisma.xpn_attributes_all_tradelinesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_all_tradelinesGroupByOutputType>[]
        }
        count: {
          args: Prisma.xpn_attributes_all_tradelinesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_all_tradelinesCountAggregateOutputType> | number
        }
      }
    }
    xpn_attributes_all_tradelines_staging: {
      payload: Prisma.$xpn_attributes_all_tradelines_stagingPayload<ExtArgs>
      fields: Prisma.xpn_attributes_all_tradelines_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.xpn_attributes_all_tradelines_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.xpn_attributes_all_tradelines_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload>
        }
        findFirst: {
          args: Prisma.xpn_attributes_all_tradelines_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.xpn_attributes_all_tradelines_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload>
        }
        findMany: {
          args: Prisma.xpn_attributes_all_tradelines_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload>[]
        }
        create: {
          args: Prisma.xpn_attributes_all_tradelines_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload>
        }
        createMany: {
          args: Prisma.xpn_attributes_all_tradelines_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.xpn_attributes_all_tradelines_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload>[]
        }
        delete: {
          args: Prisma.xpn_attributes_all_tradelines_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload>
        }
        update: {
          args: Prisma.xpn_attributes_all_tradelines_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload>
        }
        deleteMany: {
          args: Prisma.xpn_attributes_all_tradelines_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.xpn_attributes_all_tradelines_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.xpn_attributes_all_tradelines_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload>[]
        }
        upsert: {
          args: Prisma.xpn_attributes_all_tradelines_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_all_tradelines_stagingPayload>
        }
        aggregate: {
          args: Prisma.Xpn_attributes_all_tradelines_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateXpn_attributes_all_tradelines_staging>
        }
        groupBy: {
          args: Prisma.xpn_attributes_all_tradelines_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_all_tradelines_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.xpn_attributes_all_tradelines_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_all_tradelines_stagingCountAggregateOutputType> | number
        }
      }
    }
    xpn_attributes_non_revolving: {
      payload: Prisma.$xpn_attributes_non_revolvingPayload<ExtArgs>
      fields: Prisma.xpn_attributes_non_revolvingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.xpn_attributes_non_revolvingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.xpn_attributes_non_revolvingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload>
        }
        findFirst: {
          args: Prisma.xpn_attributes_non_revolvingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.xpn_attributes_non_revolvingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload>
        }
        findMany: {
          args: Prisma.xpn_attributes_non_revolvingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload>[]
        }
        create: {
          args: Prisma.xpn_attributes_non_revolvingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload>
        }
        createMany: {
          args: Prisma.xpn_attributes_non_revolvingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.xpn_attributes_non_revolvingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload>[]
        }
        delete: {
          args: Prisma.xpn_attributes_non_revolvingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload>
        }
        update: {
          args: Prisma.xpn_attributes_non_revolvingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload>
        }
        deleteMany: {
          args: Prisma.xpn_attributes_non_revolvingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.xpn_attributes_non_revolvingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.xpn_attributes_non_revolvingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload>[]
        }
        upsert: {
          args: Prisma.xpn_attributes_non_revolvingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolvingPayload>
        }
        aggregate: {
          args: Prisma.Xpn_attributes_non_revolvingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateXpn_attributes_non_revolving>
        }
        groupBy: {
          args: Prisma.xpn_attributes_non_revolvingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_non_revolvingGroupByOutputType>[]
        }
        count: {
          args: Prisma.xpn_attributes_non_revolvingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_non_revolvingCountAggregateOutputType> | number
        }
      }
    }
    xpn_attributes_non_revolving_staging: {
      payload: Prisma.$xpn_attributes_non_revolving_stagingPayload<ExtArgs>
      fields: Prisma.xpn_attributes_non_revolving_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.xpn_attributes_non_revolving_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.xpn_attributes_non_revolving_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload>
        }
        findFirst: {
          args: Prisma.xpn_attributes_non_revolving_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.xpn_attributes_non_revolving_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload>
        }
        findMany: {
          args: Prisma.xpn_attributes_non_revolving_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload>[]
        }
        create: {
          args: Prisma.xpn_attributes_non_revolving_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload>
        }
        createMany: {
          args: Prisma.xpn_attributes_non_revolving_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.xpn_attributes_non_revolving_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload>[]
        }
        delete: {
          args: Prisma.xpn_attributes_non_revolving_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload>
        }
        update: {
          args: Prisma.xpn_attributes_non_revolving_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload>
        }
        deleteMany: {
          args: Prisma.xpn_attributes_non_revolving_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.xpn_attributes_non_revolving_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.xpn_attributes_non_revolving_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload>[]
        }
        upsert: {
          args: Prisma.xpn_attributes_non_revolving_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_non_revolving_stagingPayload>
        }
        aggregate: {
          args: Prisma.Xpn_attributes_non_revolving_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateXpn_attributes_non_revolving_staging>
        }
        groupBy: {
          args: Prisma.xpn_attributes_non_revolving_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_non_revolving_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.xpn_attributes_non_revolving_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_non_revolving_stagingCountAggregateOutputType> | number
        }
      }
    }
    xpn_attributes_other: {
      payload: Prisma.$xpn_attributes_otherPayload<ExtArgs>
      fields: Prisma.xpn_attributes_otherFieldRefs
      operations: {
        findUnique: {
          args: Prisma.xpn_attributes_otherFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.xpn_attributes_otherFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload>
        }
        findFirst: {
          args: Prisma.xpn_attributes_otherFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.xpn_attributes_otherFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload>
        }
        findMany: {
          args: Prisma.xpn_attributes_otherFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload>[]
        }
        create: {
          args: Prisma.xpn_attributes_otherCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload>
        }
        createMany: {
          args: Prisma.xpn_attributes_otherCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.xpn_attributes_otherCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload>[]
        }
        delete: {
          args: Prisma.xpn_attributes_otherDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload>
        }
        update: {
          args: Prisma.xpn_attributes_otherUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload>
        }
        deleteMany: {
          args: Prisma.xpn_attributes_otherDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.xpn_attributes_otherUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.xpn_attributes_otherUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload>[]
        }
        upsert: {
          args: Prisma.xpn_attributes_otherUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_otherPayload>
        }
        aggregate: {
          args: Prisma.Xpn_attributes_otherAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateXpn_attributes_other>
        }
        groupBy: {
          args: Prisma.xpn_attributes_otherGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_otherGroupByOutputType>[]
        }
        count: {
          args: Prisma.xpn_attributes_otherCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_otherCountAggregateOutputType> | number
        }
      }
    }
    xpn_attributes_other_staging: {
      payload: Prisma.$xpn_attributes_other_stagingPayload<ExtArgs>
      fields: Prisma.xpn_attributes_other_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.xpn_attributes_other_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.xpn_attributes_other_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload>
        }
        findFirst: {
          args: Prisma.xpn_attributes_other_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.xpn_attributes_other_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload>
        }
        findMany: {
          args: Prisma.xpn_attributes_other_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload>[]
        }
        create: {
          args: Prisma.xpn_attributes_other_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload>
        }
        createMany: {
          args: Prisma.xpn_attributes_other_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.xpn_attributes_other_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload>[]
        }
        delete: {
          args: Prisma.xpn_attributes_other_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload>
        }
        update: {
          args: Prisma.xpn_attributes_other_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload>
        }
        deleteMany: {
          args: Prisma.xpn_attributes_other_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.xpn_attributes_other_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.xpn_attributes_other_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload>[]
        }
        upsert: {
          args: Prisma.xpn_attributes_other_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_other_stagingPayload>
        }
        aggregate: {
          args: Prisma.Xpn_attributes_other_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateXpn_attributes_other_staging>
        }
        groupBy: {
          args: Prisma.xpn_attributes_other_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_other_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.xpn_attributes_other_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_other_stagingCountAggregateOutputType> | number
        }
      }
    }
    xpn_attributes_revolving: {
      payload: Prisma.$xpn_attributes_revolvingPayload<ExtArgs>
      fields: Prisma.xpn_attributes_revolvingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.xpn_attributes_revolvingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.xpn_attributes_revolvingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload>
        }
        findFirst: {
          args: Prisma.xpn_attributes_revolvingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.xpn_attributes_revolvingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload>
        }
        findMany: {
          args: Prisma.xpn_attributes_revolvingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload>[]
        }
        create: {
          args: Prisma.xpn_attributes_revolvingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload>
        }
        createMany: {
          args: Prisma.xpn_attributes_revolvingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.xpn_attributes_revolvingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload>[]
        }
        delete: {
          args: Prisma.xpn_attributes_revolvingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload>
        }
        update: {
          args: Prisma.xpn_attributes_revolvingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload>
        }
        deleteMany: {
          args: Prisma.xpn_attributes_revolvingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.xpn_attributes_revolvingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.xpn_attributes_revolvingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload>[]
        }
        upsert: {
          args: Prisma.xpn_attributes_revolvingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolvingPayload>
        }
        aggregate: {
          args: Prisma.Xpn_attributes_revolvingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateXpn_attributes_revolving>
        }
        groupBy: {
          args: Prisma.xpn_attributes_revolvingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_revolvingGroupByOutputType>[]
        }
        count: {
          args: Prisma.xpn_attributes_revolvingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_revolvingCountAggregateOutputType> | number
        }
      }
    }
    xpn_attributes_revolving_staging: {
      payload: Prisma.$xpn_attributes_revolving_stagingPayload<ExtArgs>
      fields: Prisma.xpn_attributes_revolving_stagingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.xpn_attributes_revolving_stagingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.xpn_attributes_revolving_stagingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload>
        }
        findFirst: {
          args: Prisma.xpn_attributes_revolving_stagingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.xpn_attributes_revolving_stagingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload>
        }
        findMany: {
          args: Prisma.xpn_attributes_revolving_stagingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload>[]
        }
        create: {
          args: Prisma.xpn_attributes_revolving_stagingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload>
        }
        createMany: {
          args: Prisma.xpn_attributes_revolving_stagingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.xpn_attributes_revolving_stagingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload>[]
        }
        delete: {
          args: Prisma.xpn_attributes_revolving_stagingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload>
        }
        update: {
          args: Prisma.xpn_attributes_revolving_stagingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload>
        }
        deleteMany: {
          args: Prisma.xpn_attributes_revolving_stagingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.xpn_attributes_revolving_stagingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.xpn_attributes_revolving_stagingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload>[]
        }
        upsert: {
          args: Prisma.xpn_attributes_revolving_stagingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$xpn_attributes_revolving_stagingPayload>
        }
        aggregate: {
          args: Prisma.Xpn_attributes_revolving_stagingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateXpn_attributes_revolving_staging>
        }
        groupBy: {
          args: Prisma.xpn_attributes_revolving_stagingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_revolving_stagingGroupByOutputType>[]
        }
        count: {
          args: Prisma.xpn_attributes_revolving_stagingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Xpn_attributes_revolving_stagingCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const SequelizeMetaScalarFieldEnum = {
  name: 'name'
} as const

export type SequelizeMetaScalarFieldEnum = (typeof SequelizeMetaScalarFieldEnum)[keyof typeof SequelizeMetaScalarFieldEnum]


export const Adverse_actionsScalarFieldEnum = {
  code: 'code',
  description: 'description',
  characteristic: 'characteristic'
} as const

export type Adverse_actionsScalarFieldEnum = (typeof Adverse_actionsScalarFieldEnum)[keyof typeof Adverse_actionsScalarFieldEnum]


export const Bankruptcy_statusScalarFieldEnum = {
  bankruptcy_status_number: 'bankruptcy_status_number',
  bankruptcy_status_description: 'bankruptcy_status_description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Bankruptcy_statusScalarFieldEnum = (typeof Bankruptcy_statusScalarFieldEnum)[keyof typeof Bankruptcy_statusScalarFieldEnum]


export const Bankruptcy_typeScalarFieldEnum = {
  bankruptcy_type_number: 'bankruptcy_type_number',
  bankruptcy_type_description: 'bankruptcy_type_description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Bankruptcy_typeScalarFieldEnum = (typeof Bankruptcy_typeScalarFieldEnum)[keyof typeof Bankruptcy_typeScalarFieldEnum]


export const Characteristic_scoresScalarFieldEnum = {
  id: 'id',
  characteristic: 'characteristic',
  partial_score: 'partial_score',
  created_at: 'created_at',
  updated_at: 'updated_at',
  version: 'version'
} as const

export type Characteristic_scoresScalarFieldEnum = (typeof Characteristic_scoresScalarFieldEnum)[keyof typeof Characteristic_scoresScalarFieldEnum]


export const Charge_off_statusScalarFieldEnum = {
  charge_off_status_number: 'charge_off_status_number',
  charge_off_status_description: 'charge_off_status_description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Charge_off_statusScalarFieldEnum = (typeof Charge_off_statusScalarFieldEnum)[keyof typeof Charge_off_statusScalarFieldEnum]


export const Delos_crmScalarFieldEnum = {
  application_id: 'application_id',
  score: 'score',
  version: 'version',
  originator_number: 'originator_number'
} as const

export type Delos_crmScalarFieldEnum = (typeof Delos_crmScalarFieldEnum)[keyof typeof Delos_crmScalarFieldEnum]


export const Delos_crm_stagingScalarFieldEnum = {
  application_id: 'application_id',
  score: 'score',
  version: 'version',
  originator_number: 'originator_number'
} as const

export type Delos_crm_stagingScalarFieldEnum = (typeof Delos_crm_stagingScalarFieldEnum)[keyof typeof Delos_crm_stagingScalarFieldEnum]


export const Factortrust_credit_attributesScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  linkf002: 'linkf002',
  linkf003: 'linkf003',
  linkf004: 'linkf004',
  linkf005: 'linkf005',
  linkf006: 'linkf006',
  linkf007: 'linkf007',
  linkf008: 'linkf008',
  linkf009: 'linkf009',
  linkf010: 'linkf010',
  linkf011: 'linkf011',
  linkf012: 'linkf012',
  linkf013: 'linkf013',
  linkf014: 'linkf014',
  linkf015: 'linkf015',
  linkf016: 'linkf016',
  linkf017: 'linkf017',
  linkf018: 'linkf018',
  linkf019: 'linkf019',
  linkf020: 'linkf020',
  linkf021: 'linkf021',
  linkf022: 'linkf022',
  linkf023: 'linkf023',
  linkf024: 'linkf024',
  linkf025: 'linkf025',
  linkf026: 'linkf026',
  linkf027: 'linkf027',
  linkf028: 'linkf028',
  linkf029: 'linkf029',
  linkf030: 'linkf030',
  linkf031: 'linkf031',
  linkf032: 'linkf032',
  linkf033: 'linkf033',
  linkf034: 'linkf034',
  linkf035: 'linkf035',
  linkf036: 'linkf036',
  linkf037: 'linkf037',
  linkf038: 'linkf038',
  linkf039: 'linkf039',
  linkf040: 'linkf040',
  linkf041: 'linkf041',
  linkf042: 'linkf042',
  linkf043: 'linkf043',
  linkf044: 'linkf044',
  linkf045: 'linkf045',
  linkf046: 'linkf046',
  linkf047: 'linkf047',
  linkf048: 'linkf048',
  linkf049: 'linkf049',
  linkf050: 'linkf050',
  linkf051: 'linkf051',
  linkf052: 'linkf052',
  linkf053: 'linkf053',
  linkf054: 'linkf054',
  linkf055: 'linkf055',
  linkf056: 'linkf056',
  linkf057: 'linkf057',
  linkf058: 'linkf058',
  linkf059: 'linkf059',
  linkf060: 'linkf060',
  linkf061: 'linkf061',
  linkf062: 'linkf062',
  linkf063: 'linkf063',
  linkf064: 'linkf064',
  linkf065: 'linkf065',
  linkf066: 'linkf066',
  linkf067: 'linkf067',
  linkf068: 'linkf068',
  linkf069: 'linkf069',
  linkf070: 'linkf070',
  linkf071: 'linkf071',
  linkf072: 'linkf072',
  linkf073: 'linkf073',
  linkf074: 'linkf074',
  linkf075: 'linkf075',
  linkf076: 'linkf076',
  linkf077: 'linkf077',
  linkf078: 'linkf078',
  linkf079: 'linkf079',
  linkf080: 'linkf080',
  linkf081: 'linkf081',
  linkf082: 'linkf082',
  linkf083: 'linkf083',
  linkf084: 'linkf084',
  linkf085: 'linkf085',
  linkf086: 'linkf086',
  linkf087: 'linkf087',
  linkf088: 'linkf088',
  linkf089: 'linkf089',
  linkf090: 'linkf090',
  linkf091: 'linkf091',
  linkf092: 'linkf092',
  linkf093: 'linkf093',
  linkf094: 'linkf094',
  linkf095: 'linkf095',
  linkf096: 'linkf096',
  linkf097: 'linkf097',
  linkf098: 'linkf098',
  linkf099: 'linkf099',
  linkf100: 'linkf100',
  linkf101: 'linkf101',
  linkf102: 'linkf102',
  linkf103: 'linkf103',
  linkf104: 'linkf104',
  linkf105: 'linkf105',
  linkf106: 'linkf106',
  linkf107: 'linkf107',
  linkf108: 'linkf108',
  linkf109: 'linkf109',
  linkf110: 'linkf110',
  linkf111: 'linkf111',
  linkf112: 'linkf112',
  linkf113: 'linkf113',
  linkf114: 'linkf114',
  linkf115: 'linkf115',
  linkf116: 'linkf116',
  linkf117: 'linkf117',
  linkf118: 'linkf118',
  linkf119: 'linkf119',
  linkf120: 'linkf120',
  linkf121: 'linkf121',
  linkf122: 'linkf122',
  linkf123: 'linkf123',
  linkf124: 'linkf124',
  linkf125: 'linkf125',
  linkf126: 'linkf126',
  linkf127: 'linkf127',
  linkf128: 'linkf128',
  linkf129: 'linkf129',
  linkf130: 'linkf130',
  linkf131: 'linkf131',
  linkf132: 'linkf132',
  linkf133: 'linkf133',
  linkf134: 'linkf134',
  linkf135: 'linkf135',
  linkf136: 'linkf136',
  linkf137: 'linkf137',
  linkf138: 'linkf138',
  linkf139: 'linkf139',
  linkf140: 'linkf140',
  linkf141: 'linkf141',
  linkf142: 'linkf142',
  linkf143: 'linkf143',
  linkf144: 'linkf144',
  linkf145: 'linkf145',
  linkf146: 'linkf146',
  linkf147: 'linkf147',
  linkf148: 'linkf148',
  linkf149: 'linkf149',
  linkf150: 'linkf150',
  linkf151: 'linkf151',
  linkf152: 'linkf152',
  linkf153: 'linkf153',
  linkf154: 'linkf154',
  linkf155: 'linkf155',
  linkf156: 'linkf156',
  linkf157: 'linkf157',
  linkf158: 'linkf158',
  linkf159: 'linkf159',
  linkf160: 'linkf160',
  linkf161: 'linkf161',
  linkf162: 'linkf162',
  linkf163: 'linkf163',
  linkf164: 'linkf164',
  linkf165: 'linkf165',
  linkf166: 'linkf166',
  linkf167: 'linkf167',
  linkf168: 'linkf168',
  linkf169: 'linkf169',
  linkf170: 'linkf170',
  linkf171: 'linkf171',
  linkf172: 'linkf172',
  linkf173: 'linkf173',
  linkf174: 'linkf174',
  linkf175: 'linkf175',
  linkf176: 'linkf176',
  linkf177: 'linkf177',
  linkf178: 'linkf178',
  linkf179: 'linkf179',
  linkf180: 'linkf180',
  linkf181: 'linkf181',
  linkf182: 'linkf182',
  linkf183: 'linkf183',
  linkf184: 'linkf184',
  linkf185: 'linkf185',
  linkf186: 'linkf186',
  linkf187: 'linkf187',
  linkf188: 'linkf188',
  linkf189: 'linkf189',
  linkf190: 'linkf190',
  linkf191: 'linkf191',
  linkf192: 'linkf192',
  linkf193: 'linkf193',
  linkf194: 'linkf194',
  linkf195: 'linkf195',
  linkf196: 'linkf196',
  linkf197: 'linkf197',
  linkf198: 'linkf198',
  linkf199: 'linkf199',
  linkf200: 'linkf200',
  linkf201: 'linkf201',
  linkf202: 'linkf202',
  linkf203: 'linkf203',
  linkf204: 'linkf204',
  linkf205: 'linkf205',
  linkf206: 'linkf206',
  linkf207: 'linkf207',
  linkf208: 'linkf208',
  linkf209: 'linkf209',
  linkf210: 'linkf210',
  linkf211: 'linkf211',
  linkf212: 'linkf212',
  linkf213: 'linkf213',
  m1101_stl_ft: 'm1101_stl_ft',
  m1101_stl_ft_code1: 'm1101_stl_ft_code1',
  m1101_stl_ft_code2: 'm1101_stl_ft_code2',
  m1101_stl_ft_code3: 'm1101_stl_ft_code3',
  m1101_stl_ft_code4: 'm1101_stl_ft_code4',
  m1100_stl_ft: 'm1100_stl_ft',
  m1100_stl_ft_code1: 'm1100_stl_ft_code1',
  m1100_stl_ft_code2: 'm1100_stl_ft_code2',
  m1100_stl_ft_code3: 'm1100_stl_ft_code3',
  m1100_stl_ft_code4: 'm1100_stl_ft_code4',
  m1102_vrto_ft: 'm1102_vrto_ft',
  m1102_vrto_ft_code1: 'm1102_vrto_ft_code1',
  m1102_vrto_ft_code2: 'm1102_vrto_ft_code2',
  m1102_vrto_ft_code3: 'm1102_vrto_ft_code3',
  m1102_vrto_ft_code4: 'm1102_vrto_ft_code4',
  pd4_ad: 'pd4_ad',
  pd4_ad_code1: 'pd4_ad_code1',
  pd4_ad_code2: 'pd4_ad_code2',
  pd4_ad_code3: 'pd4_ad_code3',
  pd4_ad_code4: 'pd4_ad_code4',
  created_at: 'created_at',
  updated_at: 'updated_at',
  second_look: 'second_look'
} as const

export type Factortrust_credit_attributesScalarFieldEnum = (typeof Factortrust_credit_attributesScalarFieldEnum)[keyof typeof Factortrust_credit_attributesScalarFieldEnum]


export const Factortrust_credit_attributes_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  linkf002: 'linkf002',
  linkf003: 'linkf003',
  linkf004: 'linkf004',
  linkf005: 'linkf005',
  linkf006: 'linkf006',
  linkf007: 'linkf007',
  linkf008: 'linkf008',
  linkf009: 'linkf009',
  linkf010: 'linkf010',
  linkf011: 'linkf011',
  linkf012: 'linkf012',
  linkf013: 'linkf013',
  linkf014: 'linkf014',
  linkf015: 'linkf015',
  linkf016: 'linkf016',
  linkf017: 'linkf017',
  linkf018: 'linkf018',
  linkf019: 'linkf019',
  linkf020: 'linkf020',
  linkf021: 'linkf021',
  linkf022: 'linkf022',
  linkf023: 'linkf023',
  linkf024: 'linkf024',
  linkf025: 'linkf025',
  linkf026: 'linkf026',
  linkf027: 'linkf027',
  linkf028: 'linkf028',
  linkf029: 'linkf029',
  linkf030: 'linkf030',
  linkf031: 'linkf031',
  linkf032: 'linkf032',
  linkf033: 'linkf033',
  linkf034: 'linkf034',
  linkf035: 'linkf035',
  linkf036: 'linkf036',
  linkf037: 'linkf037',
  linkf038: 'linkf038',
  linkf039: 'linkf039',
  linkf040: 'linkf040',
  linkf041: 'linkf041',
  linkf042: 'linkf042',
  linkf043: 'linkf043',
  linkf044: 'linkf044',
  linkf045: 'linkf045',
  linkf046: 'linkf046',
  linkf047: 'linkf047',
  linkf048: 'linkf048',
  linkf049: 'linkf049',
  linkf050: 'linkf050',
  linkf051: 'linkf051',
  linkf052: 'linkf052',
  linkf053: 'linkf053',
  linkf054: 'linkf054',
  linkf055: 'linkf055',
  linkf056: 'linkf056',
  linkf057: 'linkf057',
  linkf058: 'linkf058',
  linkf059: 'linkf059',
  linkf060: 'linkf060',
  linkf061: 'linkf061',
  linkf062: 'linkf062',
  linkf063: 'linkf063',
  linkf064: 'linkf064',
  linkf065: 'linkf065',
  linkf066: 'linkf066',
  linkf067: 'linkf067',
  linkf068: 'linkf068',
  linkf069: 'linkf069',
  linkf070: 'linkf070',
  linkf071: 'linkf071',
  linkf072: 'linkf072',
  linkf073: 'linkf073',
  linkf074: 'linkf074',
  linkf075: 'linkf075',
  linkf076: 'linkf076',
  linkf077: 'linkf077',
  linkf078: 'linkf078',
  linkf079: 'linkf079',
  linkf080: 'linkf080',
  linkf081: 'linkf081',
  linkf082: 'linkf082',
  linkf083: 'linkf083',
  linkf084: 'linkf084',
  linkf085: 'linkf085',
  linkf086: 'linkf086',
  linkf087: 'linkf087',
  linkf088: 'linkf088',
  linkf089: 'linkf089',
  linkf090: 'linkf090',
  linkf091: 'linkf091',
  linkf092: 'linkf092',
  linkf093: 'linkf093',
  linkf094: 'linkf094',
  linkf095: 'linkf095',
  linkf096: 'linkf096',
  linkf097: 'linkf097',
  linkf098: 'linkf098',
  linkf099: 'linkf099',
  linkf100: 'linkf100',
  linkf101: 'linkf101',
  linkf102: 'linkf102',
  linkf103: 'linkf103',
  linkf104: 'linkf104',
  linkf105: 'linkf105',
  linkf106: 'linkf106',
  linkf107: 'linkf107',
  linkf108: 'linkf108',
  linkf109: 'linkf109',
  linkf110: 'linkf110',
  linkf111: 'linkf111',
  linkf112: 'linkf112',
  linkf113: 'linkf113',
  linkf114: 'linkf114',
  linkf115: 'linkf115',
  linkf116: 'linkf116',
  linkf117: 'linkf117',
  linkf118: 'linkf118',
  linkf119: 'linkf119',
  linkf120: 'linkf120',
  linkf121: 'linkf121',
  linkf122: 'linkf122',
  linkf123: 'linkf123',
  linkf124: 'linkf124',
  linkf125: 'linkf125',
  linkf126: 'linkf126',
  linkf127: 'linkf127',
  linkf128: 'linkf128',
  linkf129: 'linkf129',
  linkf130: 'linkf130',
  linkf131: 'linkf131',
  linkf132: 'linkf132',
  linkf133: 'linkf133',
  linkf134: 'linkf134',
  linkf135: 'linkf135',
  linkf136: 'linkf136',
  linkf137: 'linkf137',
  linkf138: 'linkf138',
  linkf139: 'linkf139',
  linkf140: 'linkf140',
  linkf141: 'linkf141',
  linkf142: 'linkf142',
  linkf143: 'linkf143',
  linkf144: 'linkf144',
  linkf145: 'linkf145',
  linkf146: 'linkf146',
  linkf147: 'linkf147',
  linkf148: 'linkf148',
  linkf149: 'linkf149',
  linkf150: 'linkf150',
  linkf151: 'linkf151',
  linkf152: 'linkf152',
  linkf153: 'linkf153',
  linkf154: 'linkf154',
  linkf155: 'linkf155',
  linkf156: 'linkf156',
  linkf157: 'linkf157',
  linkf158: 'linkf158',
  linkf159: 'linkf159',
  linkf160: 'linkf160',
  linkf161: 'linkf161',
  linkf162: 'linkf162',
  linkf163: 'linkf163',
  linkf164: 'linkf164',
  linkf165: 'linkf165',
  linkf166: 'linkf166',
  linkf167: 'linkf167',
  linkf168: 'linkf168',
  linkf169: 'linkf169',
  linkf170: 'linkf170',
  linkf171: 'linkf171',
  linkf172: 'linkf172',
  linkf173: 'linkf173',
  linkf174: 'linkf174',
  linkf175: 'linkf175',
  linkf176: 'linkf176',
  linkf177: 'linkf177',
  linkf178: 'linkf178',
  linkf179: 'linkf179',
  linkf180: 'linkf180',
  linkf181: 'linkf181',
  linkf182: 'linkf182',
  linkf183: 'linkf183',
  linkf184: 'linkf184',
  linkf185: 'linkf185',
  linkf186: 'linkf186',
  linkf187: 'linkf187',
  linkf188: 'linkf188',
  linkf189: 'linkf189',
  linkf190: 'linkf190',
  linkf191: 'linkf191',
  linkf192: 'linkf192',
  linkf193: 'linkf193',
  linkf194: 'linkf194',
  linkf195: 'linkf195',
  linkf196: 'linkf196',
  linkf197: 'linkf197',
  linkf198: 'linkf198',
  linkf199: 'linkf199',
  linkf200: 'linkf200',
  linkf201: 'linkf201',
  linkf202: 'linkf202',
  linkf203: 'linkf203',
  linkf204: 'linkf204',
  linkf205: 'linkf205',
  linkf206: 'linkf206',
  linkf207: 'linkf207',
  linkf208: 'linkf208',
  linkf209: 'linkf209',
  linkf210: 'linkf210',
  linkf211: 'linkf211',
  linkf212: 'linkf212',
  linkf213: 'linkf213',
  m1101_stl_ft: 'm1101_stl_ft',
  m1101_stl_ft_code1: 'm1101_stl_ft_code1',
  m1101_stl_ft_code2: 'm1101_stl_ft_code2',
  m1101_stl_ft_code3: 'm1101_stl_ft_code3',
  m1101_stl_ft_code4: 'm1101_stl_ft_code4',
  m1100_stl_ft: 'm1100_stl_ft',
  m1100_stl_ft_code1: 'm1100_stl_ft_code1',
  m1100_stl_ft_code2: 'm1100_stl_ft_code2',
  m1100_stl_ft_code3: 'm1100_stl_ft_code3',
  m1100_stl_ft_code4: 'm1100_stl_ft_code4',
  m1102_vrto_ft: 'm1102_vrto_ft',
  m1102_vrto_ft_code1: 'm1102_vrto_ft_code1',
  m1102_vrto_ft_code2: 'm1102_vrto_ft_code2',
  m1102_vrto_ft_code3: 'm1102_vrto_ft_code3',
  m1102_vrto_ft_code4: 'm1102_vrto_ft_code4',
  pd4_ad: 'pd4_ad',
  pd4_ad_code1: 'pd4_ad_code1',
  pd4_ad_code2: 'pd4_ad_code2',
  pd4_ad_code3: 'pd4_ad_code3',
  pd4_ad_code4: 'pd4_ad_code4',
  created_at: 'created_at',
  updated_at: 'updated_at',
  second_look: 'second_look'
} as const

export type Factortrust_credit_attributes_stagingScalarFieldEnum = (typeof Factortrust_credit_attributes_stagingScalarFieldEnum)[keyof typeof Factortrust_credit_attributes_stagingScalarFieldEnum]


export const InvestorScalarFieldEnum = {
  company_investor_id: 'company_investor_id',
  originator_assigned_investor_id: 'originator_assigned_investor_id',
  investor_name: 'investor_name'
} as const

export type InvestorScalarFieldEnum = (typeof InvestorScalarFieldEnum)[keyof typeof InvestorScalarFieldEnum]


export const Lexisnexis_credit_attributesScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  lnj_eviction_total_count: 'lnj_eviction_total_count',
  lnj_eviction_total_count12month: 'lnj_eviction_total_count12month',
  lnj_eviction_time_newest: 'lnj_eviction_time_newest',
  lnj_judgment_small_claims_count: 'lnj_judgment_small_claims_count',
  lnj_judgment_court_count: 'lnj_judgment_court_count',
  lnj_judgment_foreclosure_count: 'lnj_judgment_foreclosure_count',
  lnj_lien_judgment_severity_index: 'lnj_lien_judgment_severity_index',
  lnj_lien_judgment_count: 'lnj_lien_judgment_count',
  lnj_lien_judgment_count12month: 'lnj_lien_judgment_count12month',
  lnj_lien_tax_count: 'lnj_lien_tax_count',
  lnj_lien_judgment_other_count: 'lnj_lien_judgment_other_count',
  lnj_lien_judgment_time_newest: 'lnj_lien_judgment_time_newest',
  lnj_lien_judgment_dollar_total: 'lnj_lien_judgment_dollar_total',
  lnj_lien_count: 'lnj_lien_count',
  lnj_lien_time_newest: 'lnj_lien_time_newest',
  lnj_lien_dollar_total: 'lnj_lien_dollar_total',
  lnj_lien_tax_time_newest: 'lnj_lien_tax_time_newest',
  lnj_lien_tax_dollar_total: 'lnj_lien_tax_dollar_total',
  lnj_lien_tax_state_count: 'lnj_lien_tax_state_count',
  lnj_lien_tax_state_time_newest: 'lnj_lien_tax_state_time_newest',
  lnj_lien_tax_state_dollar_total: 'lnj_lien_tax_state_dollar_total',
  lnj_lien_tax_federal_count: 'lnj_lien_tax_federal_count',
  lnj_lien_tax_federal_time_newest: 'lnj_lien_tax_federal_time_newest',
  lnj_lien_tax_federal_dollar_total: 'lnj_lien_tax_federal_dollar_total',
  lnj_judgment_count: 'lnj_judgment_count',
  lnj_judgment_time_newest: 'lnj_judgment_time_newest',
  lnj_judgment_dollar_total: 'lnj_judgment_dollar_total',
  created_at: 'created_at',
  updated_at: 'updated_at',
  second_look: 'second_look'
} as const

export type Lexisnexis_credit_attributesScalarFieldEnum = (typeof Lexisnexis_credit_attributesScalarFieldEnum)[keyof typeof Lexisnexis_credit_attributesScalarFieldEnum]


export const Lexisnexis_credit_attributes_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  lnj_eviction_total_count: 'lnj_eviction_total_count',
  lnj_eviction_total_count12month: 'lnj_eviction_total_count12month',
  lnj_eviction_time_newest: 'lnj_eviction_time_newest',
  lnj_judgment_small_claims_count: 'lnj_judgment_small_claims_count',
  lnj_judgment_court_count: 'lnj_judgment_court_count',
  lnj_judgment_foreclosure_count: 'lnj_judgment_foreclosure_count',
  lnj_lien_judgment_severity_index: 'lnj_lien_judgment_severity_index',
  lnj_lien_judgment_count: 'lnj_lien_judgment_count',
  lnj_lien_judgment_count12month: 'lnj_lien_judgment_count12month',
  lnj_lien_tax_count: 'lnj_lien_tax_count',
  lnj_lien_judgment_other_count: 'lnj_lien_judgment_other_count',
  lnj_lien_judgment_time_newest: 'lnj_lien_judgment_time_newest',
  lnj_lien_judgment_dollar_total: 'lnj_lien_judgment_dollar_total',
  lnj_lien_count: 'lnj_lien_count',
  lnj_lien_time_newest: 'lnj_lien_time_newest',
  lnj_lien_dollar_total: 'lnj_lien_dollar_total',
  lnj_lien_tax_time_newest: 'lnj_lien_tax_time_newest',
  lnj_lien_tax_dollar_total: 'lnj_lien_tax_dollar_total',
  lnj_lien_tax_state_count: 'lnj_lien_tax_state_count',
  lnj_lien_tax_state_time_newest: 'lnj_lien_tax_state_time_newest',
  lnj_lien_tax_state_dollar_total: 'lnj_lien_tax_state_dollar_total',
  lnj_lien_tax_federal_count: 'lnj_lien_tax_federal_count',
  lnj_lien_tax_federal_time_newest: 'lnj_lien_tax_federal_time_newest',
  lnj_lien_tax_federal_dollar_total: 'lnj_lien_tax_federal_dollar_total',
  lnj_judgment_count: 'lnj_judgment_count',
  lnj_judgment_time_newest: 'lnj_judgment_time_newest',
  lnj_judgment_dollar_total: 'lnj_judgment_dollar_total',
  created_at: 'created_at',
  updated_at: 'updated_at',
  second_look: 'second_look'
} as const

export type Lexisnexis_credit_attributes_stagingScalarFieldEnum = (typeof Lexisnexis_credit_attributes_stagingScalarFieldEnum)[keyof typeof Lexisnexis_credit_attributes_stagingScalarFieldEnum]


export const LoanScalarFieldEnum = {
  loan_number: 'loan_number',
  originator_number: 'originator_number',
  original_loan_amount: 'original_loan_amount',
  current_loan_amount: 'current_loan_amount',
  original_interest_rate: 'original_interest_rate',
  current_interest_rate: 'current_interest_rate',
  original_apr: 'original_apr',
  current_apr: 'current_apr',
  original_maturity_date: 'original_maturity_date',
  current_maturity_date: 'current_maturity_date',
  loan_term_in_months: 'loan_term_in_months',
  loan_status_number: 'loan_status_number',
  is_active: 'is_active',
  loan_origination_date: 'loan_origination_date',
  current_principal_balance: 'current_principal_balance',
  current_interest_balance: 'current_interest_balance',
  current_fees_balance: 'current_fees_balance',
  loan_purpose: 'loan_purpose',
  loan_open_date: 'loan_open_date',
  loan_purchase_date: 'loan_purchase_date',
  first_payment_date: 'first_payment_date',
  loan_payoff_date: 'loan_payoff_date',
  loan_closed_date: 'loan_closed_date',
  last_payment_amount: 'last_payment_amount',
  last_scheduled_principal_amount: 'last_scheduled_principal_amount',
  last_payment_interest_amount: 'last_payment_interest_amount',
  last_payment_fees_amount: 'last_payment_fees_amount',
  last_principal_prepayment_amount: 'last_principal_prepayment_amount',
  charge_off_status_number: 'charge_off_status_number',
  charge_off_date: 'charge_off_date',
  charge_off_amount: 'charge_off_amount',
  principal_charge_off_amount: 'principal_charge_off_amount',
  interest_charge_off_amount: 'interest_charge_off_amount',
  fees_charge_off_amount: 'fees_charge_off_amount',
  bankruptcy_status_number: 'bankruptcy_status_number',
  bankruptcy_filing_date: 'bankruptcy_filing_date',
  bankruptcy_type_number: 'bankruptcy_type_number',
  bankruptcy_state: 'bankruptcy_state',
  original_borrower_state: 'original_borrower_state',
  current_borrower_state: 'current_borrower_state',
  settlement_status_number: 'settlement_status_number',
  settlement_amount: 'settlement_amount',
  is_coborrower: 'is_coborrower',
  next_due_date: 'next_due_date',
  is_autopay: 'is_autopay',
  borrower_zip_code: 'borrower_zip_code',
  current_days_past_due: 'current_days_past_due',
  created_at: 'created_at',
  updated_at: 'updated_at',
  last_payment_date: 'last_payment_date',
  post_loan_dti_verified: 'post_loan_dti_verified',
  post_loan_dtihh_verified: 'post_loan_dtihh_verified',
  application_id: 'application_id',
  borrower_verified_income: 'borrower_verified_income',
  coborrower_verified_income: 'coborrower_verified_income',
  combined_verified_income: 'combined_verified_income',
  origination_fee_amount: 'origination_fee_amount',
  origination_fee_rebate_amount: 'origination_fee_rebate_amount',
  risk_group: 'risk_group',
  borrower_fico: 'borrower_fico',
  final_income: 'final_income',
  borrower_stated_income: 'borrower_stated_income',
  coborrower_stated_income: 'coborrower_stated_income',
  combined_stated_income: 'combined_stated_income',
  coborrower_vantage2_score: 'coborrower_vantage2_score',
  coborrower_vantage3_score: 'coborrower_vantage3_score',
  coborrower_vantage4_score: 'coborrower_vantage4_score',
  pre_loan_dti_verified: 'pre_loan_dti_verified',
  pre_loan_dti_verified_secondary: 'pre_loan_dti_verified_secondary',
  pre_loan_dti_verified_joint: 'pre_loan_dti_verified_joint',
  originator_removed: 'originator_removed',
  current_policy: 'current_policy',
  program: 'program'
} as const

export type LoanScalarFieldEnum = (typeof LoanScalarFieldEnum)[keyof typeof LoanScalarFieldEnum]


export const Loan_applicationScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  loan_product_number: 'loan_product_number',
  offer_id: 'offer_id',
  application_date: 'application_date',
  loan_purpose: 'loan_purpose',
  requested_amount: 'requested_amount',
  application_zip: 'application_zip',
  is_coborrower: 'is_coborrower',
  borrower_income: 'borrower_income',
  coborrower_income: 'coborrower_income',
  combined_income: 'combined_income',
  loan_offered_amount: 'loan_offered_amount',
  loan_offered_term: 'loan_offered_term',
  loan_offered_apr: 'loan_offered_apr',
  loan_offered_interest_rate: 'loan_offered_interest_rate',
  borrower_fico9: 'borrower_fico9',
  coborrower_fico9: 'coborrower_fico9',
  borrower_vantage2_score: 'borrower_vantage2_score',
  borrower_vantage3_score: 'borrower_vantage3_score',
  borrower_vantage4_score: 'borrower_vantage4_score',
  risk_score: 'risk_score',
  program: 'program',
  created_at: 'created_at',
  updated_at: 'updated_at',
  lti: 'lti',
  pre_loan_dti: 'pre_loan_dti',
  borrower_pti: 'borrower_pti',
  coborrower_pti: 'coborrower_pti',
  submit_date: 'submit_date',
  offered: 'offered',
  submitted: 'submitted',
  issued: 'issued',
  issued_date: 'issued_date'
} as const

export type Loan_applicationScalarFieldEnum = (typeof Loan_applicationScalarFieldEnum)[keyof typeof Loan_applicationScalarFieldEnum]


export const Loan_application_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  loan_product_number: 'loan_product_number',
  offer_id: 'offer_id',
  application_date: 'application_date',
  loan_purpose: 'loan_purpose',
  requested_amount: 'requested_amount',
  application_zip: 'application_zip',
  is_coborrower: 'is_coborrower',
  borrower_income: 'borrower_income',
  coborrower_income: 'coborrower_income',
  combined_income: 'combined_income',
  loan_offered_amount: 'loan_offered_amount',
  loan_offered_term: 'loan_offered_term',
  loan_offered_apr: 'loan_offered_apr',
  loan_offered_interest_rate: 'loan_offered_interest_rate',
  borrower_fico9: 'borrower_fico9',
  coborrower_fico9: 'coborrower_fico9',
  borrower_vantage2_score: 'borrower_vantage2_score',
  borrower_vantage3_score: 'borrower_vantage3_score',
  borrower_vantage4_score: 'borrower_vantage4_score',
  risk_score: 'risk_score',
  program: 'program',
  created_at: 'created_at',
  updated_at: 'updated_at',
  lti: 'lti',
  pre_loan_dti: 'pre_loan_dti',
  borrower_pti: 'borrower_pti',
  coborrower_pti: 'coborrower_pti',
  submit_date: 'submit_date',
  offered: 'offered',
  submitted: 'submitted',
  issued: 'issued',
  issued_date: 'issued_date'
} as const

export type Loan_application_stagingScalarFieldEnum = (typeof Loan_application_stagingScalarFieldEnum)[keyof typeof Loan_application_stagingScalarFieldEnum]


export const Loan_modificationScalarFieldEnum = {
  loan_number: 'loan_number',
  originator_number: 'originator_number',
  modification_number: 'modification_number',
  modification_request_date: 'modification_request_date',
  loan_modification_type_number: 'loan_modification_type_number',
  loan_modification_status_number: 'loan_modification_status_number',
  modification_approval_date: 'modification_approval_date',
  number_of_payments_deferred: 'number_of_payments_deferred',
  deferral_payment_start_date: 'deferral_payment_start_date',
  deferral_payment_end_date: 'deferral_payment_end_date',
  scra_effective_date: 'scra_effective_date',
  scra_knowledge_date: 'scra_knowledge_date',
  modified_interest_rate: 'modified_interest_rate',
  interest_rate_change_effective_date: 'interest_rate_change_effective_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deferral_payment_reason: 'deferral_payment_reason',
  deferral_payment_amount: 'deferral_payment_amount',
  scra_end_date: 'scra_end_date',
  is_current_modification: 'is_current_modification',
  originator_removed: 'originator_removed'
} as const

export type Loan_modificationScalarFieldEnum = (typeof Loan_modificationScalarFieldEnum)[keyof typeof Loan_modificationScalarFieldEnum]


export const Loan_modification_stagingScalarFieldEnum = {
  loan_number: 'loan_number',
  originator_number: 'originator_number',
  modification_number: 'modification_number',
  modification_request_date: 'modification_request_date',
  loan_modification_type_number: 'loan_modification_type_number',
  loan_modification_status_number: 'loan_modification_status_number',
  modification_approval_date: 'modification_approval_date',
  number_of_payments_deferred: 'number_of_payments_deferred',
  deferral_payment_start_date: 'deferral_payment_start_date',
  deferral_payment_end_date: 'deferral_payment_end_date',
  scra_effective_date: 'scra_effective_date',
  scra_knowledge_date: 'scra_knowledge_date',
  modified_interest_rate: 'modified_interest_rate',
  interest_rate_change_effective_date: 'interest_rate_change_effective_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deferral_payment_reason: 'deferral_payment_reason',
  deferral_payment_amount: 'deferral_payment_amount',
  scra_end_date: 'scra_end_date',
  is_current_modification: 'is_current_modification',
  originator_removed: 'originator_removed'
} as const

export type Loan_modification_stagingScalarFieldEnum = (typeof Loan_modification_stagingScalarFieldEnum)[keyof typeof Loan_modification_stagingScalarFieldEnum]


export const Loan_modification_statusScalarFieldEnum = {
  loan_modification_status_number: 'loan_modification_status_number',
  loan_modification_status_description: 'loan_modification_status_description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Loan_modification_statusScalarFieldEnum = (typeof Loan_modification_statusScalarFieldEnum)[keyof typeof Loan_modification_statusScalarFieldEnum]


export const Loan_modification_typeScalarFieldEnum = {
  loan_modification_type_number: 'loan_modification_type_number',
  loan_modification_type_description: 'loan_modification_type_description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Loan_modification_typeScalarFieldEnum = (typeof Loan_modification_typeScalarFieldEnum)[keyof typeof Loan_modification_typeScalarFieldEnum]


export const Loan_productScalarFieldEnum = {
  loan_product_number: 'loan_product_number',
  loan_product_description: 'loan_product_description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Loan_productScalarFieldEnum = (typeof Loan_productScalarFieldEnum)[keyof typeof Loan_productScalarFieldEnum]


export const Loan_stagingScalarFieldEnum = {
  loan_number: 'loan_number',
  originator_number: 'originator_number',
  original_loan_amount: 'original_loan_amount',
  current_loan_amount: 'current_loan_amount',
  original_interest_rate: 'original_interest_rate',
  current_interest_rate: 'current_interest_rate',
  original_apr: 'original_apr',
  current_apr: 'current_apr',
  original_maturity_date: 'original_maturity_date',
  current_maturity_date: 'current_maturity_date',
  loan_term_in_months: 'loan_term_in_months',
  loan_status_number: 'loan_status_number',
  is_active: 'is_active',
  loan_origination_date: 'loan_origination_date',
  current_principal_balance: 'current_principal_balance',
  current_interest_balance: 'current_interest_balance',
  current_fees_balance: 'current_fees_balance',
  loan_purpose: 'loan_purpose',
  loan_open_date: 'loan_open_date',
  loan_purchase_date: 'loan_purchase_date',
  first_payment_date: 'first_payment_date',
  loan_payoff_date: 'loan_payoff_date',
  loan_closed_date: 'loan_closed_date',
  last_payment_amount: 'last_payment_amount',
  last_scheduled_principal_amount: 'last_scheduled_principal_amount',
  last_payment_interest_amount: 'last_payment_interest_amount',
  last_payment_fees_amount: 'last_payment_fees_amount',
  last_principal_prepayment_amount: 'last_principal_prepayment_amount',
  charge_off_status_number: 'charge_off_status_number',
  charge_off_date: 'charge_off_date',
  charge_off_amount: 'charge_off_amount',
  principal_charge_off_amount: 'principal_charge_off_amount',
  interest_charge_off_amount: 'interest_charge_off_amount',
  fees_charge_off_amount: 'fees_charge_off_amount',
  bankruptcy_status_number: 'bankruptcy_status_number',
  bankruptcy_filing_date: 'bankruptcy_filing_date',
  bankruptcy_type_number: 'bankruptcy_type_number',
  bankruptcy_state: 'bankruptcy_state',
  original_borrower_state: 'original_borrower_state',
  current_borrower_state: 'current_borrower_state',
  settlement_status_number: 'settlement_status_number',
  settlement_amount: 'settlement_amount',
  is_coborrower: 'is_coborrower',
  next_due_date: 'next_due_date',
  is_autopay: 'is_autopay',
  borrower_zip_code: 'borrower_zip_code',
  current_days_past_due: 'current_days_past_due',
  created_at: 'created_at',
  updated_at: 'updated_at',
  last_payment_date: 'last_payment_date',
  post_loan_dti_verified: 'post_loan_dti_verified',
  post_loan_dtihh_verified: 'post_loan_dtihh_verified',
  application_id: 'application_id',
  borrower_verified_income: 'borrower_verified_income',
  coborrower_verified_income: 'coborrower_verified_income',
  combined_verified_income: 'combined_verified_income',
  origination_fee_amount: 'origination_fee_amount',
  origination_fee_rebate_amount: 'origination_fee_rebate_amount',
  risk_group: 'risk_group',
  borrower_fico: 'borrower_fico',
  final_income: 'final_income',
  borrower_stated_income: 'borrower_stated_income',
  coborrower_stated_income: 'coborrower_stated_income',
  combined_stated_income: 'combined_stated_income',
  coborrower_vantage2_score: 'coborrower_vantage2_score',
  coborrower_vantage3_score: 'coborrower_vantage3_score',
  coborrower_vantage4_score: 'coborrower_vantage4_score',
  pre_loan_dti_verified: 'pre_loan_dti_verified',
  pre_loan_dti_verified_secondary: 'pre_loan_dti_verified_secondary',
  pre_loan_dti_verified_joint: 'pre_loan_dti_verified_joint',
  originator_removed: 'originator_removed',
  program: 'program',
  current_policy: 'current_policy'
} as const

export type Loan_stagingScalarFieldEnum = (typeof Loan_stagingScalarFieldEnum)[keyof typeof Loan_stagingScalarFieldEnum]


export const Loan_statusScalarFieldEnum = {
  loan_status_number: 'loan_status_number',
  loan_status_description: 'loan_status_description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Loan_statusScalarFieldEnum = (typeof Loan_statusScalarFieldEnum)[keyof typeof Loan_statusScalarFieldEnum]


export const Loan_transactionScalarFieldEnum = {
  loan_number: 'loan_number',
  originator_number: 'originator_number',
  transaction_id: 'transaction_id',
  loan_transaction_type_number: 'loan_transaction_type_number',
  transaction_date_time: 'transaction_date_time',
  gl_date: 'gl_date',
  effective_date: 'effective_date',
  transaction_amount: 'transaction_amount',
  total_principal_amount: 'total_principal_amount',
  interest_amount: 'interest_amount',
  fees_amount: 'fees_amount',
  principal_prepayment_amount: 'principal_prepayment_amount',
  suspense_amount: 'suspense_amount',
  created_at: 'created_at',
  updated_at: 'updated_at',
  mob: 'mob',
  originator_removed: 'originator_removed'
} as const

export type Loan_transactionScalarFieldEnum = (typeof Loan_transactionScalarFieldEnum)[keyof typeof Loan_transactionScalarFieldEnum]


export const Loan_transaction_stagingScalarFieldEnum = {
  loan_number: 'loan_number',
  originator_number: 'originator_number',
  transaction_id: 'transaction_id',
  loan_transaction_type_number: 'loan_transaction_type_number',
  transaction_date_time: 'transaction_date_time',
  gl_date: 'gl_date',
  effective_date: 'effective_date',
  transaction_amount: 'transaction_amount',
  total_principal_amount: 'total_principal_amount',
  interest_amount: 'interest_amount',
  fees_amount: 'fees_amount',
  principal_prepayment_amount: 'principal_prepayment_amount',
  suspense_amount: 'suspense_amount',
  created_at: 'created_at',
  updated_at: 'updated_at',
  mob: 'mob',
  originator_removed: 'originator_removed'
} as const

export type Loan_transaction_stagingScalarFieldEnum = (typeof Loan_transaction_stagingScalarFieldEnum)[keyof typeof Loan_transaction_stagingScalarFieldEnum]


export const Loan_transaction_typeScalarFieldEnum = {
  loan_transaction_type_number: 'loan_transaction_type_number',
  loan_transaction_type_description: 'loan_transaction_type_description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Loan_transaction_typeScalarFieldEnum = (typeof Loan_transaction_typeScalarFieldEnum)[keyof typeof Loan_transaction_typeScalarFieldEnum]


export const Loan_trial_balanceScalarFieldEnum = {
  loan_number: 'loan_number',
  originator_number: 'originator_number',
  trial_balance_date: 'trial_balance_date',
  interest_rate: 'interest_rate',
  principal_balance: 'principal_balance',
  interest_balance: 'interest_balance',
  fees_balance: 'fees_balance',
  suspense_balance: 'suspense_balance',
  effective_principal_balance: 'effective_principal_balance',
  effective_interest_balance: 'effective_interest_balance',
  effective_fees_balance: 'effective_fees_balance',
  effective_suspense_balance: 'effective_suspense_balance',
  days_past_due: 'days_past_due',
  effective_days_past_due: 'effective_days_past_due',
  loan_status_number: 'loan_status_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  originator_removed: 'originator_removed',
  mob: 'mob'
} as const

export type Loan_trial_balanceScalarFieldEnum = (typeof Loan_trial_balanceScalarFieldEnum)[keyof typeof Loan_trial_balanceScalarFieldEnum]


export const Loan_trial_balance_stagingScalarFieldEnum = {
  loan_number: 'loan_number',
  originator_number: 'originator_number',
  trial_balance_date: 'trial_balance_date',
  interest_rate: 'interest_rate',
  principal_balance: 'principal_balance',
  interest_balance: 'interest_balance',
  fees_balance: 'fees_balance',
  suspense_balance: 'suspense_balance',
  effective_principal_balance: 'effective_principal_balance',
  effective_interest_balance: 'effective_interest_balance',
  effective_fees_balance: 'effective_fees_balance',
  effective_suspense_balance: 'effective_suspense_balance',
  days_past_due: 'days_past_due',
  effective_days_past_due: 'effective_days_past_due',
  loan_status_number: 'loan_status_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  originator_removed: 'originator_removed',
  mob: 'mob'
} as const

export type Loan_trial_balance_stagingScalarFieldEnum = (typeof Loan_trial_balance_stagingScalarFieldEnum)[keyof typeof Loan_trial_balance_stagingScalarFieldEnum]


export const Oln_credit_attributesScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  olnaf1001: 'olnaf1001',
  olnaf1002: 'olnaf1002',
  olnaf1003: 'olnaf1003',
  olnaf1004: 'olnaf1004',
  olnaf1005: 'olnaf1005',
  olnaf1006: 'olnaf1006',
  olnaf1007: 'olnaf1007',
  olnaf1008: 'olnaf1008',
  olnaf1009: 'olnaf1009',
  olnaf1010: 'olnaf1010',
  olnaf1011: 'olnaf1011',
  olnaf1012: 'olnaf1012',
  olnaf1013: 'olnaf1013',
  olnaf1014: 'olnaf1014',
  olnaf1015: 'olnaf1015',
  olnaf1016: 'olnaf1016',
  olnaf1017: 'olnaf1017',
  olnaf1018: 'olnaf1018',
  olnaf1019: 'olnaf1019',
  olnaf1020: 'olnaf1020',
  olnaf1021: 'olnaf1021',
  olnaf1022: 'olnaf1022',
  olnaf1023: 'olnaf1023',
  olnaf1024: 'olnaf1024',
  olnaf1025: 'olnaf1025',
  olnaf1026: 'olnaf1026',
  olnaf1027: 'olnaf1027',
  olnaf1028: 'olnaf1028',
  olnaf1029: 'olnaf1029',
  olnaf1030: 'olnaf1030',
  olnaf1031: 'olnaf1031',
  olnaf1032: 'olnaf1032',
  olnaf1033: 'olnaf1033',
  olnaf1034: 'olnaf1034',
  olnaf1035: 'olnaf1035',
  olnaf1036: 'olnaf1036',
  olnaf1037: 'olnaf1037',
  olnaf1038: 'olnaf1038',
  olnaf1039: 'olnaf1039',
  olnaf1040: 'olnaf1040',
  olnaf1041: 'olnaf1041',
  olnaf1042: 'olnaf1042',
  olnaf1043: 'olnaf1043',
  olnaf1044: 'olnaf1044',
  olnaf1045: 'olnaf1045',
  olnaf1046: 'olnaf1046',
  olnaf1047: 'olnaf1047',
  olnaf1048: 'olnaf1048',
  olnaf1049: 'olnaf1049',
  olnaf1050: 'olnaf1050',
  olnaf1051: 'olnaf1051',
  olnaf1052: 'olnaf1052',
  olnaf1053: 'olnaf1053',
  olnaf1054: 'olnaf1054',
  olnaf1055: 'olnaf1055',
  olnaf1056: 'olnaf1056',
  olnaf1057: 'olnaf1057',
  olnaf1058: 'olnaf1058',
  olnaf1059: 'olnaf1059',
  olnaf1060: 'olnaf1060',
  olnaf1061: 'olnaf1061',
  olnaf1062: 'olnaf1062',
  olnaf1063: 'olnaf1063',
  olnaf1064: 'olnaf1064',
  olnaf1065: 'olnaf1065',
  olnaf1066: 'olnaf1066',
  olnaf1067: 'olnaf1067',
  olnaf1068: 'olnaf1068',
  olnaf1069: 'olnaf1069',
  olnaf1070: 'olnaf1070',
  olnaf1071: 'olnaf1071',
  olnaf1072: 'olnaf1072',
  olnaf1073: 'olnaf1073',
  olnaf1074: 'olnaf1074',
  olnaf1075: 'olnaf1075',
  olnaf1076: 'olnaf1076',
  olnaf1077: 'olnaf1077',
  olnaf1078: 'olnaf1078',
  olnaf1079: 'olnaf1079',
  olnaf1080: 'olnaf1080',
  olnaf1081: 'olnaf1081',
  olnaf1082: 'olnaf1082',
  olnaf1083: 'olnaf1083',
  olnaf1084: 'olnaf1084',
  olnaf1085: 'olnaf1085',
  olnaf1086: 'olnaf1086',
  olnaf1087: 'olnaf1087',
  olnaf1088: 'olnaf1088',
  olnaf1089: 'olnaf1089',
  olnaf1090: 'olnaf1090',
  olnaf1091: 'olnaf1091',
  olnaf1092: 'olnaf1092',
  olnaf1093: 'olnaf1093',
  olnaf1094: 'olnaf1094',
  olnaf1095: 'olnaf1095',
  olnaf1096: 'olnaf1096',
  olnaf1097: 'olnaf1097',
  olnaf1098: 'olnaf1098',
  olnaf1099: 'olnaf1099',
  olnaf1100: 'olnaf1100',
  olnaf1101: 'olnaf1101',
  olnaf1102: 'olnaf1102',
  olnaf1103: 'olnaf1103',
  olnaf1104: 'olnaf1104',
  olnaf1105: 'olnaf1105',
  olnaf1106: 'olnaf1106',
  olnaf1107: 'olnaf1107',
  olnaf1108: 'olnaf1108',
  olnaf1109: 'olnaf1109',
  olnaf1110: 'olnaf1110',
  olnaf1111: 'olnaf1111',
  olnaf1112: 'olnaf1112',
  olnaf1113: 'olnaf1113',
  olnaf1114: 'olnaf1114',
  olnaf1115: 'olnaf1115',
  olnaf1116: 'olnaf1116',
  olnaf1117: 'olnaf1117',
  olnaf1118: 'olnaf1118',
  olnaf1119: 'olnaf1119',
  olnaf1120: 'olnaf1120',
  olnaf1121: 'olnaf1121',
  olnaf1122: 'olnaf1122',
  olnaf1123: 'olnaf1123',
  olnaf1124: 'olnaf1124',
  olnaf1125: 'olnaf1125',
  olnaf1126: 'olnaf1126',
  olnaf1127: 'olnaf1127',
  olnaf1128: 'olnaf1128',
  olnaf1129: 'olnaf1129',
  olnaf1130: 'olnaf1130',
  olnaf1131: 'olnaf1131',
  olnaf1132: 'olnaf1132',
  olnaf1133: 'olnaf1133',
  olnaf1134: 'olnaf1134',
  olnaf1135: 'olnaf1135',
  olnaf1136: 'olnaf1136',
  olnaf1137: 'olnaf1137',
  olnaf1138: 'olnaf1138',
  olnaf1139: 'olnaf1139',
  olnaf1140: 'olnaf1140',
  olnaf1141: 'olnaf1141',
  olnaf1142: 'olnaf1142',
  olnaf1143: 'olnaf1143',
  olnaf1144: 'olnaf1144',
  olnaf1145: 'olnaf1145',
  olnaf1146: 'olnaf1146',
  olnaf1147: 'olnaf1147',
  olnaf1148: 'olnaf1148',
  olnaf1149: 'olnaf1149',
  olnaf1150: 'olnaf1150',
  olnaf1151: 'olnaf1151',
  olnaf1152: 'olnaf1152',
  olnaf1153: 'olnaf1153',
  olnaf1154: 'olnaf1154',
  olnaf1155: 'olnaf1155',
  olnaf1156: 'olnaf1156',
  olnaf1157: 'olnaf1157',
  olnaf1158: 'olnaf1158',
  olnaf1159: 'olnaf1159',
  olnaf1160: 'olnaf1160',
  olnaf1161: 'olnaf1161',
  olnaf1162: 'olnaf1162',
  olnaf1163: 'olnaf1163',
  olnaf1164: 'olnaf1164',
  olnaf1165: 'olnaf1165',
  olnaf1166: 'olnaf1166',
  olnaf1167: 'olnaf1167',
  olnaf1168: 'olnaf1168',
  olnaf1169: 'olnaf1169',
  olnaf1170: 'olnaf1170',
  olnaf1171: 'olnaf1171',
  olnaf1172: 'olnaf1172',
  olnaf1173: 'olnaf1173',
  olnaf1174: 'olnaf1174',
  olnaf1175: 'olnaf1175',
  olnaf1176: 'olnaf1176',
  olnaf1177: 'olnaf1177',
  olnaf1178: 'olnaf1178',
  olnaf1179: 'olnaf1179',
  olnaf1180: 'olnaf1180',
  olnaf1181: 'olnaf1181',
  olnaf1182: 'olnaf1182',
  olnaf1183: 'olnaf1183',
  olnaf1184: 'olnaf1184',
  olnaf1185: 'olnaf1185',
  olnaf1186: 'olnaf1186',
  olnaf1187: 'olnaf1187',
  olnaf1188: 'olnaf1188',
  olnaf1189: 'olnaf1189',
  olnaf1190: 'olnaf1190',
  olnaf1191: 'olnaf1191',
  olnaf1192: 'olnaf1192',
  olnaf1193: 'olnaf1193',
  olnaf1194: 'olnaf1194',
  olnaf1195: 'olnaf1195',
  created_at: 'created_at',
  updated_at: 'updated_at',
  second_look: 'second_look'
} as const

export type Oln_credit_attributesScalarFieldEnum = (typeof Oln_credit_attributesScalarFieldEnum)[keyof typeof Oln_credit_attributesScalarFieldEnum]


export const Oln_credit_attributes_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  olnaf1001: 'olnaf1001',
  olnaf1002: 'olnaf1002',
  olnaf1003: 'olnaf1003',
  olnaf1004: 'olnaf1004',
  olnaf1005: 'olnaf1005',
  olnaf1006: 'olnaf1006',
  olnaf1007: 'olnaf1007',
  olnaf1008: 'olnaf1008',
  olnaf1009: 'olnaf1009',
  olnaf1010: 'olnaf1010',
  olnaf1011: 'olnaf1011',
  olnaf1012: 'olnaf1012',
  olnaf1013: 'olnaf1013',
  olnaf1014: 'olnaf1014',
  olnaf1015: 'olnaf1015',
  olnaf1016: 'olnaf1016',
  olnaf1017: 'olnaf1017',
  olnaf1018: 'olnaf1018',
  olnaf1019: 'olnaf1019',
  olnaf1020: 'olnaf1020',
  olnaf1021: 'olnaf1021',
  olnaf1022: 'olnaf1022',
  olnaf1023: 'olnaf1023',
  olnaf1024: 'olnaf1024',
  olnaf1025: 'olnaf1025',
  olnaf1026: 'olnaf1026',
  olnaf1027: 'olnaf1027',
  olnaf1028: 'olnaf1028',
  olnaf1029: 'olnaf1029',
  olnaf1030: 'olnaf1030',
  olnaf1031: 'olnaf1031',
  olnaf1032: 'olnaf1032',
  olnaf1033: 'olnaf1033',
  olnaf1034: 'olnaf1034',
  olnaf1035: 'olnaf1035',
  olnaf1036: 'olnaf1036',
  olnaf1037: 'olnaf1037',
  olnaf1038: 'olnaf1038',
  olnaf1039: 'olnaf1039',
  olnaf1040: 'olnaf1040',
  olnaf1041: 'olnaf1041',
  olnaf1042: 'olnaf1042',
  olnaf1043: 'olnaf1043',
  olnaf1044: 'olnaf1044',
  olnaf1045: 'olnaf1045',
  olnaf1046: 'olnaf1046',
  olnaf1047: 'olnaf1047',
  olnaf1048: 'olnaf1048',
  olnaf1049: 'olnaf1049',
  olnaf1050: 'olnaf1050',
  olnaf1051: 'olnaf1051',
  olnaf1052: 'olnaf1052',
  olnaf1053: 'olnaf1053',
  olnaf1054: 'olnaf1054',
  olnaf1055: 'olnaf1055',
  olnaf1056: 'olnaf1056',
  olnaf1057: 'olnaf1057',
  olnaf1058: 'olnaf1058',
  olnaf1059: 'olnaf1059',
  olnaf1060: 'olnaf1060',
  olnaf1061: 'olnaf1061',
  olnaf1062: 'olnaf1062',
  olnaf1063: 'olnaf1063',
  olnaf1064: 'olnaf1064',
  olnaf1065: 'olnaf1065',
  olnaf1066: 'olnaf1066',
  olnaf1067: 'olnaf1067',
  olnaf1068: 'olnaf1068',
  olnaf1069: 'olnaf1069',
  olnaf1070: 'olnaf1070',
  olnaf1071: 'olnaf1071',
  olnaf1072: 'olnaf1072',
  olnaf1073: 'olnaf1073',
  olnaf1074: 'olnaf1074',
  olnaf1075: 'olnaf1075',
  olnaf1076: 'olnaf1076',
  olnaf1077: 'olnaf1077',
  olnaf1078: 'olnaf1078',
  olnaf1079: 'olnaf1079',
  olnaf1080: 'olnaf1080',
  olnaf1081: 'olnaf1081',
  olnaf1082: 'olnaf1082',
  olnaf1083: 'olnaf1083',
  olnaf1084: 'olnaf1084',
  olnaf1085: 'olnaf1085',
  olnaf1086: 'olnaf1086',
  olnaf1087: 'olnaf1087',
  olnaf1088: 'olnaf1088',
  olnaf1089: 'olnaf1089',
  olnaf1090: 'olnaf1090',
  olnaf1091: 'olnaf1091',
  olnaf1092: 'olnaf1092',
  olnaf1093: 'olnaf1093',
  olnaf1094: 'olnaf1094',
  olnaf1095: 'olnaf1095',
  olnaf1096: 'olnaf1096',
  olnaf1097: 'olnaf1097',
  olnaf1098: 'olnaf1098',
  olnaf1099: 'olnaf1099',
  olnaf1100: 'olnaf1100',
  olnaf1101: 'olnaf1101',
  olnaf1102: 'olnaf1102',
  olnaf1103: 'olnaf1103',
  olnaf1104: 'olnaf1104',
  olnaf1105: 'olnaf1105',
  olnaf1106: 'olnaf1106',
  olnaf1107: 'olnaf1107',
  olnaf1108: 'olnaf1108',
  olnaf1109: 'olnaf1109',
  olnaf1110: 'olnaf1110',
  olnaf1111: 'olnaf1111',
  olnaf1112: 'olnaf1112',
  olnaf1113: 'olnaf1113',
  olnaf1114: 'olnaf1114',
  olnaf1115: 'olnaf1115',
  olnaf1116: 'olnaf1116',
  olnaf1117: 'olnaf1117',
  olnaf1118: 'olnaf1118',
  olnaf1119: 'olnaf1119',
  olnaf1120: 'olnaf1120',
  olnaf1121: 'olnaf1121',
  olnaf1122: 'olnaf1122',
  olnaf1123: 'olnaf1123',
  olnaf1124: 'olnaf1124',
  olnaf1125: 'olnaf1125',
  olnaf1126: 'olnaf1126',
  olnaf1127: 'olnaf1127',
  olnaf1128: 'olnaf1128',
  olnaf1129: 'olnaf1129',
  olnaf1130: 'olnaf1130',
  olnaf1131: 'olnaf1131',
  olnaf1132: 'olnaf1132',
  olnaf1133: 'olnaf1133',
  olnaf1134: 'olnaf1134',
  olnaf1135: 'olnaf1135',
  olnaf1136: 'olnaf1136',
  olnaf1137: 'olnaf1137',
  olnaf1138: 'olnaf1138',
  olnaf1139: 'olnaf1139',
  olnaf1140: 'olnaf1140',
  olnaf1141: 'olnaf1141',
  olnaf1142: 'olnaf1142',
  olnaf1143: 'olnaf1143',
  olnaf1144: 'olnaf1144',
  olnaf1145: 'olnaf1145',
  olnaf1146: 'olnaf1146',
  olnaf1147: 'olnaf1147',
  olnaf1148: 'olnaf1148',
  olnaf1149: 'olnaf1149',
  olnaf1150: 'olnaf1150',
  olnaf1151: 'olnaf1151',
  olnaf1152: 'olnaf1152',
  olnaf1153: 'olnaf1153',
  olnaf1154: 'olnaf1154',
  olnaf1155: 'olnaf1155',
  olnaf1156: 'olnaf1156',
  olnaf1157: 'olnaf1157',
  olnaf1158: 'olnaf1158',
  olnaf1159: 'olnaf1159',
  olnaf1160: 'olnaf1160',
  olnaf1161: 'olnaf1161',
  olnaf1162: 'olnaf1162',
  olnaf1163: 'olnaf1163',
  olnaf1164: 'olnaf1164',
  olnaf1165: 'olnaf1165',
  olnaf1166: 'olnaf1166',
  olnaf1167: 'olnaf1167',
  olnaf1168: 'olnaf1168',
  olnaf1169: 'olnaf1169',
  olnaf1170: 'olnaf1170',
  olnaf1171: 'olnaf1171',
  olnaf1172: 'olnaf1172',
  olnaf1173: 'olnaf1173',
  olnaf1174: 'olnaf1174',
  olnaf1175: 'olnaf1175',
  olnaf1176: 'olnaf1176',
  olnaf1177: 'olnaf1177',
  olnaf1178: 'olnaf1178',
  olnaf1179: 'olnaf1179',
  olnaf1180: 'olnaf1180',
  olnaf1181: 'olnaf1181',
  olnaf1182: 'olnaf1182',
  olnaf1183: 'olnaf1183',
  olnaf1184: 'olnaf1184',
  olnaf1185: 'olnaf1185',
  olnaf1186: 'olnaf1186',
  olnaf1187: 'olnaf1187',
  olnaf1188: 'olnaf1188',
  olnaf1189: 'olnaf1189',
  olnaf1190: 'olnaf1190',
  olnaf1191: 'olnaf1191',
  olnaf1192: 'olnaf1192',
  olnaf1193: 'olnaf1193',
  olnaf1194: 'olnaf1194',
  olnaf1195: 'olnaf1195',
  created_at: 'created_at',
  updated_at: 'updated_at',
  second_look: 'second_look'
} as const

export type Oln_credit_attributes_stagingScalarFieldEnum = (typeof Oln_credit_attributes_stagingScalarFieldEnum)[keyof typeof Oln_credit_attributes_stagingScalarFieldEnum]


export const OriginatorScalarFieldEnum = {
  originator_number: 'originator_number',
  platform: 'platform',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type OriginatorScalarFieldEnum = (typeof OriginatorScalarFieldEnum)[keyof typeof OriginatorScalarFieldEnum]


export const Pricing_engineScalarFieldEnum = {
  id: 'id',
  minimum_interest_rate: 'minimum_interest_rate',
  created_at: 'created_at',
  updated_at: 'updated_at',
  program: 'program',
  loan_term_in_months: 'loan_term_in_months'
} as const

export type Pricing_engineScalarFieldEnum = (typeof Pricing_engineScalarFieldEnum)[keyof typeof Pricing_engineScalarFieldEnum]


export const Pricing_gridScalarFieldEnum = {
  originator_number: 'originator_number',
  original_loan_amount: 'original_loan_amount',
  loan_term_in_months: 'loan_term_in_months',
  coupon: 'coupon',
  naco: 'naco',
  roa: 'roa',
  resiliency: 'resiliency',
  wal: 'wal',
  crm_score: 'crm_score',
  prepay_score: 'prepay_score',
  pg_lifetime: 'pg_lifetime',
  logit_pg_lifetime: 'logit_pg_lifetime',
  default_model: 'default_model',
  prepay_model: 'prepay_model',
  mean_intercept: 'mean_intercept',
  mean_slope: 'mean_slope'
} as const

export type Pricing_gridScalarFieldEnum = (typeof Pricing_gridScalarFieldEnum)[keyof typeof Pricing_gridScalarFieldEnum]


export const Second_look_adverse_actionsScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  priority: 'priority',
  adverse_action_code: 'adverse_action_code',
  created_at: 'created_at',
  updated_at: 'updated_at',
  request_uuid: 'request_uuid'
} as const

export type Second_look_adverse_actionsScalarFieldEnum = (typeof Second_look_adverse_actionsScalarFieldEnum)[keyof typeof Second_look_adverse_actionsScalarFieldEnum]


export const Second_look_adverse_actions_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  priority: 'priority',
  adverse_action_code: 'adverse_action_code',
  created_at: 'created_at',
  updated_at: 'updated_at',
  request_uuid: 'request_uuid'
} as const

export type Second_look_adverse_actions_stagingScalarFieldEnum = (typeof Second_look_adverse_actions_stagingScalarFieldEnum)[keyof typeof Second_look_adverse_actions_stagingScalarFieldEnum]


export const Second_look_applicationsScalarFieldEnum = {
  application_id: 'application_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  fico9: 'fico9',
  preloandti: 'preloandti',
  delos_score: 'delos_score',
  originator_number: 'originator_number',
  request_uuid: 'request_uuid',
  request_type: 'request_type',
  verification_reasons: 'verification_reasons',
  asset_type: 'asset_type',
  desired_amount: 'desired_amount',
  purpose: 'purpose',
  channel: 'channel',
  source_system: 'source_system',
  income: 'income',
  additional_income: 'additional_income',
  zip_code: 'zip_code',
  state: 'state',
  expanded_program_segment: 'expanded_program_segment',
  expanded_program_sub_segment: 'expanded_program_sub_segment',
  vantage2: 'vantage2',
  vantage3: 'vantage3',
  preloan_dti: 'preloan_dti',
  total_free_cash_flow_amount: 'total_free_cash_flow_amount',
  upg_internal_score_4_bin: 'upg_internal_score_4_bin',
  upg_ftr_1_bin: 'upg_ftr_1_bin',
  vehicle_year: 'vehicle_year',
  vehicle_make: 'vehicle_make',
  vehicle_model: 'vehicle_model',
  vehicle_trim: 'vehicle_trim',
  vehicle_mileage: 'vehicle_mileage',
  vehicle_value: 'vehicle_value',
  confirmed_collateral: 'confirmed_collateral',
  existing_loan_original_balance: 'existing_loan_original_balance',
  existing_loan_payoff_remaining_balance: 'existing_loan_payoff_remaining_balance',
  existing_loan_monthly_payment: 'existing_loan_monthly_payment',
  existing_loan_term: 'existing_loan_term',
  existing_loan_open_date: 'existing_loan_open_date',
  program: 'program',
  current_address_date_reported: 'current_address_date_reported',
  current_address_street_number_hash: 'current_address_street_number_hash',
  current_address_street_name_hash: 'current_address_street_name_hash',
  current_address_pre_directional: 'current_address_pre_directional',
  current_address_post_directional: 'current_address_post_directional',
  current_address_street_type: 'current_address_street_type',
  current_address_unit_type: 'current_address_unit_type',
  current_address_unit_number: 'current_address_unit_number',
  current_address_city: 'current_address_city',
  current_address_state: 'current_address_state',
  current_address_zip_code: 'current_address_zip_code',
  current_residence_status: 'current_residence_status',
  current_residence_duration: 'current_residence_duration'
} as const

export type Second_look_applicationsScalarFieldEnum = (typeof Second_look_applicationsScalarFieldEnum)[keyof typeof Second_look_applicationsScalarFieldEnum]


export const Second_look_applications_stagingScalarFieldEnum = {
  application_id: 'application_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  fico9: 'fico9',
  preloandti: 'preloandti',
  delos_score: 'delos_score',
  originator_number: 'originator_number',
  request_uuid: 'request_uuid',
  request_type: 'request_type',
  verification_reasons: 'verification_reasons',
  asset_type: 'asset_type',
  desired_amount: 'desired_amount',
  purpose: 'purpose',
  channel: 'channel',
  source_system: 'source_system',
  income: 'income',
  additional_income: 'additional_income',
  zip_code: 'zip_code',
  state: 'state',
  expanded_program_segment: 'expanded_program_segment',
  expanded_program_sub_segment: 'expanded_program_sub_segment',
  vantage2: 'vantage2',
  vantage3: 'vantage3',
  preloan_dti: 'preloan_dti',
  total_free_cash_flow_amount: 'total_free_cash_flow_amount',
  upg_internal_score_4_bin: 'upg_internal_score_4_bin',
  upg_ftr_1_bin: 'upg_ftr_1_bin',
  vehicle_year: 'vehicle_year',
  vehicle_make: 'vehicle_make',
  vehicle_model: 'vehicle_model',
  vehicle_trim: 'vehicle_trim',
  vehicle_mileage: 'vehicle_mileage',
  vehicle_value: 'vehicle_value',
  confirmed_collateral: 'confirmed_collateral',
  existing_loan_original_balance: 'existing_loan_original_balance',
  existing_loan_payoff_remaining_balance: 'existing_loan_payoff_remaining_balance',
  existing_loan_monthly_payment: 'existing_loan_monthly_payment',
  existing_loan_term: 'existing_loan_term',
  existing_loan_open_date: 'existing_loan_open_date',
  program: 'program',
  current_address_date_reported: 'current_address_date_reported',
  current_address_street_number_hash: 'current_address_street_number_hash',
  current_address_street_name_hash: 'current_address_street_name_hash',
  current_address_pre_directional: 'current_address_pre_directional',
  current_address_post_directional: 'current_address_post_directional',
  current_address_street_type: 'current_address_street_type',
  current_address_unit_type: 'current_address_unit_type',
  current_address_unit_number: 'current_address_unit_number',
  current_address_city: 'current_address_city',
  current_address_state: 'current_address_state',
  current_address_zip_code: 'current_address_zip_code',
  current_residence_status: 'current_residence_status',
  current_residence_duration: 'current_residence_duration'
} as const

export type Second_look_applications_stagingScalarFieldEnum = (typeof Second_look_applications_stagingScalarFieldEnum)[keyof typeof Second_look_applications_stagingScalarFieldEnum]


export const Second_look_crmScalarFieldEnum = {
  id: 'id',
  application_id: 'application_id',
  total_score: 'total_score',
  partial_scores: 'partial_scores',
  adverse_action_reasons: 'adverse_action_reasons',
  original_created_at: 'original_created_at',
  backfill_processed_at: 'backfill_processed_at',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  partial_score_at01s: 'partial_score_at01s',
  partial_score_at36s: 'partial_score_at36s',
  partial_score_fico9: 'partial_score_fico9',
  partial_score_g103s: 'partial_score_g103s',
  partial_score_mt34s: 'partial_score_mt34s',
  partial_score_re20s: 'partial_score_re20s',
  partial_score_re34s: 'partial_score_re34s',
  partial_score_s004s: 'partial_score_s004s',
  partial_score_s114s: 'partial_score_s114s',
  partial_score_s204a: 'partial_score_s204a',
  partial_score_trv01: 'partial_score_trv01',
  partial_score_trv10: 'partial_score_trv10',
  partial_score_c_pf34: 'partial_score_c_pf34',
  partial_score_s_g018: 'partial_score_s_g018',
  partial_score_preloandti: 'partial_score_preloandti',
  adverse_action_code_1: 'adverse_action_code_1',
  adverse_action_description_1: 'adverse_action_description_1',
  adverse_action_code_2: 'adverse_action_code_2',
  adverse_action_description_2: 'adverse_action_description_2',
  adverse_action_code_3: 'adverse_action_code_3',
  adverse_action_description_3: 'adverse_action_description_3',
  adverse_action_code_4: 'adverse_action_code_4',
  adverse_action_description_4: 'adverse_action_description_4',
  adverse_action_code_5: 'adverse_action_code_5',
  adverse_action_description_5: 'adverse_action_description_5'
} as const

export type Second_look_crmScalarFieldEnum = (typeof Second_look_crmScalarFieldEnum)[keyof typeof Second_look_crmScalarFieldEnum]


export const Second_look_crm_stagingScalarFieldEnum = {
  id: 'id',
  application_id: 'application_id',
  total_score: 'total_score',
  partial_scores: 'partial_scores',
  adverse_action_reasons: 'adverse_action_reasons',
  original_created_at: 'original_created_at',
  backfill_processed_at: 'backfill_processed_at',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  partial_score_at01s: 'partial_score_at01s',
  partial_score_at36s: 'partial_score_at36s',
  partial_score_fico9: 'partial_score_fico9',
  partial_score_g103s: 'partial_score_g103s',
  partial_score_mt34s: 'partial_score_mt34s',
  partial_score_re20s: 'partial_score_re20s',
  partial_score_re34s: 'partial_score_re34s',
  partial_score_s004s: 'partial_score_s004s',
  partial_score_s114s: 'partial_score_s114s',
  partial_score_s204a: 'partial_score_s204a',
  partial_score_trv01: 'partial_score_trv01',
  partial_score_trv10: 'partial_score_trv10',
  partial_score_c_pf34: 'partial_score_c_pf34',
  partial_score_s_g018: 'partial_score_s_g018',
  partial_score_preloandti: 'partial_score_preloandti',
  adverse_action_code_1: 'adverse_action_code_1',
  adverse_action_description_1: 'adverse_action_description_1',
  adverse_action_code_2: 'adverse_action_code_2',
  adverse_action_description_2: 'adverse_action_description_2',
  adverse_action_code_3: 'adverse_action_code_3',
  adverse_action_description_3: 'adverse_action_description_3',
  adverse_action_code_4: 'adverse_action_code_4',
  adverse_action_description_4: 'adverse_action_description_4',
  adverse_action_code_5: 'adverse_action_code_5',
  adverse_action_description_5: 'adverse_action_description_5'
} as const

export type Second_look_crm_stagingScalarFieldEnum = (typeof Second_look_crm_stagingScalarFieldEnum)[keyof typeof Second_look_crm_stagingScalarFieldEnum]


export const Second_look_metricsScalarFieldEnum = {
  loan_number: 'loan_number',
  originator_number: 'originator_number',
  original_loan_amount: 'original_loan_amount',
  loan_term_in_months: 'loan_term_in_months',
  original_interest_rate: 'original_interest_rate',
  coupon: 'coupon',
  naco: 'naco',
  roa: 'roa',
  resiliency: 'resiliency',
  wal: 'wal',
  crm_score: 'crm_score',
  prepay_score: 'prepay_score',
  default_model: 'default_model',
  prepay_model: 'prepay_model',
  vintage_year_q: 'vintage_year_q',
  vintage_year_mo: 'vintage_year_mo',
  due_date: 'due_date',
  first_payment_date: 'first_payment_date',
  tier_definition_second_look: 'tier_definition_second_look',
  fico9: 'fico9',
  at104s: 'at104s',
  at01s: 'at01s',
  at02s: 'at02s',
  at20s: 'at20s',
  preloandti: 'preloandti',
  s207s: 's207s',
  g095s: 'g095s',
  s_at36: 's_at36',
  c_cxmd: 'c_cxmd',
  cv05: 'cv05',
  s114s: 's114s',
  income: 'income'
} as const

export type Second_look_metricsScalarFieldEnum = (typeof Second_look_metricsScalarFieldEnum)[keyof typeof Second_look_metricsScalarFieldEnum]


export const Second_look_offersScalarFieldEnum = {
  application_id: 'application_id',
  offer_id: 'offer_id',
  offer_amount: 'offer_amount',
  offer_term: 'offer_term',
  interest_rate: 'interest_rate',
  decision_status: 'decision_status',
  originator_number: 'originator_number',
  apr: 'apr',
  monthly_payment: 'monthly_payment',
  default_offer: 'default_offer',
  postloan_dti_individual: 'postloan_dti_individual',
  postloan_dti_individual_with_additional: 'postloan_dti_individual_with_additional',
  direct_pay_required: 'direct_pay_required',
  discounts: 'discounts',
  created_at: 'created_at',
  updated_at: 'updated_at',
  request_uuid: 'request_uuid',
  personalized_offer: 'personalized_offer'
} as const

export type Second_look_offersScalarFieldEnum = (typeof Second_look_offersScalarFieldEnum)[keyof typeof Second_look_offersScalarFieldEnum]


export const Second_look_offers_stagingScalarFieldEnum = {
  application_id: 'application_id',
  offer_id: 'offer_id',
  offer_amount: 'offer_amount',
  offer_term: 'offer_term',
  interest_rate: 'interest_rate',
  decision_status: 'decision_status',
  originator_number: 'originator_number',
  apr: 'apr',
  monthly_payment: 'monthly_payment',
  default_offer: 'default_offer',
  postloan_dti_individual: 'postloan_dti_individual',
  postloan_dti_individual_with_additional: 'postloan_dti_individual_with_additional',
  direct_pay_required: 'direct_pay_required',
  discounts: 'discounts',
  created_at: 'created_at',
  updated_at: 'updated_at',
  request_uuid: 'request_uuid',
  personalized_offer: 'personalized_offer'
} as const

export type Second_look_offers_stagingScalarFieldEnum = (typeof Second_look_offers_stagingScalarFieldEnum)[keyof typeof Second_look_offers_stagingScalarFieldEnum]


export const Settlement_statusScalarFieldEnum = {
  settlement_status_number: 'settlement_status_number',
  settlement_status_description: 'settlement_status_description',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Settlement_statusScalarFieldEnum = (typeof Settlement_statusScalarFieldEnum)[keyof typeof Settlement_statusScalarFieldEnum]


export const Simulation_byteaScalarFieldEnum = {
  sim_matrix: 'sim_matrix',
  created_at: 'created_at',
  updated_at: 'updated_at',
  originator_number: 'originator_number',
  loan_number: 'loan_number'
} as const

export type Simulation_byteaScalarFieldEnum = (typeof Simulation_byteaScalarFieldEnum)[keyof typeof Simulation_byteaScalarFieldEnum]


export const Tu_attributes_all_tradelinesScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  at01s: 'at01s',
  at02s: 'at02s',
  at03s: 'at03s',
  at06s: 'at06s',
  at09s: 'at09s',
  at12s: 'at12s',
  at20s: 'at20s',
  at21s: 'at21s',
  at24s: 'at24s',
  at25s: 'at25s',
  at27s: 'at27s',
  at28a: 'at28a',
  at28b: 'at28b',
  at29s: 'at29s',
  at30s: 'at30s',
  at31s: 'at31s',
  at32s: 'at32s',
  at33a: 'at33a',
  at33b: 'at33b',
  at34a: 'at34a',
  at34b: 'at34b',
  at35a: 'at35a',
  at35b: 'at35b',
  at36s: 'at36s',
  at57s: 'at57s',
  at101s: 'at101s',
  at101b: 'at101b',
  at103s: 'at103s',
  at104s: 'at104s',
  g001s: 'g001s',
  g001b: 'g001b',
  g001c: 'g001c',
  g002s: 'g002s',
  g002b: 'g002b',
  g003s: 'g003s',
  g003c: 'g003c',
  g020s: 'g020s',
  g041s: 'g041s',
  g041c: 'g041c',
  g042s: 'g042s',
  g043s: 'g043s',
  g043c: 'g043c',
  g051s: 'g051s',
  g057s: 'g057s',
  g058s: 'g058s',
  g059s: 'g059s',
  g061s: 'g061s',
  g063s: 'g063s',
  g064s: 'g064s',
  g066s: 'g066s',
  g068s: 'g068s',
  g069s: 'g069s',
  g071s: 'g071s',
  g199s: 'g199s',
  g200s: 'g200s',
  g201a: 'g201a',
  g201b: 'g201b',
  g202a: 'g202a',
  g202b: 'g202b',
  g205s: 'g205s',
  g206s: 'g206s',
  g207s: 'g207s',
  g208s: 'g208s',
  g216s: 'g216s',
  g217s: 'g217s',
  g218a: 'g218a',
  g218b: 'g218b',
  g219a: 'g219a',
  g219b: 'g219b',
  g220a: 'g220a',
  g220b: 'g220b',
  g221a: 'g221a',
  g221b: 'g221b',
  g222s: 'g222s',
  g223s: 'g223s',
  g224a: 'g224a',
  g224b: 'g224b',
  g224c: 'g224c',
  g225s: 'g225s',
  g226s: 'g226s',
  g227s: 'g227s',
  g228s: 'g228s',
  g230s: 'g230s',
  g235s: 'g235s',
  g250a: 'g250a',
  g250b: 'g250b',
  g250c: 'g250c',
  g251a: 'g251a',
  g251b: 'g251b',
  g251c: 'g251c',
  g302s: 'g302s',
  g303s: 'g303s',
  g304s: 'g304s',
  g305s: 'g305s',
  g310s: 'g310s',
  g311s: 'g311s',
  in01s: 'in01s',
  in02s: 'in02s',
  in03s: 'in03s',
  in06s: 'in06s',
  in09s: 'in09s',
  in12s: 'in12s',
  in20s: 'in20s',
  in21s: 'in21s',
  in24s: 'in24s',
  in25s: 'in25s',
  in27s: 'in27s',
  in28s: 'in28s',
  in29s: 'in29s',
  in30s: 'in30s',
  in31s: 'in31s',
  in32s: 'in32s',
  in33s: 'in33s',
  in34s: 'in34s',
  in35s: 'in35s',
  in36s: 'in36s',
  in57s: 'in57s',
  in101s: 'in101s',
  of01s: 'of01s',
  of02s: 'of02s',
  of03s: 'of03s',
  of06s: 'of06s',
  of09s: 'of09s',
  of12s: 'of12s',
  of20s: 'of20s',
  of21s: 'of21s',
  of24s: 'of24s',
  of25s: 'of25s',
  of27s: 'of27s',
  of28s: 'of28s',
  of29s: 'of29s',
  of30s: 'of30s',
  of31s: 'of31s',
  of32s: 'of32s',
  of33s: 'of33s',
  of34s: 'of34s',
  of35s: 'of35s',
  of36s: 'of36s',
  of57s: 'of57s',
  of101s: 'of101s',
  re01s: 're01s',
  re02s: 're02s',
  re03s: 're03s',
  re06s: 're06s',
  re09s: 're09s',
  re12s: 're12s',
  re20s: 're20s',
  re21s: 're21s',
  re24s: 're24s',
  re25s: 're25s',
  re27s: 're27s',
  re28s: 're28s',
  re29s: 're29s',
  re30s: 're30s',
  re31s: 're31s',
  re32s: 're32s',
  re33s: 're33s',
  re34s: 're34s',
  re35s: 're35s',
  re36s: 're36s',
  re57s: 're57s',
  re101s: 're101s',
  re102s: 're102s',
  s004s: 's004s',
  s043s: 's043s',
  s061s: 's061s',
  s062s: 's062s',
  atap01: 'atap01',
  hiap01: 'hiap01',
  inap01: 'inap01',
  reap01: 'reap01',
  at01a: 'at01a',
  balmag01: 'balmag01',
  balmag02: 'balmag02',
  inst_trd: 'inst_trd',
  nomt_trd: 'nomt_trd',
  paymnt01: 'paymnt01',
  paymnt02: 'paymnt02',
  paymnt03: 'paymnt03',
  paymnt04: 'paymnt04',
  paymnt05: 'paymnt05',
  paymnt06: 'paymnt06',
  paymnt07: 'paymnt07',
  paymnt08: 'paymnt08',
  paymnt10: 'paymnt10',
  paymnt11: 'paymnt11',
  rev_trd: 'rev_trd',
  trd: 'trd',
  trv01: 'trv01',
  trv03: 'trv03',
  trv04: 'trv04',
  trv05: 'trv05',
  trv06: 'trv06',
  trv07: 'trv07',
  trv08: 'trv08',
  trv09: 'trv09',
  trv10: 'trv10',
  trv11: 'trv11',
  trv12: 'trv12',
  trv13: 'trv13',
  trv14: 'trv14',
  cv10: 'cv10',
  cv11: 'cv11',
  cv12: 'cv12',
  cv13: 'cv13',
  cv17: 'cv17',
  cv18: 'cv18',
  cv19: 'cv19',
  cv20: 'cv20',
  cv21: 'cv21',
  cv25: 'cv25',
  cv26: 'cv26',
  cv29: 'cv29',
  cv30: 'cv30',
  s_at01: 's_at01',
  s_at03: 's_at03',
  s_at05: 's_at05',
  s_at06: 's_at06',
  s_at07: 's_at07',
  s_at08: 's_at08',
  s_at09: 's_at09',
  s_at10: 's_at10',
  s_at11: 's_at11',
  s_at12: 's_at12',
  s_at13: 's_at13',
  s_at14: 's_at14',
  s_at20: 's_at20',
  s_at21: 's_at21',
  s_at23: 's_at23',
  s_at24: 's_at24',
  s_at25: 's_at25',
  s_at26: 's_at26',
  s_at27: 's_at27',
  s_at28: 's_at28',
  s_at29: 's_at29',
  s_at33: 's_at33',
  s_at34: 's_at34',
  s_at35: 's_at35',
  s_at36: 's_at36',
  s_at99: 's_at99',
  s_re03: 's_re03',
  s_re10: 's_re10',
  s_re11: 's_re11',
  s_re12: 's_re12',
  s_re13: 's_re13',
  s_re14: 's_re14',
  s_re20: 's_re20',
  s_re28: 's_re28',
  s_re32: 's_re32',
  s_re33: 's_re33',
  s_re34: 's_re34',
  s_re35: 's_re35',
  s_in03: 's_in03',
  s_in05: 's_in05',
  s_in06: 's_in06',
  s_in07: 's_in07',
  s_in08: 's_in08',
  s_in09: 's_in09',
  s_in10: 's_in10',
  s_in11: 's_in11',
  s_in12: 's_in12',
  s_in13: 's_in13',
  s_in14: 's_in14',
  s_in21: 's_in21',
  s_in28: 's_in28',
  s_in33: 's_in33',
  s_in34: 's_in34',
  s_on01: 's_on01',
  s_on03: 's_on03',
  s_on20: 's_on20',
  s_on33: 's_on33',
  s_on34: 's_on34',
  s_g001: 's_g001',
  s_g002: 's_g002',
  s_g003: 's_g003',
  s_g004: 's_g004',
  s_g005: 's_g005',
  s_g006: 's_g006',
  s_g007: 's_g007',
  s_g008: 's_g008',
  s_g009: 's_g009',
  s_g016: 's_g016',
  s_g017: 's_g017',
  s_g018: 's_g018',
  s_g019: 's_g019',
  s_g020: 's_g020',
  s_g021: 's_g021',
  s_g022: 's_g022',
  s_g023: 's_g023',
  s_g024: 's_g024',
  s_g025: 's_g025',
  s_g026: 's_g026',
  s_g027: 's_g027',
  s_g028: 's_g028',
  s_g029: 's_g029',
  s_g030: 's_g030',
  s_g041: 's_g041',
  s_g042: 's_g042',
  s_g043: 's_g043',
  s_g044: 's_g044',
  s_g045: 's_g045',
  s_g046: 's_g046',
  s_g047: 's_g047',
  s_g048: 's_g048',
  s_g049: 's_g049',
  s_g050: 's_g050',
  s_g051: 's_g051',
  s_g057: 's_g057',
  s_g058: 's_g058',
  s_g059: 's_g059',
  s_g060: 's_g060',
  s_g061: 's_g061',
  s_g062: 's_g062',
  s_g063: 's_g063',
  s_g064: 's_g064',
  s_g065: 's_g065',
  s_g066: 's_g066',
  s_g067: 's_g067',
  s_g068: 's_g068',
  s_g069: 's_g069',
  s_g070: 's_g070',
  s_g071: 's_g071',
  s_g082: 's_g082',
  s_g083: 's_g083',
  s_g084: 's_g084',
  s_g085: 's_g085',
  s_g086: 's_g086',
  s_g087: 's_g087',
  s_g088: 's_g088',
  s_g089: 's_g089',
  s_g091: 's_g091',
  s_g093: 's_g093',
  s_g094: 's_g094',
  s_g095: 's_g095',
  s_s002: 's_s002',
  s_s004: 's_s004',
  s_s009: 's_s009',
  s_s010: 's_s010',
  s_s011: 's_s011',
  s_s012: 's_s012',
  s_s043: 's_s043',
  s_s046: 's_s046',
  s_s054: 's_s054',
  s_s055: 's_s055',
  s_s059: 's_s059',
  s_s060: 's_s060',
  s_s061: 's_s061',
  s_s062: 's_s062',
  s_s063: 's_s063',
  s_s079: 's_s079',
  s_s0y2: 's_s0y2',
  c_at01: 'c_at01',
  c_at03: 'c_at03',
  c_at07: 'c_at07',
  c_at09: 'c_at09',
  c_at20: 'c_at20',
  c_at21: 'c_at21',
  c_at28: 'c_at28',
  c_at29: 'c_at29',
  c_at33: 'c_at33',
  c_at34: 'c_at34',
  c_at35: 'c_at35',
  c_at36: 'c_at36',
  c_at99: 'c_at99',
  c_ct11: 'c_ct11',
  c_ct13: 'c_ct13',
  c_ct17: 'c_ct17',
  c_ct18: 'c_ct18',
  c_g001: 'c_g001',
  c_g002: 'c_g002',
  c_g003: 'c_g003',
  c_g004: 'c_g004',
  c_g006: 'c_g006',
  c_g007: 'c_g007',
  c_g008: 'c_g008',
  c_g009: 'c_g009',
  c_g016: 'c_g016',
  c_g017: 'c_g017',
  c_g018: 'c_g018',
  c_g020: 'c_g020',
  c_g021: 'c_g021',
  c_g022: 'c_g022',
  c_g023: 'c_g023',
  c_g025: 'c_g025',
  c_g026: 'c_g026',
  c_g027: 'c_g027',
  c_g028: 'c_g028',
  c_g030: 'c_g030',
  c_g041: 'c_g041',
  c_g042: 'c_g042',
  c_g043: 'c_g043',
  c_g044: 'c_g044',
  c_g051: 'c_g051',
  c_g057: 'c_g057',
  c_g058: 'c_g058',
  c_g059: 'c_g059',
  c_g061: 'c_g061',
  c_g062: 'c_g062',
  c_g063: 'c_g063',
  c_g064: 'c_g064',
  c_g066: 'c_g066',
  c_g067: 'c_g067',
  c_g068: 'c_g068',
  c_g069: 'c_g069',
  c_g071: 'c_g071',
  c_g082: 'c_g082',
  c_g083: 'c_g083',
  c_g084: 'c_g084',
  c_g085: 'c_g085',
  c_g086: 'c_g086',
  c_g091: 'c_g091',
  c_g103: 'c_g103',
  c_g104: 'c_g104',
  c_in01: 'c_in01',
  c_in02: 'c_in02',
  c_in07: 'c_in07',
  c_in09: 'c_in09',
  c_in20: 'c_in20',
  c_in21: 'c_in21',
  c_in28: 'c_in28',
  c_in29: 'c_in29',
  c_in33: 'c_in33',
  c_in34: 'c_in34',
  c_in35: 'c_in35',
  c_re01: 'c_re01',
  c_re02: 'c_re02',
  c_re03: 'c_re03',
  c_re07: 'c_re07',
  c_re09: 'c_re09',
  c_re20: 'c_re20',
  c_re21: 'c_re21',
  c_re28: 'c_re28',
  c_re29: 'c_re29',
  c_re32: 'c_re32',
  c_re33: 'c_re33',
  c_re34: 'c_re34',
  c_re35: 'c_re35',
  c_re36: 'c_re36',
  c_s011: 'c_s011',
  c_s012: 'c_s012',
  c_s043: 'c_s043',
  c_s046: 'c_s046',
  c_s061: 'c_s061',
  c_s062: 'c_s062',
  c_s063: 'c_s063',
  c_s065: 'c_s065',
  created_at: 'created_at',
  updated_at: 'updated_at',
  co01s: 'co01s',
  co02s: 'co02s',
  co03s: 'co03s',
  co04s: 'co04s',
  co05s: 'co05s',
  co06s: 'co06s',
  co07s: 'co07s',
  g100s: 'g100s',
  g209s: 'g209s',
  g210s: 'g210s',
  g211s: 'g211s',
  g212s: 'g212s',
  cv01: 'cv01',
  s_s066: 's_s066',
  c_chof: 'c_chof',
  c_ct19: 'c_ct19',
  second_look: 'second_look'
} as const

export type Tu_attributes_all_tradelinesScalarFieldEnum = (typeof Tu_attributes_all_tradelinesScalarFieldEnum)[keyof typeof Tu_attributes_all_tradelinesScalarFieldEnum]


export const Tu_attributes_all_tradelines_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  at01s: 'at01s',
  at02s: 'at02s',
  at03s: 'at03s',
  at06s: 'at06s',
  at09s: 'at09s',
  at12s: 'at12s',
  at20s: 'at20s',
  at21s: 'at21s',
  at24s: 'at24s',
  at25s: 'at25s',
  at27s: 'at27s',
  at28a: 'at28a',
  at28b: 'at28b',
  at29s: 'at29s',
  at30s: 'at30s',
  at31s: 'at31s',
  at32s: 'at32s',
  at33a: 'at33a',
  at33b: 'at33b',
  at34a: 'at34a',
  at34b: 'at34b',
  at35a: 'at35a',
  at35b: 'at35b',
  at36s: 'at36s',
  at57s: 'at57s',
  at101s: 'at101s',
  at101b: 'at101b',
  at103s: 'at103s',
  at104s: 'at104s',
  g001s: 'g001s',
  g001b: 'g001b',
  g001c: 'g001c',
  g002s: 'g002s',
  g002b: 'g002b',
  g003s: 'g003s',
  g003c: 'g003c',
  g020s: 'g020s',
  g041s: 'g041s',
  g041c: 'g041c',
  g042s: 'g042s',
  g043s: 'g043s',
  g043c: 'g043c',
  g051s: 'g051s',
  g057s: 'g057s',
  g058s: 'g058s',
  g059s: 'g059s',
  g061s: 'g061s',
  g063s: 'g063s',
  g064s: 'g064s',
  g066s: 'g066s',
  g068s: 'g068s',
  g069s: 'g069s',
  g071s: 'g071s',
  g199s: 'g199s',
  g200s: 'g200s',
  g201a: 'g201a',
  g201b: 'g201b',
  g202a: 'g202a',
  g202b: 'g202b',
  g205s: 'g205s',
  g206s: 'g206s',
  g207s: 'g207s',
  g208s: 'g208s',
  g216s: 'g216s',
  g217s: 'g217s',
  g218a: 'g218a',
  g218b: 'g218b',
  g219a: 'g219a',
  g219b: 'g219b',
  g220a: 'g220a',
  g220b: 'g220b',
  g221a: 'g221a',
  g221b: 'g221b',
  g222s: 'g222s',
  g223s: 'g223s',
  g224a: 'g224a',
  g224b: 'g224b',
  g224c: 'g224c',
  g225s: 'g225s',
  g226s: 'g226s',
  g227s: 'g227s',
  g228s: 'g228s',
  g230s: 'g230s',
  g235s: 'g235s',
  g250a: 'g250a',
  g250b: 'g250b',
  g250c: 'g250c',
  g251a: 'g251a',
  g251b: 'g251b',
  g251c: 'g251c',
  g302s: 'g302s',
  g303s: 'g303s',
  g304s: 'g304s',
  g305s: 'g305s',
  g310s: 'g310s',
  g311s: 'g311s',
  in01s: 'in01s',
  in02s: 'in02s',
  in03s: 'in03s',
  in06s: 'in06s',
  in09s: 'in09s',
  in12s: 'in12s',
  in20s: 'in20s',
  in21s: 'in21s',
  in24s: 'in24s',
  in25s: 'in25s',
  in27s: 'in27s',
  in28s: 'in28s',
  in29s: 'in29s',
  in30s: 'in30s',
  in31s: 'in31s',
  in32s: 'in32s',
  in33s: 'in33s',
  in34s: 'in34s',
  in35s: 'in35s',
  in36s: 'in36s',
  in57s: 'in57s',
  in101s: 'in101s',
  of01s: 'of01s',
  of02s: 'of02s',
  of03s: 'of03s',
  of06s: 'of06s',
  of09s: 'of09s',
  of12s: 'of12s',
  of20s: 'of20s',
  of21s: 'of21s',
  of24s: 'of24s',
  of25s: 'of25s',
  of27s: 'of27s',
  of28s: 'of28s',
  of29s: 'of29s',
  of30s: 'of30s',
  of31s: 'of31s',
  of32s: 'of32s',
  of33s: 'of33s',
  of34s: 'of34s',
  of35s: 'of35s',
  of36s: 'of36s',
  of57s: 'of57s',
  of101s: 'of101s',
  re01s: 're01s',
  re02s: 're02s',
  re03s: 're03s',
  re06s: 're06s',
  re09s: 're09s',
  re12s: 're12s',
  re20s: 're20s',
  re21s: 're21s',
  re24s: 're24s',
  re25s: 're25s',
  re27s: 're27s',
  re28s: 're28s',
  re29s: 're29s',
  re30s: 're30s',
  re31s: 're31s',
  re32s: 're32s',
  re33s: 're33s',
  re34s: 're34s',
  re35s: 're35s',
  re36s: 're36s',
  re57s: 're57s',
  re101s: 're101s',
  re102s: 're102s',
  s004s: 's004s',
  s043s: 's043s',
  s061s: 's061s',
  s062s: 's062s',
  atap01: 'atap01',
  hiap01: 'hiap01',
  inap01: 'inap01',
  reap01: 'reap01',
  at01a: 'at01a',
  balmag01: 'balmag01',
  balmag02: 'balmag02',
  inst_trd: 'inst_trd',
  nomt_trd: 'nomt_trd',
  paymnt01: 'paymnt01',
  paymnt02: 'paymnt02',
  paymnt03: 'paymnt03',
  paymnt04: 'paymnt04',
  paymnt05: 'paymnt05',
  paymnt06: 'paymnt06',
  paymnt07: 'paymnt07',
  paymnt08: 'paymnt08',
  paymnt10: 'paymnt10',
  paymnt11: 'paymnt11',
  rev_trd: 'rev_trd',
  trd: 'trd',
  trv01: 'trv01',
  trv03: 'trv03',
  trv04: 'trv04',
  trv05: 'trv05',
  trv06: 'trv06',
  trv07: 'trv07',
  trv08: 'trv08',
  trv09: 'trv09',
  trv10: 'trv10',
  trv11: 'trv11',
  trv12: 'trv12',
  trv13: 'trv13',
  trv14: 'trv14',
  cv10: 'cv10',
  cv11: 'cv11',
  cv12: 'cv12',
  cv13: 'cv13',
  cv17: 'cv17',
  cv18: 'cv18',
  cv19: 'cv19',
  cv20: 'cv20',
  cv21: 'cv21',
  cv25: 'cv25',
  cv26: 'cv26',
  cv29: 'cv29',
  cv30: 'cv30',
  s_at01: 's_at01',
  s_at03: 's_at03',
  s_at05: 's_at05',
  s_at06: 's_at06',
  s_at07: 's_at07',
  s_at08: 's_at08',
  s_at09: 's_at09',
  s_at10: 's_at10',
  s_at11: 's_at11',
  s_at12: 's_at12',
  s_at13: 's_at13',
  s_at14: 's_at14',
  s_at20: 's_at20',
  s_at21: 's_at21',
  s_at23: 's_at23',
  s_at24: 's_at24',
  s_at25: 's_at25',
  s_at26: 's_at26',
  s_at27: 's_at27',
  s_at28: 's_at28',
  s_at29: 's_at29',
  s_at33: 's_at33',
  s_at34: 's_at34',
  s_at35: 's_at35',
  s_at36: 's_at36',
  s_at99: 's_at99',
  s_re03: 's_re03',
  s_re10: 's_re10',
  s_re11: 's_re11',
  s_re12: 's_re12',
  s_re13: 's_re13',
  s_re14: 's_re14',
  s_re20: 's_re20',
  s_re28: 's_re28',
  s_re32: 's_re32',
  s_re33: 's_re33',
  s_re34: 's_re34',
  s_re35: 's_re35',
  s_in03: 's_in03',
  s_in05: 's_in05',
  s_in06: 's_in06',
  s_in07: 's_in07',
  s_in08: 's_in08',
  s_in09: 's_in09',
  s_in10: 's_in10',
  s_in11: 's_in11',
  s_in12: 's_in12',
  s_in13: 's_in13',
  s_in14: 's_in14',
  s_in21: 's_in21',
  s_in28: 's_in28',
  s_in33: 's_in33',
  s_in34: 's_in34',
  s_on01: 's_on01',
  s_on03: 's_on03',
  s_on20: 's_on20',
  s_on33: 's_on33',
  s_on34: 's_on34',
  s_g001: 's_g001',
  s_g002: 's_g002',
  s_g003: 's_g003',
  s_g004: 's_g004',
  s_g005: 's_g005',
  s_g006: 's_g006',
  s_g007: 's_g007',
  s_g008: 's_g008',
  s_g009: 's_g009',
  s_g016: 's_g016',
  s_g017: 's_g017',
  s_g018: 's_g018',
  s_g019: 's_g019',
  s_g020: 's_g020',
  s_g021: 's_g021',
  s_g022: 's_g022',
  s_g023: 's_g023',
  s_g024: 's_g024',
  s_g025: 's_g025',
  s_g026: 's_g026',
  s_g027: 's_g027',
  s_g028: 's_g028',
  s_g029: 's_g029',
  s_g030: 's_g030',
  s_g041: 's_g041',
  s_g042: 's_g042',
  s_g043: 's_g043',
  s_g044: 's_g044',
  s_g045: 's_g045',
  s_g046: 's_g046',
  s_g047: 's_g047',
  s_g048: 's_g048',
  s_g049: 's_g049',
  s_g050: 's_g050',
  s_g051: 's_g051',
  s_g057: 's_g057',
  s_g058: 's_g058',
  s_g059: 's_g059',
  s_g060: 's_g060',
  s_g061: 's_g061',
  s_g062: 's_g062',
  s_g063: 's_g063',
  s_g064: 's_g064',
  s_g065: 's_g065',
  s_g066: 's_g066',
  s_g067: 's_g067',
  s_g068: 's_g068',
  s_g069: 's_g069',
  s_g070: 's_g070',
  s_g071: 's_g071',
  s_g082: 's_g082',
  s_g083: 's_g083',
  s_g084: 's_g084',
  s_g085: 's_g085',
  s_g086: 's_g086',
  s_g087: 's_g087',
  s_g088: 's_g088',
  s_g089: 's_g089',
  s_g091: 's_g091',
  s_g093: 's_g093',
  s_g094: 's_g094',
  s_g095: 's_g095',
  s_s002: 's_s002',
  s_s004: 's_s004',
  s_s009: 's_s009',
  s_s010: 's_s010',
  s_s011: 's_s011',
  s_s012: 's_s012',
  s_s043: 's_s043',
  s_s046: 's_s046',
  s_s054: 's_s054',
  s_s055: 's_s055',
  s_s059: 's_s059',
  s_s060: 's_s060',
  s_s061: 's_s061',
  s_s062: 's_s062',
  s_s063: 's_s063',
  s_s079: 's_s079',
  s_s0y2: 's_s0y2',
  c_at01: 'c_at01',
  c_at03: 'c_at03',
  c_at07: 'c_at07',
  c_at09: 'c_at09',
  c_at20: 'c_at20',
  c_at21: 'c_at21',
  c_at28: 'c_at28',
  c_at29: 'c_at29',
  c_at33: 'c_at33',
  c_at34: 'c_at34',
  c_at35: 'c_at35',
  c_at36: 'c_at36',
  c_at99: 'c_at99',
  c_ct11: 'c_ct11',
  c_ct13: 'c_ct13',
  c_ct17: 'c_ct17',
  c_ct18: 'c_ct18',
  c_g001: 'c_g001',
  c_g002: 'c_g002',
  c_g003: 'c_g003',
  c_g004: 'c_g004',
  c_g006: 'c_g006',
  c_g007: 'c_g007',
  c_g008: 'c_g008',
  c_g009: 'c_g009',
  c_g016: 'c_g016',
  c_g017: 'c_g017',
  c_g018: 'c_g018',
  c_g020: 'c_g020',
  c_g021: 'c_g021',
  c_g022: 'c_g022',
  c_g023: 'c_g023',
  c_g025: 'c_g025',
  c_g026: 'c_g026',
  c_g027: 'c_g027',
  c_g028: 'c_g028',
  c_g030: 'c_g030',
  c_g041: 'c_g041',
  c_g042: 'c_g042',
  c_g043: 'c_g043',
  c_g044: 'c_g044',
  c_g051: 'c_g051',
  c_g057: 'c_g057',
  c_g058: 'c_g058',
  c_g059: 'c_g059',
  c_g061: 'c_g061',
  c_g062: 'c_g062',
  c_g063: 'c_g063',
  c_g064: 'c_g064',
  c_g066: 'c_g066',
  c_g067: 'c_g067',
  c_g068: 'c_g068',
  c_g069: 'c_g069',
  c_g071: 'c_g071',
  c_g082: 'c_g082',
  c_g083: 'c_g083',
  c_g084: 'c_g084',
  c_g085: 'c_g085',
  c_g086: 'c_g086',
  c_g091: 'c_g091',
  c_g103: 'c_g103',
  c_g104: 'c_g104',
  c_in01: 'c_in01',
  c_in02: 'c_in02',
  c_in07: 'c_in07',
  c_in09: 'c_in09',
  c_in20: 'c_in20',
  c_in21: 'c_in21',
  c_in28: 'c_in28',
  c_in29: 'c_in29',
  c_in33: 'c_in33',
  c_in34: 'c_in34',
  c_in35: 'c_in35',
  c_re01: 'c_re01',
  c_re02: 'c_re02',
  c_re03: 'c_re03',
  c_re07: 'c_re07',
  c_re09: 'c_re09',
  c_re20: 'c_re20',
  c_re21: 'c_re21',
  c_re28: 'c_re28',
  c_re29: 'c_re29',
  c_re32: 'c_re32',
  c_re33: 'c_re33',
  c_re34: 'c_re34',
  c_re35: 'c_re35',
  c_re36: 'c_re36',
  c_s011: 'c_s011',
  c_s012: 'c_s012',
  c_s043: 'c_s043',
  c_s046: 'c_s046',
  c_s061: 'c_s061',
  c_s062: 'c_s062',
  c_s063: 'c_s063',
  c_s065: 'c_s065',
  created_at: 'created_at',
  updated_at: 'updated_at',
  co01s: 'co01s',
  co02s: 'co02s',
  co03s: 'co03s',
  co04s: 'co04s',
  co05s: 'co05s',
  co06s: 'co06s',
  co07s: 'co07s',
  g100s: 'g100s',
  g209s: 'g209s',
  g210s: 'g210s',
  g211s: 'g211s',
  g212s: 'g212s',
  cv01: 'cv01',
  s_s066: 's_s066',
  c_chof: 'c_chof',
  c_ct19: 'c_ct19',
  second_look: 'second_look'
} as const

export type Tu_attributes_all_tradelines_stagingScalarFieldEnum = (typeof Tu_attributes_all_tradelines_stagingScalarFieldEnum)[keyof typeof Tu_attributes_all_tradelines_stagingScalarFieldEnum]


export const Tu_attributes_non_revolvingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  st01s: 'st01s',
  st02s: 'st02s',
  st03s: 'st03s',
  st05s: 'st05s',
  st06s: 'st06s',
  st09s: 'st09s',
  st12s: 'st12s',
  st20s: 'st20s',
  st21s: 'st21s',
  st24s: 'st24s',
  st25s: 'st25s',
  st27s: 'st27s',
  st28s: 'st28s',
  st29s: 'st29s',
  st30s: 'st30s',
  st31s: 'st31s',
  st32s: 'st32s',
  st33s: 'st33s',
  st34s: 'st34s',
  st35s: 'st35s',
  st36s: 'st36s',
  st45s: 'st45s',
  st50s: 'st50s',
  st57s: 'st57s',
  st60s: 'st60s',
  st99s: 'st99s',
  st101s: 'st101s',
  st102s: 'st102s',
  st103s: 'st103s',
  g002c: 'g002c',
  g042c: 'g042c',
  g308s: 'g308s',
  g309s: 'g309s',
  g312s: 'g312s',
  g313s: 'g313s',
  g314s: 'g314s',
  g315s: 'g315s',
  hi01s: 'hi01s',
  hi02s: 'hi02s',
  hi03s: 'hi03s',
  hi06s: 'hi06s',
  hi09s: 'hi09s',
  hi12s: 'hi12s',
  hi20s: 'hi20s',
  hi21s: 'hi21s',
  hi24s: 'hi24s',
  hi25s: 'hi25s',
  hi27s: 'hi27s',
  hi28s: 'hi28s',
  hi29s: 'hi29s',
  hi30s: 'hi30s',
  hi31s: 'hi31s',
  hi32s: 'hi32s',
  hi33s: 'hi33s',
  hi34s: 'hi34s',
  hi35s: 'hi35s',
  hi36s: 'hi36s',
  hi57s: 'hi57s',
  hi101s: 'hi101s',
  hr01s: 'hr01s',
  hr02s: 'hr02s',
  hr03s: 'hr03s',
  hr06s: 'hr06s',
  hr09s: 'hr09s',
  hr12s: 'hr12s',
  hr20s: 'hr20s',
  hr21s: 'hr21s',
  hr24s: 'hr24s',
  hr25s: 'hr25s',
  hr27s: 'hr27s',
  hr28s: 'hr28s',
  hr29s: 'hr29s',
  hr30s: 'hr30s',
  hr31s: 'hr31s',
  hr32s: 'hr32s',
  hr33s: 'hr33s',
  hr34s: 'hr34s',
  hr35s: 'hr35s',
  hr36s: 'hr36s',
  hr57s: 'hr57s',
  hr101s: 'hr101s',
  lm01s: 'lm01s',
  lm02s: 'lm02s',
  lm03s: 'lm03s',
  lm04s: 'lm04s',
  lm05s: 'lm05s',
  lm06s: 'lm06s',
  lm07s: 'lm07s',
  lm08s: 'lm08s',
  lm09s: 'lm09s',
  lm10s: 'lm10s',
  lm11s: 'lm11s',
  lm12s: 'lm12s',
  lm13s: 'lm13s',
  lm14s: 'lm14s',
  lm15s: 'lm15s',
  lm16s: 'lm16s',
  lm17s: 'lm17s',
  lm18s: 'lm18s',
  lm19s: 'lm19s',
  lm20s: 'lm20s',
  lm21s: 'lm21s',
  lm22s: 'lm22s',
  lm23s: 'lm23s',
  lm24s: 'lm24s',
  lm25s: 'lm25s',
  lm26s: 'lm26s',
  lm27s: 'lm27s',
  lm28s: 'lm28s',
  lm29s: 'lm29s',
  lm30s: 'lm30s',
  lm31s: 'lm31s',
  lm32s: 'lm32s',
  lm33s: 'lm33s',
  lm34s: 'lm34s',
  lm35s: 'lm35s',
  lm36s: 'lm36s',
  lm37s: 'lm37s',
  lm38s: 'lm38s',
  lm39s: 'lm39s',
  mt01s: 'mt01s',
  mt02s: 'mt02s',
  mt03s: 'mt03s',
  mt06s: 'mt06s',
  mt09s: 'mt09s',
  mt12s: 'mt12s',
  mt20s: 'mt20s',
  mt21s: 'mt21s',
  mt24s: 'mt24s',
  mt25s: 'mt25s',
  mt27s: 'mt27s',
  mt28s: 'mt28s',
  mt29s: 'mt29s',
  mt30s: 'mt30s',
  mt31s: 'mt31s',
  mt32s: 'mt32s',
  mt33s: 'mt33s',
  mt34s: 'mt34s',
  mt34b: 'mt34b',
  mt34c: 'mt34c',
  mt35s: 'mt35s',
  mt36s: 'mt36s',
  mt47s: 'mt47s',
  mt57s: 'mt57s',
  mt101s: 'mt101s',
  hrap01: 'hrap01',
  mtap01: 'mtap01',
  trv23: 'trv23',
  cv02: 'cv02',
  cv06: 'cv06',
  cv07: 'cv07',
  cv08: 'cv08',
  cv09: 'cv09',
  s_mt01: 's_mt01',
  s_mt02: 's_mt02',
  s_mt03: 's_mt03',
  s_mt04: 's_mt04',
  s_mt20: 's_mt20',
  s_mt21: 's_mt21',
  s_mt22: 's_mt22',
  s_mt28: 's_mt28',
  s_mt29: 's_mt29',
  s_mt32: 's_mt32',
  s_mt33: 's_mt33',
  s_mt34: 's_mt34',
  s_mt35: 's_mt35',
  s_mt36: 's_mt36',
  s_mt41: 's_mt41',
  s_mt42: 's_mt42',
  s_mt43: 's_mt43',
  s_mt44: 's_mt44',
  s_mt45: 's_mt45',
  s_mt46: 's_mt46',
  s_mt47: 's_mt47',
  s_mt48: 's_mt48',
  s_mt49: 's_mt49',
  s_mt50: 's_mt50',
  s_mt51: 's_mt51',
  s_mt52: 's_mt52',
  s_mt53: 's_mt53',
  s_mt54: 's_mt54',
  s_mt55: 's_mt55',
  s_mt56: 's_mt56',
  s_mt57: 's_mt57',
  c_mt01: 'c_mt01',
  c_mt02: 'c_mt02',
  c_mt03: 'c_mt03',
  c_mt07: 'c_mt07',
  c_mt09: 'c_mt09',
  c_mt20: 'c_mt20',
  c_mt21: 'c_mt21',
  c_mt28: 'c_mt28',
  c_mt29: 'c_mt29',
  c_mt32: 'c_mt32',
  c_mt33: 'c_mt33',
  c_mt34: 'c_mt34',
  c_mt35: 'c_mt35',
  c_mt36: 'c_mt36',
  bi01s: 'bi01s',
  bi02s: 'bi02s',
  bi03s: 'bi03s',
  bi06s: 'bi06s',
  bi09s: 'bi09s',
  bi12s: 'bi12s',
  bi20s: 'bi20s',
  bi21s: 'bi21s',
  bi24s: 'bi24s',
  bi25s: 'bi25s',
  bi27s: 'bi27s',
  bi29s: 'bi29s',
  bi32s: 'bi32s',
  bi33s: 'bi33s',
  bi34s: 'bi34s',
  bi35s: 'bi35s',
  bi36s: 'bi36s',
  bi57s: 'bi57s',
  bi101s: 'bi101s',
  fi01s: 'fi01s',
  fi02s: 'fi02s',
  fi03s: 'fi03s',
  fi06s: 'fi06s',
  fi09s: 'fi09s',
  fi12s: 'fi12s',
  fi20s: 'fi20s',
  fi21s: 'fi21s',
  fi24s: 'fi24s',
  fi25s: 'fi25s',
  fi27s: 'fi27s',
  fi28s: 'fi28s',
  fi29s: 'fi29s',
  fi30s: 'fi30s',
  fi31s: 'fi31s',
  fi32s: 'fi32s',
  fi33s: 'fi33s',
  fi34s: 'fi34s',
  fi35s: 'fi35s',
  fi36s: 'fi36s',
  fi57s: 'fi57s',
  fi101s: 'fi101s',
  s_fi01: 's_fi01',
  s_fi03: 's_fi03',
  s_fi05: 's_fi05',
  s_fi06: 's_fi06',
  s_fi07: 's_fi07',
  s_fi08: 's_fi08',
  s_fi09: 's_fi09',
  s_pf02: 's_pf02',
  s_pf03: 's_pf03',
  s_pf05: 's_pf05',
  s_pf06: 's_pf06',
  s_pf07: 's_pf07',
  s_pf08: 's_pf08',
  s_pf09: 's_pf09',
  s_pf33: 's_pf33',
  s_pf34: 's_pf34',
  s_of01: 's_of01',
  s_of03: 's_of03',
  s_of20: 's_of20',
  s_of28: 's_of28',
  s_of29: 's_of29',
  s_of33: 's_of33',
  s_of36: 's_of36',
  s_s008: 's_s008',
  s_s014: 's_s014',
  s_s018: 's_s018',
  s_s019: 's_s019',
  s_s027: 's_s027',
  s_s078: 's_s078',
  c_fi01: 'c_fi01',
  c_fi03: 'c_fi03',
  c_fi07: 'c_fi07',
  c_fi09: 'c_fi09',
  c_fi32: 'c_fi32',
  c_pf01: 'c_pf01',
  c_pf02: 'c_pf02',
  c_pf03: 'c_pf03',
  c_pf07: 'c_pf07',
  c_pf09: 'c_pf09',
  c_pf20: 'c_pf20',
  c_pf21: 'c_pf21',
  c_pf28: 'c_pf28',
  c_pf29: 'c_pf29',
  c_pf32: 'c_pf32',
  c_pf33: 'c_pf33',
  c_pf34: 'c_pf34',
  c_pf35: 'c_pf35',
  c_pf36: 'c_pf36',
  au01s: 'au01s',
  au02s: 'au02s',
  au03s: 'au03s',
  au06s: 'au06s',
  au09s: 'au09s',
  au12s: 'au12s',
  au20s: 'au20s',
  au21s: 'au21s',
  au24s: 'au24s',
  au25s: 'au25s',
  au27s: 'au27s',
  au28s: 'au28s',
  au29s: 'au29s',
  au30s: 'au30s',
  au31s: 'au31s',
  au32s: 'au32s',
  au33s: 'au33s',
  au34s: 'au34s',
  au35s: 'au35s',
  au36s: 'au36s',
  au51a: 'au51a',
  au57s: 'au57s',
  au101s: 'au101s',
  g306s: 'g306s',
  g307s: 'g307s',
  rp01s: 'rp01s',
  rp02s: 'rp02s',
  rp03s: 'rp03s',
  rp04s: 'rp04s',
  rp05s: 'rp05s',
  rp06s: 'rp06s',
  rp07s: 'rp07s',
  rp08s: 'rp08s',
  cv03: 'cv03',
  fc01s: 'fc01s',
  fc02s: 'fc02s',
  fc03s: 'fc03s',
  fc04s: 'fc04s',
  fc05s: 'fc05s',
  fc06s: 'fc06s',
  fc07s: 'fc07s',
  g041c: 'g041c',
  g043c: 'g043c',
  bi28s: 'bi28s',
  bi30s: 'bi30s',
  bi31s: 'bi31s',
  s_bi01: 's_bi01',
  s_bi03: 's_bi03',
  s_bi05: 's_bi05',
  s_bi06: 's_bi06',
  s_bi07: 's_bi07',
  s_bi08: 's_bi08',
  s_bi09: 's_bi09',
  s_bi20: 's_bi20',
  s_bi28: 's_bi28',
  c_bi01: 'c_bi01',
  c_bi03: 'c_bi03',
  c_bi07: 'c_bi07',
  c_bi09: 'c_bi09',
  c_bi20: 'c_bi20',
  second_look: 'second_look'
} as const

export type Tu_attributes_non_revolvingScalarFieldEnum = (typeof Tu_attributes_non_revolvingScalarFieldEnum)[keyof typeof Tu_attributes_non_revolvingScalarFieldEnum]


export const Tu_attributes_non_revolving_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  st01s: 'st01s',
  st02s: 'st02s',
  st03s: 'st03s',
  st05s: 'st05s',
  st06s: 'st06s',
  st09s: 'st09s',
  st12s: 'st12s',
  st20s: 'st20s',
  st21s: 'st21s',
  st24s: 'st24s',
  st25s: 'st25s',
  st27s: 'st27s',
  st28s: 'st28s',
  st29s: 'st29s',
  st30s: 'st30s',
  st31s: 'st31s',
  st32s: 'st32s',
  st33s: 'st33s',
  st34s: 'st34s',
  st35s: 'st35s',
  st36s: 'st36s',
  st45s: 'st45s',
  st50s: 'st50s',
  st57s: 'st57s',
  st60s: 'st60s',
  st99s: 'st99s',
  st101s: 'st101s',
  st102s: 'st102s',
  st103s: 'st103s',
  g002c: 'g002c',
  g042c: 'g042c',
  g308s: 'g308s',
  g309s: 'g309s',
  g312s: 'g312s',
  g313s: 'g313s',
  g314s: 'g314s',
  g315s: 'g315s',
  hi01s: 'hi01s',
  hi02s: 'hi02s',
  hi03s: 'hi03s',
  hi06s: 'hi06s',
  hi09s: 'hi09s',
  hi12s: 'hi12s',
  hi20s: 'hi20s',
  hi21s: 'hi21s',
  hi24s: 'hi24s',
  hi25s: 'hi25s',
  hi27s: 'hi27s',
  hi28s: 'hi28s',
  hi29s: 'hi29s',
  hi30s: 'hi30s',
  hi31s: 'hi31s',
  hi32s: 'hi32s',
  hi33s: 'hi33s',
  hi34s: 'hi34s',
  hi35s: 'hi35s',
  hi36s: 'hi36s',
  hi57s: 'hi57s',
  hi101s: 'hi101s',
  hr01s: 'hr01s',
  hr02s: 'hr02s',
  hr03s: 'hr03s',
  hr06s: 'hr06s',
  hr09s: 'hr09s',
  hr12s: 'hr12s',
  hr20s: 'hr20s',
  hr21s: 'hr21s',
  hr24s: 'hr24s',
  hr25s: 'hr25s',
  hr27s: 'hr27s',
  hr28s: 'hr28s',
  hr29s: 'hr29s',
  hr30s: 'hr30s',
  hr31s: 'hr31s',
  hr32s: 'hr32s',
  hr33s: 'hr33s',
  hr34s: 'hr34s',
  hr35s: 'hr35s',
  hr36s: 'hr36s',
  hr57s: 'hr57s',
  hr101s: 'hr101s',
  lm01s: 'lm01s',
  lm02s: 'lm02s',
  lm03s: 'lm03s',
  lm04s: 'lm04s',
  lm05s: 'lm05s',
  lm06s: 'lm06s',
  lm07s: 'lm07s',
  lm08s: 'lm08s',
  lm09s: 'lm09s',
  lm10s: 'lm10s',
  lm11s: 'lm11s',
  lm12s: 'lm12s',
  lm13s: 'lm13s',
  lm14s: 'lm14s',
  lm15s: 'lm15s',
  lm16s: 'lm16s',
  lm17s: 'lm17s',
  lm18s: 'lm18s',
  lm19s: 'lm19s',
  lm20s: 'lm20s',
  lm21s: 'lm21s',
  lm22s: 'lm22s',
  lm23s: 'lm23s',
  lm24s: 'lm24s',
  lm25s: 'lm25s',
  lm26s: 'lm26s',
  lm27s: 'lm27s',
  lm28s: 'lm28s',
  lm29s: 'lm29s',
  lm30s: 'lm30s',
  lm31s: 'lm31s',
  lm32s: 'lm32s',
  lm33s: 'lm33s',
  lm34s: 'lm34s',
  lm35s: 'lm35s',
  lm36s: 'lm36s',
  lm37s: 'lm37s',
  lm38s: 'lm38s',
  lm39s: 'lm39s',
  mt01s: 'mt01s',
  mt02s: 'mt02s',
  mt03s: 'mt03s',
  mt06s: 'mt06s',
  mt09s: 'mt09s',
  mt12s: 'mt12s',
  mt20s: 'mt20s',
  mt21s: 'mt21s',
  mt24s: 'mt24s',
  mt25s: 'mt25s',
  mt27s: 'mt27s',
  mt28s: 'mt28s',
  mt29s: 'mt29s',
  mt30s: 'mt30s',
  mt31s: 'mt31s',
  mt32s: 'mt32s',
  mt33s: 'mt33s',
  mt34s: 'mt34s',
  mt34b: 'mt34b',
  mt34c: 'mt34c',
  mt35s: 'mt35s',
  mt36s: 'mt36s',
  mt47s: 'mt47s',
  mt57s: 'mt57s',
  mt101s: 'mt101s',
  hrap01: 'hrap01',
  mtap01: 'mtap01',
  trv23: 'trv23',
  cv02: 'cv02',
  cv06: 'cv06',
  cv07: 'cv07',
  cv08: 'cv08',
  cv09: 'cv09',
  s_mt01: 's_mt01',
  s_mt02: 's_mt02',
  s_mt03: 's_mt03',
  s_mt04: 's_mt04',
  s_mt20: 's_mt20',
  s_mt21: 's_mt21',
  s_mt22: 's_mt22',
  s_mt28: 's_mt28',
  s_mt29: 's_mt29',
  s_mt32: 's_mt32',
  s_mt33: 's_mt33',
  s_mt34: 's_mt34',
  s_mt35: 's_mt35',
  s_mt36: 's_mt36',
  s_mt41: 's_mt41',
  s_mt42: 's_mt42',
  s_mt43: 's_mt43',
  s_mt44: 's_mt44',
  s_mt45: 's_mt45',
  s_mt46: 's_mt46',
  s_mt47: 's_mt47',
  s_mt48: 's_mt48',
  s_mt49: 's_mt49',
  s_mt50: 's_mt50',
  s_mt51: 's_mt51',
  s_mt52: 's_mt52',
  s_mt53: 's_mt53',
  s_mt54: 's_mt54',
  s_mt55: 's_mt55',
  s_mt56: 's_mt56',
  s_mt57: 's_mt57',
  c_mt01: 'c_mt01',
  c_mt02: 'c_mt02',
  c_mt03: 'c_mt03',
  c_mt07: 'c_mt07',
  c_mt09: 'c_mt09',
  c_mt20: 'c_mt20',
  c_mt21: 'c_mt21',
  c_mt28: 'c_mt28',
  c_mt29: 'c_mt29',
  c_mt32: 'c_mt32',
  c_mt33: 'c_mt33',
  c_mt34: 'c_mt34',
  c_mt35: 'c_mt35',
  c_mt36: 'c_mt36',
  bi01s: 'bi01s',
  bi02s: 'bi02s',
  bi03s: 'bi03s',
  bi06s: 'bi06s',
  bi09s: 'bi09s',
  bi12s: 'bi12s',
  bi20s: 'bi20s',
  bi21s: 'bi21s',
  bi24s: 'bi24s',
  bi25s: 'bi25s',
  bi27s: 'bi27s',
  bi29s: 'bi29s',
  bi32s: 'bi32s',
  bi33s: 'bi33s',
  bi34s: 'bi34s',
  bi35s: 'bi35s',
  bi36s: 'bi36s',
  bi57s: 'bi57s',
  bi101s: 'bi101s',
  fi01s: 'fi01s',
  fi02s: 'fi02s',
  fi03s: 'fi03s',
  fi06s: 'fi06s',
  fi09s: 'fi09s',
  fi12s: 'fi12s',
  fi20s: 'fi20s',
  fi21s: 'fi21s',
  fi24s: 'fi24s',
  fi25s: 'fi25s',
  fi27s: 'fi27s',
  fi28s: 'fi28s',
  fi29s: 'fi29s',
  fi30s: 'fi30s',
  fi31s: 'fi31s',
  fi32s: 'fi32s',
  fi33s: 'fi33s',
  fi34s: 'fi34s',
  fi35s: 'fi35s',
  fi36s: 'fi36s',
  fi57s: 'fi57s',
  fi101s: 'fi101s',
  s_fi01: 's_fi01',
  s_fi03: 's_fi03',
  s_fi05: 's_fi05',
  s_fi06: 's_fi06',
  s_fi07: 's_fi07',
  s_fi08: 's_fi08',
  s_fi09: 's_fi09',
  s_pf02: 's_pf02',
  s_pf03: 's_pf03',
  s_pf05: 's_pf05',
  s_pf06: 's_pf06',
  s_pf07: 's_pf07',
  s_pf08: 's_pf08',
  s_pf09: 's_pf09',
  s_pf33: 's_pf33',
  s_pf34: 's_pf34',
  s_of01: 's_of01',
  s_of03: 's_of03',
  s_of20: 's_of20',
  s_of28: 's_of28',
  s_of29: 's_of29',
  s_of33: 's_of33',
  s_of36: 's_of36',
  s_s008: 's_s008',
  s_s014: 's_s014',
  s_s018: 's_s018',
  s_s019: 's_s019',
  s_s027: 's_s027',
  s_s078: 's_s078',
  c_fi01: 'c_fi01',
  c_fi03: 'c_fi03',
  c_fi07: 'c_fi07',
  c_fi09: 'c_fi09',
  c_fi32: 'c_fi32',
  c_pf01: 'c_pf01',
  c_pf02: 'c_pf02',
  c_pf03: 'c_pf03',
  c_pf07: 'c_pf07',
  c_pf09: 'c_pf09',
  c_pf20: 'c_pf20',
  c_pf21: 'c_pf21',
  c_pf28: 'c_pf28',
  c_pf29: 'c_pf29',
  c_pf32: 'c_pf32',
  c_pf33: 'c_pf33',
  c_pf34: 'c_pf34',
  c_pf35: 'c_pf35',
  c_pf36: 'c_pf36',
  au01s: 'au01s',
  au02s: 'au02s',
  au03s: 'au03s',
  au06s: 'au06s',
  au09s: 'au09s',
  au12s: 'au12s',
  au20s: 'au20s',
  au21s: 'au21s',
  au24s: 'au24s',
  au25s: 'au25s',
  au27s: 'au27s',
  au28s: 'au28s',
  au29s: 'au29s',
  au30s: 'au30s',
  au31s: 'au31s',
  au32s: 'au32s',
  au33s: 'au33s',
  au34s: 'au34s',
  au35s: 'au35s',
  au36s: 'au36s',
  au51a: 'au51a',
  au57s: 'au57s',
  au101s: 'au101s',
  g306s: 'g306s',
  g307s: 'g307s',
  rp01s: 'rp01s',
  rp02s: 'rp02s',
  rp03s: 'rp03s',
  rp04s: 'rp04s',
  rp05s: 'rp05s',
  rp06s: 'rp06s',
  rp07s: 'rp07s',
  rp08s: 'rp08s',
  cv03: 'cv03',
  fc01s: 'fc01s',
  fc02s: 'fc02s',
  fc03s: 'fc03s',
  fc04s: 'fc04s',
  fc05s: 'fc05s',
  fc06s: 'fc06s',
  fc07s: 'fc07s',
  g041c: 'g041c',
  g043c: 'g043c',
  bi28s: 'bi28s',
  bi30s: 'bi30s',
  bi31s: 'bi31s',
  s_bi01: 's_bi01',
  s_bi03: 's_bi03',
  s_bi05: 's_bi05',
  s_bi06: 's_bi06',
  s_bi07: 's_bi07',
  s_bi08: 's_bi08',
  s_bi09: 's_bi09',
  s_bi20: 's_bi20',
  s_bi28: 's_bi28',
  c_bi01: 'c_bi01',
  c_bi03: 'c_bi03',
  c_bi07: 'c_bi07',
  c_bi09: 'c_bi09',
  c_bi20: 'c_bi20',
  second_look: 'second_look'
} as const

export type Tu_attributes_non_revolving_stagingScalarFieldEnum = (typeof Tu_attributes_non_revolving_stagingScalarFieldEnum)[keyof typeof Tu_attributes_non_revolving_stagingScalarFieldEnum]


export const Tu_attributes_non_standardScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  agg101: 'agg101',
  agg102: 'agg102',
  agg103: 'agg103',
  agg104: 'agg104',
  agg105: 'agg105',
  agg106: 'agg106',
  agg107: 'agg107',
  agg108: 'agg108',
  agg109: 'agg109',
  agg110: 'agg110',
  agg111: 'agg111',
  agg112: 'agg112',
  agg113: 'agg113',
  agg114: 'agg114',
  agg115: 'agg115',
  agg116: 'agg116',
  agg117: 'agg117',
  agg118: 'agg118',
  agg119: 'agg119',
  agg120: 'agg120',
  agg121: 'agg121',
  agg122: 'agg122',
  agg123: 'agg123',
  agg124: 'agg124',
  agg201: 'agg201',
  agg202: 'agg202',
  agg203: 'agg203',
  agg204: 'agg204',
  agg205: 'agg205',
  agg206: 'agg206',
  agg207: 'agg207',
  agg208: 'agg208',
  agg209: 'agg209',
  agg210: 'agg210',
  agg211: 'agg211',
  agg212: 'agg212',
  agg213: 'agg213',
  agg214: 'agg214',
  agg215: 'agg215',
  agg216: 'agg216',
  agg217: 'agg217',
  agg218: 'agg218',
  agg219: 'agg219',
  agg220: 'agg220',
  agg221: 'agg221',
  agg222: 'agg222',
  agg223: 'agg223',
  agg224: 'agg224',
  agg301: 'agg301',
  agg302: 'agg302',
  agg303: 'agg303',
  agg304: 'agg304',
  agg305: 'agg305',
  agg306: 'agg306',
  agg307: 'agg307',
  agg308: 'agg308',
  agg309: 'agg309',
  agg310: 'agg310',
  agg311: 'agg311',
  agg312: 'agg312',
  agg313: 'agg313',
  agg314: 'agg314',
  agg315: 'agg315',
  agg316: 'agg316',
  agg317: 'agg317',
  agg318: 'agg318',
  agg319: 'agg319',
  agg320: 'agg320',
  agg321: 'agg321',
  agg322: 'agg322',
  agg323: 'agg323',
  agg324: 'agg324',
  agg401: 'agg401',
  agg402: 'agg402',
  agg403: 'agg403',
  agg404: 'agg404',
  agg405: 'agg405',
  agg406: 'agg406',
  agg407: 'agg407',
  agg408: 'agg408',
  agg409: 'agg409',
  agg410: 'agg410',
  agg411: 'agg411',
  agg412: 'agg412',
  agg413: 'agg413',
  agg414: 'agg414',
  agg415: 'agg415',
  agg416: 'agg416',
  agg417: 'agg417',
  agg418: 'agg418',
  agg419: 'agg419',
  agg420: 'agg420',
  agg421: 'agg421',
  agg422: 'agg422',
  agg423: 'agg423',
  agg424: 'agg424',
  agg501: 'agg501',
  agg502: 'agg502',
  agg503: 'agg503',
  agg504: 'agg504',
  agg505: 'agg505',
  agg506: 'agg506',
  agg507: 'agg507',
  agg508: 'agg508',
  agg509: 'agg509',
  agg510: 'agg510',
  agg511: 'agg511',
  agg512: 'agg512',
  agg513: 'agg513',
  agg514: 'agg514',
  agg515: 'agg515',
  agg516: 'agg516',
  agg517: 'agg517',
  agg518: 'agg518',
  agg519: 'agg519',
  agg520: 'agg520',
  agg521: 'agg521',
  agg522: 'agg522',
  agg523: 'agg523',
  agg524: 'agg524',
  agg601: 'agg601',
  agg602: 'agg602',
  agg603: 'agg603',
  agg604: 'agg604',
  agg605: 'agg605',
  agg606: 'agg606',
  agg607: 'agg607',
  agg608: 'agg608',
  agg609: 'agg609',
  agg610: 'agg610',
  agg611: 'agg611',
  agg612: 'agg612',
  agg613: 'agg613',
  agg614: 'agg614',
  agg615: 'agg615',
  agg616: 'agg616',
  agg617: 'agg617',
  agg618: 'agg618',
  agg619: 'agg619',
  agg620: 'agg620',
  agg621: 'agg621',
  agg622: 'agg622',
  agg623: 'agg623',
  agg624: 'agg624',
  agg701: 'agg701',
  agg702: 'agg702',
  agg703: 'agg703',
  agg704: 'agg704',
  agg705: 'agg705',
  agg706: 'agg706',
  agg707: 'agg707',
  agg708: 'agg708',
  agg709: 'agg709',
  agg710: 'agg710',
  agg711: 'agg711',
  agg712: 'agg712',
  agg713: 'agg713',
  agg714: 'agg714',
  agg715: 'agg715',
  agg716: 'agg716',
  agg717: 'agg717',
  agg718: 'agg718',
  agg719: 'agg719',
  agg720: 'agg720',
  agg721: 'agg721',
  agg722: 'agg722',
  agg723: 'agg723',
  agg724: 'agg724',
  agg801: 'agg801',
  agg802: 'agg802',
  agg803: 'agg803',
  agg804: 'agg804',
  agg805: 'agg805',
  agg806: 'agg806',
  agg807: 'agg807',
  agg808: 'agg808',
  agg809: 'agg809',
  agg810: 'agg810',
  agg811: 'agg811',
  agg812: 'agg812',
  agg813: 'agg813',
  agg814: 'agg814',
  agg815: 'agg815',
  agg816: 'agg816',
  agg817: 'agg817',
  agg818: 'agg818',
  agg819: 'agg819',
  agg820: 'agg820',
  agg821: 'agg821',
  agg822: 'agg822',
  agg823: 'agg823',
  agg824: 'agg824',
  agg901: 'agg901',
  agg902: 'agg902',
  agg903: 'agg903',
  agg904: 'agg904',
  agg905: 'agg905',
  agg906: 'agg906',
  agg907: 'agg907',
  agg908: 'agg908',
  agg909: 'agg909',
  agg910: 'agg910',
  agg911: 'agg911',
  aggs101: 'aggs101',
  aggs102: 'aggs102',
  aggs103: 'aggs103',
  aggs104: 'aggs104',
  aggs105: 'aggs105',
  aggs106: 'aggs106',
  aggs107: 'aggs107',
  aggs108: 'aggs108',
  aggs109: 'aggs109',
  aggs110: 'aggs110',
  aggs111: 'aggs111',
  aggs112: 'aggs112',
  aggs113: 'aggs113',
  aggs114: 'aggs114',
  aggs115: 'aggs115',
  aggs116: 'aggs116',
  aggs117: 'aggs117',
  aggs118: 'aggs118',
  aggs119: 'aggs119',
  aggs120: 'aggs120',
  aggs121: 'aggs121',
  aggs122: 'aggs122',
  aggs123: 'aggs123',
  aggs124: 'aggs124',
  aggs901: 'aggs901',
  aggs902: 'aggs902',
  aggs903: 'aggs903',
  aggs904: 'aggs904',
  aggs905: 'aggs905',
  rets101: 'rets101',
  rets102: 'rets102',
  rets103: 'rets103',
  rets104: 'rets104',
  rets105: 'rets105',
  rets106: 'rets106',
  rets107: 'rets107',
  rets108: 'rets108',
  rets109: 'rets109',
  rets110: 'rets110',
  rets111: 'rets111',
  rets112: 'rets112',
  rets113: 'rets113',
  rets114: 'rets114',
  rets115: 'rets115',
  rets116: 'rets116',
  rets117: 'rets117',
  rets118: 'rets118',
  rets119: 'rets119',
  rets120: 'rets120',
  rets121: 'rets121',
  rets122: 'rets122',
  rets123: 'rets123',
  rets124: 'rets124',
  rets901: 'rets901',
  rets902: 'rets902',
  rets903: 'rets903',
  rets904: 'rets904',
  rets905: 'rets905',
  rtdex01: 'rtdex01',
  rtdex02: 'rtdex02',
  rtdexq1: 'rtdexq1',
  rtdexq2: 'rtdexq2',
  rtdexq3: 'rtdexq3',
  rtdexq4: 'rtdexq4',
  walsrts1: 'walsrts1',
  walsrts2: 'walsrts2',
  revs101: 'revs101',
  revs102: 'revs102',
  revs103: 'revs103',
  revs104: 'revs104',
  revs105: 'revs105',
  revs106: 'revs106',
  revs107: 'revs107',
  revs108: 'revs108',
  revs109: 'revs109',
  revs110: 'revs110',
  revs111: 'revs111',
  revs112: 'revs112',
  revs113: 'revs113',
  revs114: 'revs114',
  revs115: 'revs115',
  revs116: 'revs116',
  revs117: 'revs117',
  revs118: 'revs118',
  revs119: 'revs119',
  revs120: 'revs120',
  revs121: 'revs121',
  revs122: 'revs122',
  revs123: 'revs123',
  revs124: 'revs124',
  revs901: 'revs901',
  revs902: 'revs902',
  revs903: 'revs903',
  revs904: 'revs904',
  revs905: 'revs905',
  rvdex01: 'rvdex01',
  rvdex02: 'rvdex02',
  rvdexq1: 'rvdexq1',
  rvdexq2: 'rvdexq2',
  rvdexq3: 'rvdexq3',
  rvdexq4: 'rvdexq4',
  walsrvs1: 'walsrvs1',
  walsrvs2: 'walsrvs2',
  created_at: 'created_at',
  updated_at: 'updated_at',
  second_look: 'second_look'
} as const

export type Tu_attributes_non_standardScalarFieldEnum = (typeof Tu_attributes_non_standardScalarFieldEnum)[keyof typeof Tu_attributes_non_standardScalarFieldEnum]


export const Tu_attributes_non_standard_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  agg101: 'agg101',
  agg102: 'agg102',
  agg103: 'agg103',
  agg104: 'agg104',
  agg105: 'agg105',
  agg106: 'agg106',
  agg107: 'agg107',
  agg108: 'agg108',
  agg109: 'agg109',
  agg110: 'agg110',
  agg111: 'agg111',
  agg112: 'agg112',
  agg113: 'agg113',
  agg114: 'agg114',
  agg115: 'agg115',
  agg116: 'agg116',
  agg117: 'agg117',
  agg118: 'agg118',
  agg119: 'agg119',
  agg120: 'agg120',
  agg121: 'agg121',
  agg122: 'agg122',
  agg123: 'agg123',
  agg124: 'agg124',
  agg201: 'agg201',
  agg202: 'agg202',
  agg203: 'agg203',
  agg204: 'agg204',
  agg205: 'agg205',
  agg206: 'agg206',
  agg207: 'agg207',
  agg208: 'agg208',
  agg209: 'agg209',
  agg210: 'agg210',
  agg211: 'agg211',
  agg212: 'agg212',
  agg213: 'agg213',
  agg214: 'agg214',
  agg215: 'agg215',
  agg216: 'agg216',
  agg217: 'agg217',
  agg218: 'agg218',
  agg219: 'agg219',
  agg220: 'agg220',
  agg221: 'agg221',
  agg222: 'agg222',
  agg223: 'agg223',
  agg224: 'agg224',
  agg301: 'agg301',
  agg302: 'agg302',
  agg303: 'agg303',
  agg304: 'agg304',
  agg305: 'agg305',
  agg306: 'agg306',
  agg307: 'agg307',
  agg308: 'agg308',
  agg309: 'agg309',
  agg310: 'agg310',
  agg311: 'agg311',
  agg312: 'agg312',
  agg313: 'agg313',
  agg314: 'agg314',
  agg315: 'agg315',
  agg316: 'agg316',
  agg317: 'agg317',
  agg318: 'agg318',
  agg319: 'agg319',
  agg320: 'agg320',
  agg321: 'agg321',
  agg322: 'agg322',
  agg323: 'agg323',
  agg324: 'agg324',
  agg401: 'agg401',
  agg402: 'agg402',
  agg403: 'agg403',
  agg404: 'agg404',
  agg405: 'agg405',
  agg406: 'agg406',
  agg407: 'agg407',
  agg408: 'agg408',
  agg409: 'agg409',
  agg410: 'agg410',
  agg411: 'agg411',
  agg412: 'agg412',
  agg413: 'agg413',
  agg414: 'agg414',
  agg415: 'agg415',
  agg416: 'agg416',
  agg417: 'agg417',
  agg418: 'agg418',
  agg419: 'agg419',
  agg420: 'agg420',
  agg421: 'agg421',
  agg422: 'agg422',
  agg423: 'agg423',
  agg424: 'agg424',
  agg501: 'agg501',
  agg502: 'agg502',
  agg503: 'agg503',
  agg504: 'agg504',
  agg505: 'agg505',
  agg506: 'agg506',
  agg507: 'agg507',
  agg508: 'agg508',
  agg509: 'agg509',
  agg510: 'agg510',
  agg511: 'agg511',
  agg512: 'agg512',
  agg513: 'agg513',
  agg514: 'agg514',
  agg515: 'agg515',
  agg516: 'agg516',
  agg517: 'agg517',
  agg518: 'agg518',
  agg519: 'agg519',
  agg520: 'agg520',
  agg521: 'agg521',
  agg522: 'agg522',
  agg523: 'agg523',
  agg524: 'agg524',
  agg601: 'agg601',
  agg602: 'agg602',
  agg603: 'agg603',
  agg604: 'agg604',
  agg605: 'agg605',
  agg606: 'agg606',
  agg607: 'agg607',
  agg608: 'agg608',
  agg609: 'agg609',
  agg610: 'agg610',
  agg611: 'agg611',
  agg612: 'agg612',
  agg613: 'agg613',
  agg614: 'agg614',
  agg615: 'agg615',
  agg616: 'agg616',
  agg617: 'agg617',
  agg618: 'agg618',
  agg619: 'agg619',
  agg620: 'agg620',
  agg621: 'agg621',
  agg622: 'agg622',
  agg623: 'agg623',
  agg624: 'agg624',
  agg701: 'agg701',
  agg702: 'agg702',
  agg703: 'agg703',
  agg704: 'agg704',
  agg705: 'agg705',
  agg706: 'agg706',
  agg707: 'agg707',
  agg708: 'agg708',
  agg709: 'agg709',
  agg710: 'agg710',
  agg711: 'agg711',
  agg712: 'agg712',
  agg713: 'agg713',
  agg714: 'agg714',
  agg715: 'agg715',
  agg716: 'agg716',
  agg717: 'agg717',
  agg718: 'agg718',
  agg719: 'agg719',
  agg720: 'agg720',
  agg721: 'agg721',
  agg722: 'agg722',
  agg723: 'agg723',
  agg724: 'agg724',
  agg801: 'agg801',
  agg802: 'agg802',
  agg803: 'agg803',
  agg804: 'agg804',
  agg805: 'agg805',
  agg806: 'agg806',
  agg807: 'agg807',
  agg808: 'agg808',
  agg809: 'agg809',
  agg810: 'agg810',
  agg811: 'agg811',
  agg812: 'agg812',
  agg813: 'agg813',
  agg814: 'agg814',
  agg815: 'agg815',
  agg816: 'agg816',
  agg817: 'agg817',
  agg818: 'agg818',
  agg819: 'agg819',
  agg820: 'agg820',
  agg821: 'agg821',
  agg822: 'agg822',
  agg823: 'agg823',
  agg824: 'agg824',
  agg901: 'agg901',
  agg902: 'agg902',
  agg903: 'agg903',
  agg904: 'agg904',
  agg905: 'agg905',
  agg906: 'agg906',
  agg907: 'agg907',
  agg908: 'agg908',
  agg909: 'agg909',
  agg910: 'agg910',
  agg911: 'agg911',
  aggs101: 'aggs101',
  aggs102: 'aggs102',
  aggs103: 'aggs103',
  aggs104: 'aggs104',
  aggs105: 'aggs105',
  aggs106: 'aggs106',
  aggs107: 'aggs107',
  aggs108: 'aggs108',
  aggs109: 'aggs109',
  aggs110: 'aggs110',
  aggs111: 'aggs111',
  aggs112: 'aggs112',
  aggs113: 'aggs113',
  aggs114: 'aggs114',
  aggs115: 'aggs115',
  aggs116: 'aggs116',
  aggs117: 'aggs117',
  aggs118: 'aggs118',
  aggs119: 'aggs119',
  aggs120: 'aggs120',
  aggs121: 'aggs121',
  aggs122: 'aggs122',
  aggs123: 'aggs123',
  aggs124: 'aggs124',
  aggs901: 'aggs901',
  aggs902: 'aggs902',
  aggs903: 'aggs903',
  aggs904: 'aggs904',
  aggs905: 'aggs905',
  rets101: 'rets101',
  rets102: 'rets102',
  rets103: 'rets103',
  rets104: 'rets104',
  rets105: 'rets105',
  rets106: 'rets106',
  rets107: 'rets107',
  rets108: 'rets108',
  rets109: 'rets109',
  rets110: 'rets110',
  rets111: 'rets111',
  rets112: 'rets112',
  rets113: 'rets113',
  rets114: 'rets114',
  rets115: 'rets115',
  rets116: 'rets116',
  rets117: 'rets117',
  rets118: 'rets118',
  rets119: 'rets119',
  rets120: 'rets120',
  rets121: 'rets121',
  rets122: 'rets122',
  rets123: 'rets123',
  rets124: 'rets124',
  rets901: 'rets901',
  rets902: 'rets902',
  rets903: 'rets903',
  rets904: 'rets904',
  rets905: 'rets905',
  rtdex01: 'rtdex01',
  rtdex02: 'rtdex02',
  rtdexq1: 'rtdexq1',
  rtdexq2: 'rtdexq2',
  rtdexq3: 'rtdexq3',
  rtdexq4: 'rtdexq4',
  walsrts1: 'walsrts1',
  walsrts2: 'walsrts2',
  revs101: 'revs101',
  revs102: 'revs102',
  revs103: 'revs103',
  revs104: 'revs104',
  revs105: 'revs105',
  revs106: 'revs106',
  revs107: 'revs107',
  revs108: 'revs108',
  revs109: 'revs109',
  revs110: 'revs110',
  revs111: 'revs111',
  revs112: 'revs112',
  revs113: 'revs113',
  revs114: 'revs114',
  revs115: 'revs115',
  revs116: 'revs116',
  revs117: 'revs117',
  revs118: 'revs118',
  revs119: 'revs119',
  revs120: 'revs120',
  revs121: 'revs121',
  revs122: 'revs122',
  revs123: 'revs123',
  revs124: 'revs124',
  revs901: 'revs901',
  revs902: 'revs902',
  revs903: 'revs903',
  revs904: 'revs904',
  revs905: 'revs905',
  rvdex01: 'rvdex01',
  rvdex02: 'rvdex02',
  rvdexq1: 'rvdexq1',
  rvdexq2: 'rvdexq2',
  rvdexq3: 'rvdexq3',
  rvdexq4: 'rvdexq4',
  walsrvs1: 'walsrvs1',
  walsrvs2: 'walsrvs2',
  created_at: 'created_at',
  updated_at: 'updated_at',
  second_look: 'second_look'
} as const

export type Tu_attributes_non_standard_stagingScalarFieldEnum = (typeof Tu_attributes_non_standard_stagingScalarFieldEnum)[keyof typeof Tu_attributes_non_standard_stagingScalarFieldEnum]


export const Tu_attributes_otherScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  g093s: 'g093s',
  g094s: 'g094s',
  g095s: 'g095s',
  g099s: 'g099s',
  g213a: 'g213a',
  g213b: 'g213b',
  g215a: 'g215a',
  g215b: 'g215b',
  md02s: 'md02s',
  md33s: 'md33s',
  md106s: 'md106s',
  s064a: 's064a',
  s064b: 's064b',
  s068a: 's068a',
  s068b: 's068b',
  s071a: 's071a',
  s071b: 's071b',
  s073a: 's073a',
  s073b: 's073b',
  s063s: 's063s',
  s063a: 's063a',
  s208s: 's208s',
  s207s: 's207s',
  s207a: 's207a',
  g106s: 'g106s',
  g099a: 'g099a',
  s206s: 's206s',
  s209s: 's209s',
  s209a: 's209a',
  s204s: 's204s',
  s204a: 's204a',
  cv04: 'cv04',
  cv05: 'cv05',
  s_s064: 's_s064',
  s_s065: 's_s065',
  c_coam: 'c_coam',
  c_coll: 'c_coll',
  c_cxmd: 'c_cxmd',
  c_g093: 'c_g093',
  c_g094: 'c_g094',
  c_g095: 'c_g095',
  c_s059: 'c_s059',
  c_s064: 'c_s064',
  g102s: 'g102s',
  g103s: 'g103s',
  g104s: 'g104s',
  g105s: 'g105s',
  g231s: 'g231s',
  g232s: 'g232s',
  g233s: 'g233s',
  g234s: 'g234s',
  g236s: 'g236s',
  g237s: 'g237s',
  g238s: 'g238s',
  g239s: 'g239s',
  g240s: 'g240s',
  g241s: 'g241s',
  g960s: 'g960s',
  g980s: 'g980s',
  g990s: 'g990s',
  s114s: 's114s',
  g242s: 'g242s',
  g243s: 'g243s',
  g244s: 'g244s',
  g242f: 'g242f',
  g243f: 'g243f',
  g244f: 'g244f',
  g242b: 'g242b',
  g243b: 'g243b',
  g244b: 'g244b',
  cv14: 'cv14',
  cv15: 'cv15',
  cv16: 'cv16',
  s_g096: 's_g096',
  s_g098: 's_g098',
  s_g102: 's_g102',
  s_g103: 's_g103',
  s_g104: 's_g104',
  s_s114: 's_s114',
  s_s115: 's_s115',
  c_coiq: 'c_coiq',
  c_g096: 'c_g096',
  c_g098: 'c_g098',
  c_g102: 'c_g102',
  second_look: 'second_look'
} as const

export type Tu_attributes_otherScalarFieldEnum = (typeof Tu_attributes_otherScalarFieldEnum)[keyof typeof Tu_attributes_otherScalarFieldEnum]


export const Tu_attributes_other_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  g093s: 'g093s',
  g094s: 'g094s',
  g095s: 'g095s',
  g099s: 'g099s',
  g213a: 'g213a',
  g213b: 'g213b',
  g215a: 'g215a',
  g215b: 'g215b',
  md02s: 'md02s',
  md33s: 'md33s',
  md106s: 'md106s',
  s064a: 's064a',
  s064b: 's064b',
  s068a: 's068a',
  s068b: 's068b',
  s071a: 's071a',
  s071b: 's071b',
  s073a: 's073a',
  s073b: 's073b',
  s063s: 's063s',
  s063a: 's063a',
  s208s: 's208s',
  s207s: 's207s',
  s207a: 's207a',
  g106s: 'g106s',
  g099a: 'g099a',
  s206s: 's206s',
  s209s: 's209s',
  s209a: 's209a',
  s204s: 's204s',
  s204a: 's204a',
  cv04: 'cv04',
  cv05: 'cv05',
  s_s064: 's_s064',
  s_s065: 's_s065',
  c_coam: 'c_coam',
  c_coll: 'c_coll',
  c_cxmd: 'c_cxmd',
  c_g093: 'c_g093',
  c_g094: 'c_g094',
  c_g095: 'c_g095',
  c_s059: 'c_s059',
  c_s064: 'c_s064',
  g102s: 'g102s',
  g103s: 'g103s',
  g104s: 'g104s',
  g105s: 'g105s',
  g231s: 'g231s',
  g232s: 'g232s',
  g233s: 'g233s',
  g234s: 'g234s',
  g236s: 'g236s',
  g237s: 'g237s',
  g238s: 'g238s',
  g239s: 'g239s',
  g240s: 'g240s',
  g241s: 'g241s',
  g960s: 'g960s',
  g980s: 'g980s',
  g990s: 'g990s',
  s114s: 's114s',
  g242s: 'g242s',
  g243s: 'g243s',
  g244s: 'g244s',
  g242f: 'g242f',
  g243f: 'g243f',
  g244f: 'g244f',
  g242b: 'g242b',
  g243b: 'g243b',
  g244b: 'g244b',
  cv14: 'cv14',
  cv15: 'cv15',
  cv16: 'cv16',
  s_g096: 's_g096',
  s_g098: 's_g098',
  s_g102: 's_g102',
  s_g103: 's_g103',
  s_g104: 's_g104',
  s_s114: 's_s114',
  s_s115: 's_s115',
  c_coiq: 'c_coiq',
  c_g096: 'c_g096',
  c_g098: 'c_g098',
  c_g102: 'c_g102',
  second_look: 'second_look'
} as const

export type Tu_attributes_other_stagingScalarFieldEnum = (typeof Tu_attributes_other_stagingScalarFieldEnum)[keyof typeof Tu_attributes_other_stagingScalarFieldEnum]


export const Tu_attributes_revolvingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  rt01s: 'rt01s',
  rt02s: 'rt02s',
  rt03s: 'rt03s',
  rt06s: 'rt06s',
  rt09s: 'rt09s',
  rt12s: 'rt12s',
  rt20s: 'rt20s',
  rt21s: 'rt21s',
  rt24s: 'rt24s',
  rt25s: 'rt25s',
  rt27s: 'rt27s',
  rt28s: 'rt28s',
  rt29s: 'rt29s',
  rt30s: 'rt30s',
  rt31s: 'rt31s',
  rt32s: 'rt32s',
  rt33s: 'rt33s',
  rt34s: 'rt34s',
  rt35s: 'rt35s',
  rt36s: 'rt36s',
  rt57s: 'rt57s',
  rt101s: 'rt101s',
  rt201s: 'rt201s',
  rtl_trd: 'rtl_trd',
  s_rt01: 's_rt01',
  s_rt03: 's_rt03',
  s_rt05: 's_rt05',
  s_rt06: 's_rt06',
  s_rt07: 's_rt07',
  s_rt08: 's_rt08',
  s_rt09: 's_rt09',
  s_rt10: 's_rt10',
  s_rt11: 's_rt11',
  s_rt12: 's_rt12',
  s_rt13: 's_rt13',
  s_rt14: 's_rt14',
  s_rt20: 's_rt20',
  s_rt21: 's_rt21',
  s_rt28: 's_rt28',
  s_rt29: 's_rt29',
  s_rt33: 's_rt33',
  s_rt34: 's_rt34',
  s_rt35: 's_rt35',
  s_rt36: 's_rt36',
  s_ur03: 's_ur03',
  s_ur05: 's_ur05',
  s_ur06: 's_ur06',
  s_ur07: 's_ur07',
  s_ur08: 's_ur08',
  s_ur09: 's_ur09',
  s_ur10: 's_ur10',
  s_ur11: 's_ur11',
  s_ur12: 's_ur12',
  s_ur13: 's_ur13',
  s_ur14: 's_ur14',
  s_ur20: 's_ur20',
  s_ur21: 's_ur21',
  s_ur28: 's_ur28',
  s_ur33: 's_ur33',
  s_ur35: 's_ur35',
  s_ds02: 's_ds02',
  s_ds03: 's_ds03',
  s_ds04: 's_ds04',
  s_ds05: 's_ds05',
  s_ds06: 's_ds06',
  s_ds07: 's_ds07',
  s_ds08: 's_ds08',
  s_ds09: 's_ds09',
  s_ds10: 's_ds10',
  s_ds11: 's_ds11',
  s_ds12: 's_ds12',
  s_ds13: 's_ds13',
  s_ds14: 's_ds14',
  s_ds21: 's_ds21',
  s_ds33: 's_ds33',
  s_ds35: 's_ds35',
  s_s040: 's_s040',
  c_rt01: 'c_rt01',
  c_rt02: 'c_rt02',
  c_rt03: 'c_rt03',
  c_rt07: 'c_rt07',
  c_rt09: 'c_rt09',
  c_rt20: 'c_rt20',
  c_rt21: 'c_rt21',
  c_rt28: 'c_rt28',
  c_rt29: 'c_rt29',
  c_rt32: 'c_rt32',
  c_rt33: 'c_rt33',
  c_rt34: 'c_rt34',
  c_rt35: 'c_rt35',
  c_rt36: 'c_rt36',
  c_s040: 'c_s040',
  br01s: 'br01s',
  br02s: 'br02s',
  br03s: 'br03s',
  br06s: 'br06s',
  br09s: 'br09s',
  br12s: 'br12s',
  br20s: 'br20s',
  br21s: 'br21s',
  br24s: 'br24s',
  br25s: 'br25s',
  br27s: 'br27s',
  br28s: 'br28s',
  br29s: 'br29s',
  br30s: 'br30s',
  br31s: 'br31s',
  br32s: 'br32s',
  br33s: 'br33s',
  br34s: 'br34s',
  br35s: 'br35s',
  br36s: 'br36s',
  br57s: 'br57s',
  br101s: 'br101s',
  br109s: 'br109s',
  bc_trd: 'bc_trd',
  paymnt09: 'paymnt09',
  rvlr01: 'rvlr01',
  rvlr02: 'rvlr02',
  rvlr03: 'rvlr03',
  rvlr04: 'rvlr04',
  rvlr05: 'rvlr05',
  rvlr06: 'rvlr06',
  rvlr07: 'rvlr07',
  rvlr08: 'rvlr08',
  rvlr09: 'rvlr09',
  rvlr10: 'rvlr10',
  rvlr11: 'rvlr11',
  rvlr12: 'rvlr12',
  rvlr13: 'rvlr13',
  rvlr14: 'rvlr14',
  rvlr15: 'rvlr15',
  rvlr16: 'rvlr16',
  rvlr17: 'rvlr17',
  rvlr18: 'rvlr18',
  rvlr19: 'rvlr19',
  rvlr20: 'rvlr20',
  rvlr21: 'rvlr21',
  rvlr22: 'rvlr22',
  rvlr23: 'rvlr23',
  rvlr24: 'rvlr24',
  rvlr25: 'rvlr25',
  rvlr26: 'rvlr26',
  rvlr27: 'rvlr27',
  rvlr28: 'rvlr28',
  rvlr29: 'rvlr29',
  rvlr30: 'rvlr30',
  rvlr31: 'rvlr31',
  rvlr32: 'rvlr32',
  rvlr33: 'rvlr33',
  trv02: 'trv02',
  trv15: 'trv15',
  trv16: 'trv16',
  trv17: 'trv17',
  trv18: 'trv18',
  trv19: 'trv19',
  trv20: 'trv20',
  trv21: 'trv21',
  trv22: 'trv22',
  walshr01: 'walshr01',
  walshr02: 'walshr02',
  walshr03: 'walshr03',
  walshr04: 'walshr04',
  walshr05: 'walshr05',
  walshr06: 'walshr06',
  walshr07: 'walshr07',
  walshr08: 'walshr08',
  walshr09: 'walshr09',
  walshr10: 'walshr10',
  cv22: 'cv22',
  cv23: 'cv23',
  cv24: 'cv24',
  cv27: 'cv27',
  cv28: 'cv28',
  index01: 'index01',
  index02: 'index02',
  indexq1: 'indexq1',
  indexq2: 'indexq2',
  indexq3: 'indexq3',
  indexq4: 'indexq4',
  walshrs1: 'walshrs1',
  walshrs2: 'walshrs2',
  bcpmtnum: 'bcpmtnum',
  bcpmtstr: 'bcpmtstr',
  s_br03: 's_br03',
  s_br20: 's_br20',
  s_br28: 's_br28',
  s_br33: 's_br33',
  s_bc01: 's_bc01',
  s_bc02: 's_bc02',
  s_bc03: 's_bc03',
  s_bc05: 's_bc05',
  s_bc06: 's_bc06',
  s_bc07: 's_bc07',
  s_bc08: 's_bc08',
  s_bc09: 's_bc09',
  s_bc10: 's_bc10',
  s_bc11: 's_bc11',
  s_bc12: 's_bc12',
  s_bc13: 's_bc13',
  s_bc14: 's_bc14',
  s_bc21: 's_bc21',
  s_bc29: 's_bc29',
  s_bc30: 's_bc30',
  s_bc31: 's_bc31',
  s_bc34: 's_bc34',
  s_bc35: 's_bc35',
  s_bc36: 's_bc36',
  s_bc98: 's_bc98',
  s_pb05: 's_pb05',
  s_pb03: 's_pb03',
  s_pb06: 's_pb06',
  s_pb07: 's_pb07',
  s_pb08: 's_pb08',
  s_pb09: 's_pb09',
  s_pb10: 's_pb10',
  s_pb11: 's_pb11',
  s_pb12: 's_pb12',
  s_pb13: 's_pb13',
  s_pb14: 's_pb14',
  s_pb20: 's_pb20',
  s_pb21: 's_pb21',
  s_pb33: 's_pb33',
  s_pb35: 's_pb35',
  s_s015: 's_s015',
  c_bc01: 'c_bc01',
  c_bc02: 'c_bc02',
  c_bc03: 'c_bc03',
  c_bc07: 'c_bc07',
  c_bc09: 'c_bc09',
  c_bc20: 'c_bc20',
  c_bc21: 'c_bc21',
  c_bc28: 'c_bc28',
  c_bc29: 'c_bc29',
  c_bc30: 'c_bc30',
  c_bc31: 'c_bc31',
  c_bc32: 'c_bc32',
  c_bc33: 'c_bc33',
  c_bc34: 'c_bc34',
  c_bc35: 'c_bc35',
  c_bc36: 'c_bc36',
  c_bc98: 'c_bc98',
  c_br34: 'c_br34',
  bc09s: 'bc09s',
  bc12s: 'bc12s',
  bc20s: 'bc20s',
  bc21s: 'bc21s',
  bc24s: 'bc24s',
  bc25s: 'bc25s',
  bc27s: 'bc27s',
  bc28s: 'bc28s',
  bc29s: 'bc29s',
  bc30s: 'bc30s',
  bc31s: 'bc31s',
  bc32s: 'bc32s',
  bc33s: 'bc33s',
  bc34s: 'bc34s',
  bc35s: 'bc35s',
  bc36s: 'bc36s',
  bc57s: 'bc57s',
  bc97a: 'bc97a',
  bc97b: 'bc97b',
  bc98a: 'bc98a',
  bc101s: 'bc101s',
  bc102s: 'bc102s',
  bc103s: 'bc103s',
  bc104s: 'bc104s',
  bc106s: 'bc106s',
  bc107s: 'bc107s',
  bc108s: 'bc108s',
  bc109s: 'bc109s',
  bc110s: 'bc110s',
  g218c: 'g218c',
  g218d: 'g218d',
  g219c: 'g219c',
  g219d: 'g219d',
  g220c: 'g220c',
  g220d: 'g220d',
  g221c: 'g221c',
  g221d: 'g221d',
  g300s: 'g300s',
  g301s: 'g301s',
  pb01s: 'pb01s',
  pb02s: 'pb02s',
  pb03s: 'pb03s',
  pb06s: 'pb06s',
  pb09s: 'pb09s',
  pb12s: 'pb12s',
  pb20s: 'pb20s',
  pb21s: 'pb21s',
  pb24s: 'pb24s',
  pb25s: 'pb25s',
  pb27s: 'pb27s',
  pb28s: 'pb28s',
  pb29s: 'pb29s',
  pb30s: 'pb30s',
  pb31s: 'pb31s',
  pb32s: 'pb32s',
  pb33s: 'pb33s',
  pb34s: 'pb34s',
  pb35s: 'pb35s',
  pb36s: 'pb36s',
  pb57s: 'pb57s',
  pb101s: 'pb101s',
  fr01s: 'fr01s',
  fr02s: 'fr02s',
  fr03s: 'fr03s',
  fr06s: 'fr06s',
  fr09s: 'fr09s',
  fr12s: 'fr12s',
  fr20s: 'fr20s',
  fr21s: 'fr21s',
  fr24s: 'fr24s',
  fr25s: 'fr25s',
  fr27s: 'fr27s',
  fr28s: 'fr28s',
  fr29s: 'fr29s',
  fr30s: 'fr30s',
  fr31s: 'fr31s',
  fr32s: 'fr32s',
  fr33s: 'fr33s',
  fr34s: 'fr34s',
  fr35s: 'fr35s',
  fr36s: 'fr36s',
  fr57s: 'fr57s',
  fr101s: 'fr101s',
  s_fr03: 's_fr03',
  s_fr33: 's_fr33',
  s_fr35: 's_fr35',
  s_s020: 's_s020',
  second_look: 'second_look'
} as const

export type Tu_attributes_revolvingScalarFieldEnum = (typeof Tu_attributes_revolvingScalarFieldEnum)[keyof typeof Tu_attributes_revolvingScalarFieldEnum]


export const Tu_attributes_revolving_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  rt01s: 'rt01s',
  rt02s: 'rt02s',
  rt03s: 'rt03s',
  rt06s: 'rt06s',
  rt09s: 'rt09s',
  rt12s: 'rt12s',
  rt20s: 'rt20s',
  rt21s: 'rt21s',
  rt24s: 'rt24s',
  rt25s: 'rt25s',
  rt27s: 'rt27s',
  rt28s: 'rt28s',
  rt29s: 'rt29s',
  rt30s: 'rt30s',
  rt31s: 'rt31s',
  rt32s: 'rt32s',
  rt33s: 'rt33s',
  rt34s: 'rt34s',
  rt35s: 'rt35s',
  rt36s: 'rt36s',
  rt57s: 'rt57s',
  rt101s: 'rt101s',
  rt201s: 'rt201s',
  rtl_trd: 'rtl_trd',
  s_rt01: 's_rt01',
  s_rt03: 's_rt03',
  s_rt05: 's_rt05',
  s_rt06: 's_rt06',
  s_rt07: 's_rt07',
  s_rt08: 's_rt08',
  s_rt09: 's_rt09',
  s_rt10: 's_rt10',
  s_rt11: 's_rt11',
  s_rt12: 's_rt12',
  s_rt13: 's_rt13',
  s_rt14: 's_rt14',
  s_rt20: 's_rt20',
  s_rt21: 's_rt21',
  s_rt28: 's_rt28',
  s_rt29: 's_rt29',
  s_rt33: 's_rt33',
  s_rt34: 's_rt34',
  s_rt35: 's_rt35',
  s_rt36: 's_rt36',
  s_ur03: 's_ur03',
  s_ur05: 's_ur05',
  s_ur06: 's_ur06',
  s_ur07: 's_ur07',
  s_ur08: 's_ur08',
  s_ur09: 's_ur09',
  s_ur10: 's_ur10',
  s_ur11: 's_ur11',
  s_ur12: 's_ur12',
  s_ur13: 's_ur13',
  s_ur14: 's_ur14',
  s_ur20: 's_ur20',
  s_ur21: 's_ur21',
  s_ur28: 's_ur28',
  s_ur33: 's_ur33',
  s_ur35: 's_ur35',
  s_ds02: 's_ds02',
  s_ds03: 's_ds03',
  s_ds04: 's_ds04',
  s_ds05: 's_ds05',
  s_ds06: 's_ds06',
  s_ds07: 's_ds07',
  s_ds08: 's_ds08',
  s_ds09: 's_ds09',
  s_ds10: 's_ds10',
  s_ds11: 's_ds11',
  s_ds12: 's_ds12',
  s_ds13: 's_ds13',
  s_ds14: 's_ds14',
  s_ds21: 's_ds21',
  s_ds33: 's_ds33',
  s_ds35: 's_ds35',
  s_s040: 's_s040',
  c_rt01: 'c_rt01',
  c_rt02: 'c_rt02',
  c_rt03: 'c_rt03',
  c_rt07: 'c_rt07',
  c_rt09: 'c_rt09',
  c_rt20: 'c_rt20',
  c_rt21: 'c_rt21',
  c_rt28: 'c_rt28',
  c_rt29: 'c_rt29',
  c_rt32: 'c_rt32',
  c_rt33: 'c_rt33',
  c_rt34: 'c_rt34',
  c_rt35: 'c_rt35',
  c_rt36: 'c_rt36',
  c_s040: 'c_s040',
  br01s: 'br01s',
  br02s: 'br02s',
  br03s: 'br03s',
  br06s: 'br06s',
  br09s: 'br09s',
  br12s: 'br12s',
  br20s: 'br20s',
  br21s: 'br21s',
  br24s: 'br24s',
  br25s: 'br25s',
  br27s: 'br27s',
  br28s: 'br28s',
  br29s: 'br29s',
  br30s: 'br30s',
  br31s: 'br31s',
  br32s: 'br32s',
  br33s: 'br33s',
  br34s: 'br34s',
  br35s: 'br35s',
  br36s: 'br36s',
  br57s: 'br57s',
  br101s: 'br101s',
  br109s: 'br109s',
  bc_trd: 'bc_trd',
  paymnt09: 'paymnt09',
  rvlr01: 'rvlr01',
  rvlr02: 'rvlr02',
  rvlr03: 'rvlr03',
  rvlr04: 'rvlr04',
  rvlr05: 'rvlr05',
  rvlr06: 'rvlr06',
  rvlr07: 'rvlr07',
  rvlr08: 'rvlr08',
  rvlr09: 'rvlr09',
  rvlr10: 'rvlr10',
  rvlr11: 'rvlr11',
  rvlr12: 'rvlr12',
  rvlr13: 'rvlr13',
  rvlr14: 'rvlr14',
  rvlr15: 'rvlr15',
  rvlr16: 'rvlr16',
  rvlr17: 'rvlr17',
  rvlr18: 'rvlr18',
  rvlr19: 'rvlr19',
  rvlr20: 'rvlr20',
  rvlr21: 'rvlr21',
  rvlr22: 'rvlr22',
  rvlr23: 'rvlr23',
  rvlr24: 'rvlr24',
  rvlr25: 'rvlr25',
  rvlr26: 'rvlr26',
  rvlr27: 'rvlr27',
  rvlr28: 'rvlr28',
  rvlr29: 'rvlr29',
  rvlr30: 'rvlr30',
  rvlr31: 'rvlr31',
  rvlr32: 'rvlr32',
  rvlr33: 'rvlr33',
  trv02: 'trv02',
  trv15: 'trv15',
  trv16: 'trv16',
  trv17: 'trv17',
  trv18: 'trv18',
  trv19: 'trv19',
  trv20: 'trv20',
  trv21: 'trv21',
  trv22: 'trv22',
  walshr01: 'walshr01',
  walshr02: 'walshr02',
  walshr03: 'walshr03',
  walshr04: 'walshr04',
  walshr05: 'walshr05',
  walshr06: 'walshr06',
  walshr07: 'walshr07',
  walshr08: 'walshr08',
  walshr09: 'walshr09',
  walshr10: 'walshr10',
  cv22: 'cv22',
  cv23: 'cv23',
  cv24: 'cv24',
  cv27: 'cv27',
  cv28: 'cv28',
  index01: 'index01',
  index02: 'index02',
  indexq1: 'indexq1',
  indexq2: 'indexq2',
  indexq3: 'indexq3',
  indexq4: 'indexq4',
  walshrs1: 'walshrs1',
  walshrs2: 'walshrs2',
  bcpmtnum: 'bcpmtnum',
  bcpmtstr: 'bcpmtstr',
  s_br03: 's_br03',
  s_br20: 's_br20',
  s_br28: 's_br28',
  s_br33: 's_br33',
  s_bc01: 's_bc01',
  s_bc02: 's_bc02',
  s_bc03: 's_bc03',
  s_bc05: 's_bc05',
  s_bc06: 's_bc06',
  s_bc07: 's_bc07',
  s_bc08: 's_bc08',
  s_bc09: 's_bc09',
  s_bc10: 's_bc10',
  s_bc11: 's_bc11',
  s_bc12: 's_bc12',
  s_bc13: 's_bc13',
  s_bc14: 's_bc14',
  s_bc21: 's_bc21',
  s_bc29: 's_bc29',
  s_bc30: 's_bc30',
  s_bc31: 's_bc31',
  s_bc34: 's_bc34',
  s_bc35: 's_bc35',
  s_bc36: 's_bc36',
  s_bc98: 's_bc98',
  s_pb05: 's_pb05',
  s_pb03: 's_pb03',
  s_pb06: 's_pb06',
  s_pb07: 's_pb07',
  s_pb08: 's_pb08',
  s_pb09: 's_pb09',
  s_pb10: 's_pb10',
  s_pb11: 's_pb11',
  s_pb12: 's_pb12',
  s_pb13: 's_pb13',
  s_pb14: 's_pb14',
  s_pb20: 's_pb20',
  s_pb21: 's_pb21',
  s_pb33: 's_pb33',
  s_pb35: 's_pb35',
  s_s015: 's_s015',
  c_bc01: 'c_bc01',
  c_bc02: 'c_bc02',
  c_bc03: 'c_bc03',
  c_bc07: 'c_bc07',
  c_bc09: 'c_bc09',
  c_bc20: 'c_bc20',
  c_bc21: 'c_bc21',
  c_bc28: 'c_bc28',
  c_bc29: 'c_bc29',
  c_bc30: 'c_bc30',
  c_bc31: 'c_bc31',
  c_bc32: 'c_bc32',
  c_bc33: 'c_bc33',
  c_bc34: 'c_bc34',
  c_bc35: 'c_bc35',
  c_bc36: 'c_bc36',
  c_bc98: 'c_bc98',
  c_br34: 'c_br34',
  bc09s: 'bc09s',
  bc12s: 'bc12s',
  bc20s: 'bc20s',
  bc21s: 'bc21s',
  bc24s: 'bc24s',
  bc25s: 'bc25s',
  bc27s: 'bc27s',
  bc28s: 'bc28s',
  bc29s: 'bc29s',
  bc30s: 'bc30s',
  bc31s: 'bc31s',
  bc32s: 'bc32s',
  bc33s: 'bc33s',
  bc34s: 'bc34s',
  bc35s: 'bc35s',
  bc36s: 'bc36s',
  bc57s: 'bc57s',
  bc97a: 'bc97a',
  bc97b: 'bc97b',
  bc98a: 'bc98a',
  bc101s: 'bc101s',
  bc102s: 'bc102s',
  bc103s: 'bc103s',
  bc104s: 'bc104s',
  bc106s: 'bc106s',
  bc107s: 'bc107s',
  bc108s: 'bc108s',
  bc109s: 'bc109s',
  bc110s: 'bc110s',
  g218c: 'g218c',
  g218d: 'g218d',
  g219c: 'g219c',
  g219d: 'g219d',
  g220c: 'g220c',
  g220d: 'g220d',
  g221c: 'g221c',
  g221d: 'g221d',
  g300s: 'g300s',
  g301s: 'g301s',
  pb01s: 'pb01s',
  pb02s: 'pb02s',
  pb03s: 'pb03s',
  pb06s: 'pb06s',
  pb09s: 'pb09s',
  pb12s: 'pb12s',
  pb20s: 'pb20s',
  pb21s: 'pb21s',
  pb24s: 'pb24s',
  pb25s: 'pb25s',
  pb27s: 'pb27s',
  pb28s: 'pb28s',
  pb29s: 'pb29s',
  pb30s: 'pb30s',
  pb31s: 'pb31s',
  pb32s: 'pb32s',
  pb33s: 'pb33s',
  pb34s: 'pb34s',
  pb35s: 'pb35s',
  pb36s: 'pb36s',
  pb57s: 'pb57s',
  pb101s: 'pb101s',
  fr01s: 'fr01s',
  fr02s: 'fr02s',
  fr03s: 'fr03s',
  fr06s: 'fr06s',
  fr09s: 'fr09s',
  fr12s: 'fr12s',
  fr20s: 'fr20s',
  fr21s: 'fr21s',
  fr24s: 'fr24s',
  fr25s: 'fr25s',
  fr27s: 'fr27s',
  fr28s: 'fr28s',
  fr29s: 'fr29s',
  fr30s: 'fr30s',
  fr31s: 'fr31s',
  fr32s: 'fr32s',
  fr33s: 'fr33s',
  fr34s: 'fr34s',
  fr35s: 'fr35s',
  fr36s: 'fr36s',
  fr57s: 'fr57s',
  fr101s: 'fr101s',
  s_fr03: 's_fr03',
  s_fr33: 's_fr33',
  s_fr35: 's_fr35',
  s_s020: 's_s020',
  second_look: 'second_look'
} as const

export type Tu_attributes_revolving_stagingScalarFieldEnum = (typeof Tu_attributes_revolving_stagingScalarFieldEnum)[keyof typeof Tu_attributes_revolving_stagingScalarFieldEnum]


export const Xpn_attributes_all_tradelinesScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  p13_all0135: 'p13_all0135',
  p13_all0300: 'p13_all0300',
  p13_all0302: 'p13_all0302',
  p13_all0316: 'p13_all0316',
  p13_all0336: 'p13_all0336',
  p13_all0416: 'p13_all0416',
  p13_all0436: 'p13_all0436',
  p13_all0437: 'p13_all0437',
  p13_all0438: 'p13_all0438',
  p13_all0448: 'p13_all0448',
  p13_all1300: 'p13_all1300',
  p13_all1361: 'p13_all1361',
  p13_all1371: 'p13_all1371',
  p13_all1380: 'p13_all1380',
  p13_all2011: 'p13_all2011',
  p13_all2106: 'p13_all2106',
  p13_all2136: 'p13_all2136',
  p13_all2181: 'p13_all2181',
  p13_all2182: 'p13_all2182',
  p13_all2183: 'p13_all2183',
  p13_all2184: 'p13_all2184',
  p13_all2411: 'p13_all2411',
  p13_all2420: 'p13_all2420',
  p13_all2421: 'p13_all2421',
  p13_all2422: 'p13_all2422',
  p13_all2428: 'p13_all2428',
  p13_all2432: 'p13_all2432',
  p13_all2442: 'p13_all2442',
  p13_all2450: 'p13_all2450',
  p13_all2461: 'p13_all2461',
  p13_all2480: 'p13_all2480',
  p13_all2488: 'p13_all2488',
  p13_all2490: 'p13_all2490',
  p13_all2494: 'p13_all2494',
  p13_all2633: 'p13_all2633',
  p13_all2639: 'p13_all2639',
  p13_all2677: 'p13_all2677',
  p13_all2695: 'p13_all2695',
  p13_all2840: 'p13_all2840',
  p13_all2841: 'p13_all2841',
  p13_all2870: 'p13_all2870',
  p13_all2900: 'p13_all2900',
  p13_all2906: 'p13_all2906',
  p13_all2908: 'p13_all2908',
  p13_all2930: 'p13_all2930',
  p13_all2938: 'p13_all2938',
  p13_all3110: 'p13_all3110',
  p13_all3510: 'p13_all3510',
  p13_all3517: 'p13_all3517',
  p13_all4070: 'p13_all4070',
  p13_all4080: 'p13_all4080',
  p13_all4380: 'p13_all4380',
  p13_all4780: 'p13_all4780',
  p13_all4975: 'p13_all4975',
  p13_all4976: 'p13_all4976',
  p13_all4980: 'p13_all4980',
  p13_all4985: 'p13_all4985',
  p13_all4986: 'p13_all4986',
  p13_all5012: 'p13_all5012',
  p13_all5020: 'p13_all5020',
  p13_all5043: 'p13_all5043',
  p13_all5320: 'p13_all5320',
  p13_all5361: 'p13_all5361',
  p13_all5420: 'p13_all5420',
  p13_all5740: 'p13_all5740',
  p13_all5770: 'p13_all5770',
  p13_all5820: 'p13_all5820',
  p13_all6203: 'p13_all6203',
  p13_all6210: 'p13_all6210',
  p13_all6220: 'p13_all6220',
  p13_all6230: 'p13_all6230',
  p13_all6250: 'p13_all6250',
  p13_all6400: 'p13_all6400',
  p13_all6460: 'p13_all6460',
  p13_all6900: 'p13_all6900',
  p13_all6970: 'p13_all6970',
  p13_all6980: 'p13_all6980',
  p13_all7110: 'p13_all7110',
  p13_all7116: 'p13_all7116',
  p13_all7120: 'p13_all7120',
  p13_all7320: 'p13_all7320',
  p13_all7332: 'p13_all7332',
  p13_all7440: 'p13_all7440',
  p13_all7442: 'p13_all7442',
  p13_all7444: 'p13_all7444',
  p13_all7450: 'p13_all7450',
  p13_all7460: 'p13_all7460',
  p13_all7516: 'p13_all7516',
  p13_all7517: 'p13_all7517',
  p13_all7642: 'p13_all7642',
  p13_all8020: 'p13_all8020',
  p13_all8120: 'p13_all8120',
  p13_all8150: 'p13_all8150',
  p13_all8151: 'p13_all8151',
  p13_all8152: 'p13_all8152',
  p13_all8153: 'p13_all8153',
  p13_all8157: 'p13_all8157',
  p13_all8160: 'p13_all8160',
  p13_all8220: 'p13_all8220',
  p13_all8221: 'p13_all8221',
  p13_all8320: 'p13_all8320',
  p13_all8321: 'p13_all8321',
  p13_all8552: 'p13_all8552',
  p13_all8560: 'p13_all8560',
  p13_all9110: 'p13_all9110',
  p13_all9120: 'p13_all9120',
  p13_all9140: 'p13_all9140',
  p13_all9210: 'p13_all9210',
  p13_all9220: 'p13_all9220',
  p13_alm2120: 'p13_alm2120',
  p13_alm2126: 'p13_alm2126',
  p13_alm2310: 'p13_alm2310',
  p13_alm2316: 'p13_alm2316',
  p13_alm2317: 'p13_alm2317',
  p13_alm2318: 'p13_alm2318',
  p13_alm2323: 'p13_alm2323',
  p13_alm2340: 'p13_alm2340',
  p13_alm2347: 'p13_alm2347',
  p13_alm2348: 'p13_alm2348',
  p13_alm2353: 'p13_alm2353',
  p13_alm2370: 'p13_alm2370',
  p13_alm2378: 'p13_alm2378',
  p13_alm2411: 'p13_alm2411',
  p13_alm2417: 'p13_alm2417',
  p13_alm2419: 'p13_alm2419',
  p13_alm2432: 'p13_alm2432',
  p13_alm2445: 'p13_alm2445',
  p13_alm2494: 'p13_alm2494',
  p13_alm2499: 'p13_alm2499'
} as const

export type Xpn_attributes_all_tradelinesScalarFieldEnum = (typeof Xpn_attributes_all_tradelinesScalarFieldEnum)[keyof typeof Xpn_attributes_all_tradelinesScalarFieldEnum]


export const Xpn_attributes_all_tradelines_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  p13_all0135: 'p13_all0135',
  p13_all0300: 'p13_all0300',
  p13_all0302: 'p13_all0302',
  p13_all0316: 'p13_all0316',
  p13_all0336: 'p13_all0336',
  p13_all0416: 'p13_all0416',
  p13_all0436: 'p13_all0436',
  p13_all0437: 'p13_all0437',
  p13_all0438: 'p13_all0438',
  p13_all0448: 'p13_all0448',
  p13_all1300: 'p13_all1300',
  p13_all1361: 'p13_all1361',
  p13_all1371: 'p13_all1371',
  p13_all1380: 'p13_all1380',
  p13_all2011: 'p13_all2011',
  p13_all2106: 'p13_all2106',
  p13_all2136: 'p13_all2136',
  p13_all2181: 'p13_all2181',
  p13_all2182: 'p13_all2182',
  p13_all2183: 'p13_all2183',
  p13_all2184: 'p13_all2184',
  p13_all2411: 'p13_all2411',
  p13_all2420: 'p13_all2420',
  p13_all2421: 'p13_all2421',
  p13_all2422: 'p13_all2422',
  p13_all2428: 'p13_all2428',
  p13_all2432: 'p13_all2432',
  p13_all2442: 'p13_all2442',
  p13_all2450: 'p13_all2450',
  p13_all2461: 'p13_all2461',
  p13_all2480: 'p13_all2480',
  p13_all2488: 'p13_all2488',
  p13_all2490: 'p13_all2490',
  p13_all2494: 'p13_all2494',
  p13_all2633: 'p13_all2633',
  p13_all2639: 'p13_all2639',
  p13_all2677: 'p13_all2677',
  p13_all2695: 'p13_all2695',
  p13_all2840: 'p13_all2840',
  p13_all2841: 'p13_all2841',
  p13_all2870: 'p13_all2870',
  p13_all2900: 'p13_all2900',
  p13_all2906: 'p13_all2906',
  p13_all2908: 'p13_all2908',
  p13_all2930: 'p13_all2930',
  p13_all2938: 'p13_all2938',
  p13_all3110: 'p13_all3110',
  p13_all3510: 'p13_all3510',
  p13_all3517: 'p13_all3517',
  p13_all4070: 'p13_all4070',
  p13_all4080: 'p13_all4080',
  p13_all4380: 'p13_all4380',
  p13_all4780: 'p13_all4780',
  p13_all4975: 'p13_all4975',
  p13_all4976: 'p13_all4976',
  p13_all4980: 'p13_all4980',
  p13_all4985: 'p13_all4985',
  p13_all4986: 'p13_all4986',
  p13_all5012: 'p13_all5012',
  p13_all5020: 'p13_all5020',
  p13_all5043: 'p13_all5043',
  p13_all5320: 'p13_all5320',
  p13_all5361: 'p13_all5361',
  p13_all5420: 'p13_all5420',
  p13_all5740: 'p13_all5740',
  p13_all5770: 'p13_all5770',
  p13_all5820: 'p13_all5820',
  p13_all6203: 'p13_all6203',
  p13_all6210: 'p13_all6210',
  p13_all6220: 'p13_all6220',
  p13_all6230: 'p13_all6230',
  p13_all6250: 'p13_all6250',
  p13_all6400: 'p13_all6400',
  p13_all6460: 'p13_all6460',
  p13_all6900: 'p13_all6900',
  p13_all6970: 'p13_all6970',
  p13_all6980: 'p13_all6980',
  p13_all7110: 'p13_all7110',
  p13_all7116: 'p13_all7116',
  p13_all7120: 'p13_all7120',
  p13_all7320: 'p13_all7320',
  p13_all7332: 'p13_all7332',
  p13_all7440: 'p13_all7440',
  p13_all7442: 'p13_all7442',
  p13_all7444: 'p13_all7444',
  p13_all7450: 'p13_all7450',
  p13_all7460: 'p13_all7460',
  p13_all7516: 'p13_all7516',
  p13_all7517: 'p13_all7517',
  p13_all7642: 'p13_all7642',
  p13_all8020: 'p13_all8020',
  p13_all8120: 'p13_all8120',
  p13_all8150: 'p13_all8150',
  p13_all8151: 'p13_all8151',
  p13_all8152: 'p13_all8152',
  p13_all8153: 'p13_all8153',
  p13_all8157: 'p13_all8157',
  p13_all8160: 'p13_all8160',
  p13_all8220: 'p13_all8220',
  p13_all8221: 'p13_all8221',
  p13_all8320: 'p13_all8320',
  p13_all8321: 'p13_all8321',
  p13_all8552: 'p13_all8552',
  p13_all8560: 'p13_all8560',
  p13_all9110: 'p13_all9110',
  p13_all9120: 'p13_all9120',
  p13_all9140: 'p13_all9140',
  p13_all9210: 'p13_all9210',
  p13_all9220: 'p13_all9220',
  p13_alm2120: 'p13_alm2120',
  p13_alm2126: 'p13_alm2126',
  p13_alm2310: 'p13_alm2310',
  p13_alm2316: 'p13_alm2316',
  p13_alm2317: 'p13_alm2317',
  p13_alm2318: 'p13_alm2318',
  p13_alm2323: 'p13_alm2323',
  p13_alm2340: 'p13_alm2340',
  p13_alm2347: 'p13_alm2347',
  p13_alm2348: 'p13_alm2348',
  p13_alm2353: 'p13_alm2353',
  p13_alm2370: 'p13_alm2370',
  p13_alm2378: 'p13_alm2378',
  p13_alm2411: 'p13_alm2411',
  p13_alm2417: 'p13_alm2417',
  p13_alm2419: 'p13_alm2419',
  p13_alm2432: 'p13_alm2432',
  p13_alm2445: 'p13_alm2445',
  p13_alm2494: 'p13_alm2494',
  p13_alm2499: 'p13_alm2499'
} as const

export type Xpn_attributes_all_tradelines_stagingScalarFieldEnum = (typeof Xpn_attributes_all_tradelines_stagingScalarFieldEnum)[keyof typeof Xpn_attributes_all_tradelines_stagingScalarFieldEnum]


export const Xpn_attributes_non_revolvingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  p13_aua0300: 'p13_aua0300',
  p13_aua0416: 'p13_aua0416',
  p13_aua0426: 'p13_aua0426',
  p13_aua0436: 'p13_aua0436',
  p13_aua0437: 'p13_aua0437',
  p13_aua0438: 'p13_aua0438',
  p13_aua1300: 'p13_aua1300',
  p13_aua1380: 'p13_aua1380',
  p13_aua2320: 'p13_aua2320',
  p13_aua2328: 'p13_aua2328',
  p13_aua2350: 'p13_aua2350',
  p13_aua2358: 'p13_aua2358',
  p13_aua2388: 'p13_aua2388',
  p13_aua2800: 'p13_aua2800',
  p13_aua5020: 'p13_aua5020',
  p13_aua5320: 'p13_aua5320',
  p13_aua5400: 'p13_aua5400',
  p13_aua5420: 'p13_aua5420',
  p13_aua5520: 'p13_aua5520',
  p13_aua5820: 'p13_aua5820',
  p13_aua6160: 'p13_aua6160',
  p13_aua6200: 'p13_aua6200',
  p13_aua6280: 'p13_aua6280',
  p13_aua8120: 'p13_aua8120',
  p13_aua8220: 'p13_aua8220',
  p13_aua8320: 'p13_aua8320',
  p13_aul0300: 'p13_aul0300',
  p13_aul0436: 'p13_aul0436',
  p13_aul4180: 'p13_aul4180',
  p13_aul5020: 'p13_aul5020',
  p13_aul5320: 'p13_aul5320',
  p13_aul5820: 'p13_aul5820',
  p13_aul8140: 'p13_aul8140',
  p13_aut0300: 'p13_aut0300',
  p13_aut0436: 'p13_aut0436',
  p13_aut4180: 'p13_aut4180',
  p13_aut5020: 'p13_aut5020',
  p13_aut5120: 'p13_aut5120',
  p13_aut5122: 'p13_aut5122',
  p13_aut5620: 'p13_aut5620',
  p13_aut7110: 'p13_aut7110',
  p13_aut8140: 'p13_aut8140',
  p13_aut8220: 'p13_aut8220',
  p13_hlc0300: 'p13_hlc0300',
  p13_hlc0401: 'p13_hlc0401',
  p13_hlc0416: 'p13_hlc0416',
  p13_hlc0436: 'p13_hlc0436',
  p13_hlc2328: 'p13_hlc2328',
  p13_hlc2358: 'p13_hlc2358',
  p13_hlc2388: 'p13_hlc2388',
  p13_hlc5020: 'p13_hlc5020',
  p13_hlc5021: 'p13_hlc5021',
  p13_hlc5030: 'p13_hlc5030',
  p13_hlc5320: 'p13_hlc5320',
  p13_hlc5420: 'p13_hlc5420',
  p13_hlc5520: 'p13_hlc5520',
  p13_hlc5620: 'p13_hlc5620',
  p13_hlc5830: 'p13_hlc5830',
  p13_hlc6201: 'p13_hlc6201',
  p13_hlc7110: 'p13_hlc7110',
  p13_hlc7117: 'p13_hlc7117',
  p13_hlc8120: 'p13_hlc8120',
  p13_hlc8220: 'p13_hlc8220',
  p13_hlc8320: 'p13_hlc8320',
  p13_iln0300: 'p13_iln0300',
  p13_iln0416: 'p13_iln0416',
  p13_iln0426: 'p13_iln0426',
  p13_iln0436: 'p13_iln0436',
  p13_iln0437: 'p13_iln0437',
  p13_iln0438: 'p13_iln0438',
  p13_iln1300: 'p13_iln1300',
  p13_iln1360: 'p13_iln1360',
  p13_iln1370: 'p13_iln1370',
  p13_iln1380: 'p13_iln1380',
  p13_iln2106: 'p13_iln2106',
  p13_iln2136: 'p13_iln2136',
  p13_iln2176: 'p13_iln2176',
  p13_iln2206: 'p13_iln2206',
  p13_iln2320: 'p13_iln2320',
  p13_iln2326: 'p13_iln2326',
  p13_iln2327: 'p13_iln2327',
  p13_iln2328: 'p13_iln2328',
  p13_iln2350: 'p13_iln2350',
  p13_iln2356: 'p13_iln2356',
  p13_iln2357: 'p13_iln2357',
  p13_iln2358: 'p13_iln2358',
  p13_iln2380: 'p13_iln2380',
  p13_iln2386: 'p13_iln2386',
  p13_iln2387: 'p13_iln2387',
  p13_iln2388: 'p13_iln2388',
  p13_iln2800: 'p13_iln2800',
  p13_iln4070: 'p13_iln4070',
  p13_iln4080: 'p13_iln4080',
  p13_iln4370: 'p13_iln4370',
  p13_iln4380: 'p13_iln4380',
  p13_iln4770: 'p13_iln4770',
  p13_iln4780: 'p13_iln4780',
  p13_iln4975: 'p13_iln4975',
  p13_iln4976: 'p13_iln4976',
  p13_iln4985: 'p13_iln4985',
  p13_iln4986: 'p13_iln4986',
  p13_iln5020: 'p13_iln5020',
  p13_iln5040: 'p13_iln5040',
  p13_iln5043: 'p13_iln5043',
  p13_iln5047: 'p13_iln5047',
  p13_iln5070: 'p13_iln5070',
  p13_iln5320: 'p13_iln5320',
  p13_iln5400: 'p13_iln5400',
  p13_iln5420: 'p13_iln5420',
  p13_iln5520: 'p13_iln5520',
  p13_iln5740: 'p13_iln5740',
  p13_iln5743: 'p13_iln5743',
  p13_iln5747: 'p13_iln5747',
  p13_iln5770: 'p13_iln5770',
  p13_iln5820: 'p13_iln5820',
  p13_iln5823: 'p13_iln5823',
  p13_iln5824: 'p13_iln5824',
  p13_iln6160: 'p13_iln6160',
  p13_iln6200: 'p13_iln6200',
  p13_iln6210: 'p13_iln6210',
  p13_iln6220: 'p13_iln6220',
  p13_iln6230: 'p13_iln6230',
  p13_iln6270: 'p13_iln6270',
  p13_iln6280: 'p13_iln6280',
  p13_iln7110: 'p13_iln7110',
  p13_iln7310: 'p13_iln7310',
  p13_iln7410: 'p13_iln7410',
  p13_iln7430: 'p13_iln7430',
  p13_iln7436: 'p13_iln7436',
  p13_iln7437: 'p13_iln7437',
  p13_iln7438: 'p13_iln7438',
  p13_iln7440: 'p13_iln7440',
  p13_iln7450: 'p13_iln7450',
  p13_iln7460: 'p13_iln7460',
  p13_iln7470: 'p13_iln7470',
  p13_iln8120: 'p13_iln8120',
  p13_iln8140: 'p13_iln8140',
  p13_iln8150: 'p13_iln8150',
  p13_iln8151: 'p13_iln8151',
  p13_iln8153: 'p13_iln8153',
  p13_iln8157: 'p13_iln8157',
  p13_iln8160: 'p13_iln8160',
  p13_iln8220: 'p13_iln8220',
  p13_iln8320: 'p13_iln8320',
  p13_mta0300: 'p13_mta0300',
  p13_mta0304: 'p13_mta0304',
  p13_mta0416: 'p13_mta0416',
  p13_mta0437: 'p13_mta0437',
  p13_mta0438: 'p13_mta0438',
  p13_mta1300: 'p13_mta1300',
  p13_mta1360: 'p13_mta1360',
  p13_mta1370: 'p13_mta1370',
  p13_mta1380: 'p13_mta1380',
  p13_mta2106: 'p13_mta2106',
  p13_mta2136: 'p13_mta2136',
  p13_mta2176: 'p13_mta2176',
  p13_mta2206: 'p13_mta2206',
  p13_mta2320: 'p13_mta2320',
  p13_mta2326: 'p13_mta2326',
  p13_mta2327: 'p13_mta2327',
  p13_mta2328: 'p13_mta2328',
  p13_mta2350: 'p13_mta2350',
  p13_mta2356: 'p13_mta2356',
  p13_mta2357: 'p13_mta2357',
  p13_mta2358: 'p13_mta2358',
  p13_mta2380: 'p13_mta2380',
  p13_mta2386: 'p13_mta2386',
  p13_mta2387: 'p13_mta2387',
  p13_mta2388: 'p13_mta2388',
  p13_mta2800: 'p13_mta2800',
  p13_mta4070: 'p13_mta4070',
  p13_mta4080: 'p13_mta4080',
  p13_mta4370: 'p13_mta4370',
  p13_mta4380: 'p13_mta4380',
  p13_mta4770: 'p13_mta4770',
  p13_mta4780: 'p13_mta4780',
  p13_mta5020: 'p13_mta5020',
  p13_mta5030: 'p13_mta5030',
  p13_mta5040: 'p13_mta5040',
  p13_mta5043: 'p13_mta5043',
  p13_mta5047: 'p13_mta5047',
  p13_mta5070: 'p13_mta5070',
  p13_mta5320: 'p13_mta5320',
  p13_mta5400: 'p13_mta5400',
  p13_mta5420: 'p13_mta5420',
  p13_mta5740: 'p13_mta5740',
  p13_mta5743: 'p13_mta5743',
  p13_mta5747: 'p13_mta5747',
  p13_mta5770: 'p13_mta5770',
  p13_mta5830: 'p13_mta5830',
  p13_mta6160: 'p13_mta6160',
  p13_mta6200: 'p13_mta6200',
  p13_mta6210: 'p13_mta6210',
  p13_mta6220: 'p13_mta6220',
  p13_mta6230: 'p13_mta6230',
  p13_mta6280: 'p13_mta6280',
  p13_mta7410: 'p13_mta7410',
  p13_mta7430: 'p13_mta7430',
  p13_mta7436: 'p13_mta7436',
  p13_mta7437: 'p13_mta7437',
  p13_mta7438: 'p13_mta7438',
  p13_mta7440: 'p13_mta7440',
  p13_mta7450: 'p13_mta7450',
  p13_mta7460: 'p13_mta7460',
  p13_mta7470: 'p13_mta7470',
  p13_mta8120: 'p13_mta8120',
  p13_mta8150: 'p13_mta8150',
  p13_mta8151: 'p13_mta8151',
  p13_mta8153: 'p13_mta8153',
  p13_mta8157: 'p13_mta8157',
  p13_mta8160: 'p13_mta8160',
  p13_mta8220: 'p13_mta8220',
  p13_mtf0153: 'p13_mtf0153',
  p13_mtf0154: 'p13_mtf0154',
  p13_mtf0155: 'p13_mtf0155',
  p13_mtf0156: 'p13_mtf0156',
  p13_mtf0157: 'p13_mtf0157',
  p13_mtf0300: 'p13_mtf0300',
  p13_mtf0416: 'p13_mtf0416',
  p13_mtf1300: 'p13_mtf1300',
  p13_mtf2000: 'p13_mtf2000',
  p13_mtf2350: 'p13_mtf2350',
  p13_mtf2358: 'p13_mtf2358',
  p13_mtf2860: 'p13_mtf2860',
  p13_mtf2861: 'p13_mtf2861',
  p13_mtf2930: 'p13_mtf2930',
  p13_mtf2936: 'p13_mtf2936',
  p13_mtf2960: 'p13_mtf2960',
  p13_mtf4180: 'p13_mtf4180',
  p13_mtf5020: 'p13_mtf5020',
  p13_mtf5121: 'p13_mtf5121',
  p13_mtf5320: 'p13_mtf5320',
  p13_mtf5420: 'p13_mtf5420',
  p13_mtf5421: 'p13_mtf5421',
  p13_mtf5620: 'p13_mtf5620',
  p13_mtf5820: 'p13_mtf5820',
  p13_mtf6200: 'p13_mtf6200',
  p13_mtf7110: 'p13_mtf7110',
  p13_mtf8120: 'p13_mtf8120',
  p13_mtf8151: 'p13_mtf8151',
  p13_mtf8220: 'p13_mtf8220',
  p13_mts5020: 'p13_mts5020',
  p13_pil0300: 'p13_pil0300',
  p13_pil0438: 'p13_pil0438',
  p13_pil2328: 'p13_pil2328',
  p13_pil5020: 'p13_pil5020',
  p13_pil6200: 'p13_pil6200',
  p13_pil8220: 'p13_pil8220',
  p13_rti0300: 'p13_rti0300',
  p13_rti0436: 'p13_rti0436',
  p13_rti4180: 'p13_rti4180',
  p13_rti5020: 'p13_rti5020',
  p13_rti5320: 'p13_rti5320',
  p13_rti5820: 'p13_rti5820',
  p13_stu0300: 'p13_stu0300',
  p13_stu0416: 'p13_stu0416',
  p13_stu0436: 'p13_stu0436',
  p13_stu1100: 'p13_stu1100',
  p13_stu2550: 'p13_stu2550',
  p13_stu2558: 'p13_stu2558',
  p13_stu2580: 'p13_stu2580',
  p13_stu2588: 'p13_stu2588',
  p13_stu4180: 'p13_stu4180',
  p13_stu5020: 'p13_stu5020',
  p13_stu5031: 'p13_stu5031',
  p13_stu5120: 'p13_stu5120',
  p13_stu5127: 'p13_stu5127',
  p13_stu5320: 'p13_stu5320',
  p13_stu5327: 'p13_stu5327',
  p13_stu5420: 'p13_stu5420',
  p13_stu5424: 'p13_stu5424',
  p13_stu5820: 'p13_stu5820',
  p13_stu6200: 'p13_stu6200',
  p13_stu6280: 'p13_stu6280',
  p13_stu8151: 'p13_stu8151',
  p13_stu8320: 'p13_stu8320',
  p13_upl0300: 'p13_upl0300',
  p13_upl0416: 'p13_upl0416',
  p13_upl0436: 'p13_upl0436',
  p13_upl0437: 'p13_upl0437',
  p13_upl1300: 'p13_upl1300',
  p13_upl2320: 'p13_upl2320',
  p13_upl5020: 'p13_upl5020',
  p13_upl5820: 'p13_upl5820',
  p13_upl8120: 'p13_upl8120',
  p13_uti0436: 'p13_uti0436',
  p13_uti2388: 'p13_uti2388',
  p13_uti4180: 'p13_uti4180',
  p13_uti6200: 'p13_uti6200',
  p13_uti6280: 'p13_uti6280'
} as const

export type Xpn_attributes_non_revolvingScalarFieldEnum = (typeof Xpn_attributes_non_revolvingScalarFieldEnum)[keyof typeof Xpn_attributes_non_revolvingScalarFieldEnum]


export const Xpn_attributes_non_revolving_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  p13_aua0300: 'p13_aua0300',
  p13_aua0416: 'p13_aua0416',
  p13_aua0426: 'p13_aua0426',
  p13_aua0436: 'p13_aua0436',
  p13_aua0437: 'p13_aua0437',
  p13_aua0438: 'p13_aua0438',
  p13_aua1300: 'p13_aua1300',
  p13_aua1380: 'p13_aua1380',
  p13_aua2320: 'p13_aua2320',
  p13_aua2328: 'p13_aua2328',
  p13_aua2350: 'p13_aua2350',
  p13_aua2358: 'p13_aua2358',
  p13_aua2388: 'p13_aua2388',
  p13_aua2800: 'p13_aua2800',
  p13_aua5020: 'p13_aua5020',
  p13_aua5320: 'p13_aua5320',
  p13_aua5400: 'p13_aua5400',
  p13_aua5420: 'p13_aua5420',
  p13_aua5520: 'p13_aua5520',
  p13_aua5820: 'p13_aua5820',
  p13_aua6160: 'p13_aua6160',
  p13_aua6200: 'p13_aua6200',
  p13_aua6280: 'p13_aua6280',
  p13_aua8120: 'p13_aua8120',
  p13_aua8220: 'p13_aua8220',
  p13_aua8320: 'p13_aua8320',
  p13_aul0300: 'p13_aul0300',
  p13_aul0436: 'p13_aul0436',
  p13_aul4180: 'p13_aul4180',
  p13_aul5020: 'p13_aul5020',
  p13_aul5320: 'p13_aul5320',
  p13_aul5820: 'p13_aul5820',
  p13_aul8140: 'p13_aul8140',
  p13_aut0300: 'p13_aut0300',
  p13_aut0436: 'p13_aut0436',
  p13_aut4180: 'p13_aut4180',
  p13_aut5020: 'p13_aut5020',
  p13_aut5120: 'p13_aut5120',
  p13_aut5122: 'p13_aut5122',
  p13_aut5620: 'p13_aut5620',
  p13_aut7110: 'p13_aut7110',
  p13_aut8140: 'p13_aut8140',
  p13_aut8220: 'p13_aut8220',
  p13_hlc0300: 'p13_hlc0300',
  p13_hlc0401: 'p13_hlc0401',
  p13_hlc0416: 'p13_hlc0416',
  p13_hlc0436: 'p13_hlc0436',
  p13_hlc2328: 'p13_hlc2328',
  p13_hlc2358: 'p13_hlc2358',
  p13_hlc2388: 'p13_hlc2388',
  p13_hlc5020: 'p13_hlc5020',
  p13_hlc5021: 'p13_hlc5021',
  p13_hlc5030: 'p13_hlc5030',
  p13_hlc5320: 'p13_hlc5320',
  p13_hlc5420: 'p13_hlc5420',
  p13_hlc5520: 'p13_hlc5520',
  p13_hlc5620: 'p13_hlc5620',
  p13_hlc5830: 'p13_hlc5830',
  p13_hlc6201: 'p13_hlc6201',
  p13_hlc7110: 'p13_hlc7110',
  p13_hlc7117: 'p13_hlc7117',
  p13_hlc8120: 'p13_hlc8120',
  p13_hlc8220: 'p13_hlc8220',
  p13_hlc8320: 'p13_hlc8320',
  p13_iln0300: 'p13_iln0300',
  p13_iln0416: 'p13_iln0416',
  p13_iln0426: 'p13_iln0426',
  p13_iln0436: 'p13_iln0436',
  p13_iln0437: 'p13_iln0437',
  p13_iln0438: 'p13_iln0438',
  p13_iln1300: 'p13_iln1300',
  p13_iln1360: 'p13_iln1360',
  p13_iln1370: 'p13_iln1370',
  p13_iln1380: 'p13_iln1380',
  p13_iln2106: 'p13_iln2106',
  p13_iln2136: 'p13_iln2136',
  p13_iln2176: 'p13_iln2176',
  p13_iln2206: 'p13_iln2206',
  p13_iln2320: 'p13_iln2320',
  p13_iln2326: 'p13_iln2326',
  p13_iln2327: 'p13_iln2327',
  p13_iln2328: 'p13_iln2328',
  p13_iln2350: 'p13_iln2350',
  p13_iln2356: 'p13_iln2356',
  p13_iln2357: 'p13_iln2357',
  p13_iln2358: 'p13_iln2358',
  p13_iln2380: 'p13_iln2380',
  p13_iln2386: 'p13_iln2386',
  p13_iln2387: 'p13_iln2387',
  p13_iln2388: 'p13_iln2388',
  p13_iln2800: 'p13_iln2800',
  p13_iln4070: 'p13_iln4070',
  p13_iln4080: 'p13_iln4080',
  p13_iln4370: 'p13_iln4370',
  p13_iln4380: 'p13_iln4380',
  p13_iln4770: 'p13_iln4770',
  p13_iln4780: 'p13_iln4780',
  p13_iln4975: 'p13_iln4975',
  p13_iln4976: 'p13_iln4976',
  p13_iln4985: 'p13_iln4985',
  p13_iln4986: 'p13_iln4986',
  p13_iln5020: 'p13_iln5020',
  p13_iln5040: 'p13_iln5040',
  p13_iln5043: 'p13_iln5043',
  p13_iln5047: 'p13_iln5047',
  p13_iln5070: 'p13_iln5070',
  p13_iln5320: 'p13_iln5320',
  p13_iln5400: 'p13_iln5400',
  p13_iln5420: 'p13_iln5420',
  p13_iln5520: 'p13_iln5520',
  p13_iln5740: 'p13_iln5740',
  p13_iln5743: 'p13_iln5743',
  p13_iln5747: 'p13_iln5747',
  p13_iln5770: 'p13_iln5770',
  p13_iln5820: 'p13_iln5820',
  p13_iln5823: 'p13_iln5823',
  p13_iln5824: 'p13_iln5824',
  p13_iln6160: 'p13_iln6160',
  p13_iln6200: 'p13_iln6200',
  p13_iln6210: 'p13_iln6210',
  p13_iln6220: 'p13_iln6220',
  p13_iln6230: 'p13_iln6230',
  p13_iln6270: 'p13_iln6270',
  p13_iln6280: 'p13_iln6280',
  p13_iln7110: 'p13_iln7110',
  p13_iln7310: 'p13_iln7310',
  p13_iln7410: 'p13_iln7410',
  p13_iln7430: 'p13_iln7430',
  p13_iln7436: 'p13_iln7436',
  p13_iln7437: 'p13_iln7437',
  p13_iln7438: 'p13_iln7438',
  p13_iln7440: 'p13_iln7440',
  p13_iln7450: 'p13_iln7450',
  p13_iln7460: 'p13_iln7460',
  p13_iln7470: 'p13_iln7470',
  p13_iln8120: 'p13_iln8120',
  p13_iln8140: 'p13_iln8140',
  p13_iln8150: 'p13_iln8150',
  p13_iln8151: 'p13_iln8151',
  p13_iln8153: 'p13_iln8153',
  p13_iln8157: 'p13_iln8157',
  p13_iln8160: 'p13_iln8160',
  p13_iln8220: 'p13_iln8220',
  p13_iln8320: 'p13_iln8320',
  p13_mta0300: 'p13_mta0300',
  p13_mta0304: 'p13_mta0304',
  p13_mta0416: 'p13_mta0416',
  p13_mta0437: 'p13_mta0437',
  p13_mta0438: 'p13_mta0438',
  p13_mta1300: 'p13_mta1300',
  p13_mta1360: 'p13_mta1360',
  p13_mta1370: 'p13_mta1370',
  p13_mta1380: 'p13_mta1380',
  p13_mta2106: 'p13_mta2106',
  p13_mta2136: 'p13_mta2136',
  p13_mta2176: 'p13_mta2176',
  p13_mta2206: 'p13_mta2206',
  p13_mta2320: 'p13_mta2320',
  p13_mta2326: 'p13_mta2326',
  p13_mta2327: 'p13_mta2327',
  p13_mta2328: 'p13_mta2328',
  p13_mta2350: 'p13_mta2350',
  p13_mta2356: 'p13_mta2356',
  p13_mta2357: 'p13_mta2357',
  p13_mta2358: 'p13_mta2358',
  p13_mta2380: 'p13_mta2380',
  p13_mta2386: 'p13_mta2386',
  p13_mta2387: 'p13_mta2387',
  p13_mta2388: 'p13_mta2388',
  p13_mta2800: 'p13_mta2800',
  p13_mta4070: 'p13_mta4070',
  p13_mta4080: 'p13_mta4080',
  p13_mta4370: 'p13_mta4370',
  p13_mta4380: 'p13_mta4380',
  p13_mta4770: 'p13_mta4770',
  p13_mta4780: 'p13_mta4780',
  p13_mta5020: 'p13_mta5020',
  p13_mta5030: 'p13_mta5030',
  p13_mta5040: 'p13_mta5040',
  p13_mta5043: 'p13_mta5043',
  p13_mta5047: 'p13_mta5047',
  p13_mta5070: 'p13_mta5070',
  p13_mta5320: 'p13_mta5320',
  p13_mta5400: 'p13_mta5400',
  p13_mta5420: 'p13_mta5420',
  p13_mta5740: 'p13_mta5740',
  p13_mta5743: 'p13_mta5743',
  p13_mta5747: 'p13_mta5747',
  p13_mta5770: 'p13_mta5770',
  p13_mta5830: 'p13_mta5830',
  p13_mta6160: 'p13_mta6160',
  p13_mta6200: 'p13_mta6200',
  p13_mta6210: 'p13_mta6210',
  p13_mta6220: 'p13_mta6220',
  p13_mta6230: 'p13_mta6230',
  p13_mta6280: 'p13_mta6280',
  p13_mta7410: 'p13_mta7410',
  p13_mta7430: 'p13_mta7430',
  p13_mta7436: 'p13_mta7436',
  p13_mta7437: 'p13_mta7437',
  p13_mta7438: 'p13_mta7438',
  p13_mta7440: 'p13_mta7440',
  p13_mta7450: 'p13_mta7450',
  p13_mta7460: 'p13_mta7460',
  p13_mta7470: 'p13_mta7470',
  p13_mta8120: 'p13_mta8120',
  p13_mta8150: 'p13_mta8150',
  p13_mta8151: 'p13_mta8151',
  p13_mta8153: 'p13_mta8153',
  p13_mta8157: 'p13_mta8157',
  p13_mta8160: 'p13_mta8160',
  p13_mta8220: 'p13_mta8220',
  p13_mtf0153: 'p13_mtf0153',
  p13_mtf0154: 'p13_mtf0154',
  p13_mtf0155: 'p13_mtf0155',
  p13_mtf0156: 'p13_mtf0156',
  p13_mtf0157: 'p13_mtf0157',
  p13_mtf0300: 'p13_mtf0300',
  p13_mtf0416: 'p13_mtf0416',
  p13_mtf1300: 'p13_mtf1300',
  p13_mtf2000: 'p13_mtf2000',
  p13_mtf2350: 'p13_mtf2350',
  p13_mtf2358: 'p13_mtf2358',
  p13_mtf2860: 'p13_mtf2860',
  p13_mtf2861: 'p13_mtf2861',
  p13_mtf2930: 'p13_mtf2930',
  p13_mtf2936: 'p13_mtf2936',
  p13_mtf2960: 'p13_mtf2960',
  p13_mtf4180: 'p13_mtf4180',
  p13_mtf5020: 'p13_mtf5020',
  p13_mtf5121: 'p13_mtf5121',
  p13_mtf5320: 'p13_mtf5320',
  p13_mtf5420: 'p13_mtf5420',
  p13_mtf5421: 'p13_mtf5421',
  p13_mtf5620: 'p13_mtf5620',
  p13_mtf5820: 'p13_mtf5820',
  p13_mtf6200: 'p13_mtf6200',
  p13_mtf7110: 'p13_mtf7110',
  p13_mtf8120: 'p13_mtf8120',
  p13_mtf8151: 'p13_mtf8151',
  p13_mtf8220: 'p13_mtf8220',
  p13_mts5020: 'p13_mts5020',
  p13_pil0300: 'p13_pil0300',
  p13_pil0438: 'p13_pil0438',
  p13_pil2328: 'p13_pil2328',
  p13_pil5020: 'p13_pil5020',
  p13_pil6200: 'p13_pil6200',
  p13_pil8220: 'p13_pil8220',
  p13_rti0300: 'p13_rti0300',
  p13_rti0436: 'p13_rti0436',
  p13_rti4180: 'p13_rti4180',
  p13_rti5020: 'p13_rti5020',
  p13_rti5320: 'p13_rti5320',
  p13_rti5820: 'p13_rti5820',
  p13_stu0300: 'p13_stu0300',
  p13_stu0416: 'p13_stu0416',
  p13_stu0436: 'p13_stu0436',
  p13_stu1100: 'p13_stu1100',
  p13_stu2550: 'p13_stu2550',
  p13_stu2558: 'p13_stu2558',
  p13_stu2580: 'p13_stu2580',
  p13_stu2588: 'p13_stu2588',
  p13_stu4180: 'p13_stu4180',
  p13_stu5020: 'p13_stu5020',
  p13_stu5031: 'p13_stu5031',
  p13_stu5120: 'p13_stu5120',
  p13_stu5127: 'p13_stu5127',
  p13_stu5320: 'p13_stu5320',
  p13_stu5327: 'p13_stu5327',
  p13_stu5420: 'p13_stu5420',
  p13_stu5424: 'p13_stu5424',
  p13_stu5820: 'p13_stu5820',
  p13_stu6200: 'p13_stu6200',
  p13_stu6280: 'p13_stu6280',
  p13_stu8151: 'p13_stu8151',
  p13_stu8320: 'p13_stu8320',
  p13_upl0300: 'p13_upl0300',
  p13_upl0416: 'p13_upl0416',
  p13_upl0436: 'p13_upl0436',
  p13_upl0437: 'p13_upl0437',
  p13_upl1300: 'p13_upl1300',
  p13_upl2320: 'p13_upl2320',
  p13_upl5020: 'p13_upl5020',
  p13_upl5820: 'p13_upl5820',
  p13_upl8120: 'p13_upl8120',
  p13_uti0436: 'p13_uti0436',
  p13_uti2388: 'p13_uti2388',
  p13_uti4180: 'p13_uti4180',
  p13_uti6200: 'p13_uti6200',
  p13_uti6280: 'p13_uti6280'
} as const

export type Xpn_attributes_non_revolving_stagingScalarFieldEnum = (typeof Xpn_attributes_non_revolving_stagingScalarFieldEnum)[keyof typeof Xpn_attributes_non_revolving_stagingScalarFieldEnum]


export const Xpn_attributes_otherScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  p13_col3205: 'p13_col3205',
  p13_col3206: 'p13_col3206',
  p13_col3211: 'p13_col3211',
  p13_col3217: 'p13_col3217',
  p13_col3253: 'p13_col3253',
  p13_col3254: 'p13_col3254',
  p13_col5060: 'p13_col5060',
  p13_col5066: 'p13_col5066',
  p13_col8168: 'p13_col8168',
  p13_col8191: 'p13_col8191',
  p13_col8192: 'p13_col8192',
  p13_cru0300: 'p13_cru0300',
  p13_cru0416: 'p13_cru0416',
  p13_cru0436: 'p13_cru0436',
  p13_cru1300: 'p13_cru1300',
  p13_cru2388: 'p13_cru2388',
  p13_cru4180: 'p13_cru4180',
  p13_cru5030: 'p13_cru5030',
  p13_cru5320: 'p13_cru5320',
  p13_cru6200: 'p13_cru6200',
  p13_cru6280: 'p13_cru6280',
  p13_cru8151: 'p13_cru8151',
  p13_cru8320: 'p13_cru8320',
  p13_iqa9410: 'p13_iqa9410',
  p13_iqa9415: 'p13_iqa9415',
  p13_iqa9416: 'p13_iqa9416',
  p13_iqa9417: 'p13_iqa9417',
  p13_iqa9510: 'p13_iqa9510',
  p13_iqb9410: 'p13_iqb9410',
  p13_iqb9416: 'p13_iqb9416',
  p13_iqm9410: 'p13_iqm9410',
  p13_iqm9415: 'p13_iqm9415',
  p13_iqm9416: 'p13_iqm9416',
  p13_iqm9417: 'p13_iqm9417',
  p13_iqm9510: 'p13_iqm9510',
  p13_iqr9410: 'p13_iqr9410',
  p13_iqr9415: 'p13_iqr9415',
  p13_iqr9416: 'p13_iqr9416',
  p13_iqr9417: 'p13_iqr9417',
  p13_iqr9510: 'p13_iqr9510',
  p13_iqt9410: 'p13_iqt9410',
  p13_iqt9413: 'p13_iqt9413',
  p13_iqt9415: 'p13_iqt9415',
  p13_iqt9416: 'p13_iqt9416',
  p13_iqt9417: 'p13_iqt9417',
  p13_iqt9510: 'p13_iqt9510'
} as const

export type Xpn_attributes_otherScalarFieldEnum = (typeof Xpn_attributes_otherScalarFieldEnum)[keyof typeof Xpn_attributes_otherScalarFieldEnum]


export const Xpn_attributes_other_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  p13_col3205: 'p13_col3205',
  p13_col3206: 'p13_col3206',
  p13_col3211: 'p13_col3211',
  p13_col3217: 'p13_col3217',
  p13_col3253: 'p13_col3253',
  p13_col3254: 'p13_col3254',
  p13_col5060: 'p13_col5060',
  p13_col5066: 'p13_col5066',
  p13_col8168: 'p13_col8168',
  p13_col8191: 'p13_col8191',
  p13_col8192: 'p13_col8192',
  p13_cru0300: 'p13_cru0300',
  p13_cru0416: 'p13_cru0416',
  p13_cru0436: 'p13_cru0436',
  p13_cru1300: 'p13_cru1300',
  p13_cru2388: 'p13_cru2388',
  p13_cru4180: 'p13_cru4180',
  p13_cru5030: 'p13_cru5030',
  p13_cru5320: 'p13_cru5320',
  p13_cru6200: 'p13_cru6200',
  p13_cru6280: 'p13_cru6280',
  p13_cru8151: 'p13_cru8151',
  p13_cru8320: 'p13_cru8320',
  p13_iqa9410: 'p13_iqa9410',
  p13_iqa9415: 'p13_iqa9415',
  p13_iqa9416: 'p13_iqa9416',
  p13_iqa9417: 'p13_iqa9417',
  p13_iqa9510: 'p13_iqa9510',
  p13_iqb9410: 'p13_iqb9410',
  p13_iqb9416: 'p13_iqb9416',
  p13_iqm9410: 'p13_iqm9410',
  p13_iqm9415: 'p13_iqm9415',
  p13_iqm9416: 'p13_iqm9416',
  p13_iqm9417: 'p13_iqm9417',
  p13_iqm9510: 'p13_iqm9510',
  p13_iqr9410: 'p13_iqr9410',
  p13_iqr9415: 'p13_iqr9415',
  p13_iqr9416: 'p13_iqr9416',
  p13_iqr9417: 'p13_iqr9417',
  p13_iqr9510: 'p13_iqr9510',
  p13_iqt9410: 'p13_iqt9410',
  p13_iqt9413: 'p13_iqt9413',
  p13_iqt9415: 'p13_iqt9415',
  p13_iqt9416: 'p13_iqt9416',
  p13_iqt9417: 'p13_iqt9417',
  p13_iqt9510: 'p13_iqt9510'
} as const

export type Xpn_attributes_other_stagingScalarFieldEnum = (typeof Xpn_attributes_other_stagingScalarFieldEnum)[keyof typeof Xpn_attributes_other_stagingScalarFieldEnum]


export const Xpn_attributes_revolvingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  p13_bca0436: 'p13_bca0436',
  p13_bca1300: 'p13_bca1300',
  p13_bca3510: 'p13_bca3510',
  p13_bca3511: 'p13_bca3511',
  p13_bca4180: 'p13_bca4180',
  p13_bca5020: 'p13_bca5020',
  p13_bca5030: 'p13_bca5030',
  p13_bca6200: 'p13_bca6200',
  p13_bca6210: 'p13_bca6210',
  p13_bca6280: 'p13_bca6280',
  p13_bca8120: 'p13_bca8120',
  p13_bca8150: 'p13_bca8150',
  p13_bca8151: 'p13_bca8151',
  p13_bca8153: 'p13_bca8153',
  p13_bca8157: 'p13_bca8157',
  p13_bca8160: 'p13_bca8160',
  p13_bca8220: 'p13_bca8220',
  p13_bca8320: 'p13_bca8320',
  p13_bcc0300: 'p13_bcc0300',
  p13_bcc0316: 'p13_bcc0316',
  p13_bcc0317: 'p13_bcc0317',
  p13_bcc0318: 'p13_bcc0318',
  p13_bcc0400: 'p13_bcc0400',
  p13_bcc0416: 'p13_bcc0416',
  p13_bcc0436: 'p13_bcc0436',
  p13_bcc0437: 'p13_bcc0437',
  p13_bcc0438: 'p13_bcc0438',
  p13_bcc0446: 'p13_bcc0446',
  p13_bcc1300: 'p13_bcc1300',
  p13_bcc1360: 'p13_bcc1360',
  p13_bcc1370: 'p13_bcc1370',
  p13_bcc1380: 'p13_bcc1380',
  p13_bcc2000: 'p13_bcc2000',
  p13_bcc2320: 'p13_bcc2320',
  p13_bcc2326: 'p13_bcc2326',
  p13_bcc2327: 'p13_bcc2327',
  p13_bcc2328: 'p13_bcc2328',
  p13_bcc2350: 'p13_bcc2350',
  p13_bcc2356: 'p13_bcc2356',
  p13_bcc2357: 'p13_bcc2357',
  p13_bcc2358: 'p13_bcc2358',
  p13_bcc2380: 'p13_bcc2380',
  p13_bcc2386: 'p13_bcc2386',
  p13_bcc2387: 'p13_bcc2387',
  p13_bcc2388: 'p13_bcc2388',
  p13_bcc2800: 'p13_bcc2800',
  p13_bcc2900: 'p13_bcc2900',
  p13_bcc2930: 'p13_bcc2930',
  p13_bcc3110: 'p13_bcc3110',
  p13_bcc3421: 'p13_bcc3421',
  p13_bcc3422: 'p13_bcc3422',
  p13_bcc3423: 'p13_bcc3423',
  p13_bcc3456: 'p13_bcc3456',
  p13_bcc3510: 'p13_bcc3510',
  p13_bcc3511: 'p13_bcc3511',
  p13_bcc3512: 'p13_bcc3512',
  p13_bcc3515: 'p13_bcc3515',
  p13_bcc4070: 'p13_bcc4070',
  p13_bcc4080: 'p13_bcc4080',
  p13_bcc4380: 'p13_bcc4380',
  p13_bcc4780: 'p13_bcc4780',
  p13_bcc5020: 'p13_bcc5020',
  p13_bcc5030: 'p13_bcc5030',
  p13_bcc5120: 'p13_bcc5120',
  p13_bcc5320: 'p13_bcc5320',
  p13_bcc5400: 'p13_bcc5400',
  p13_bcc5420: 'p13_bcc5420',
  p13_bcc5421: 'p13_bcc5421',
  p13_bcc5422: 'p13_bcc5422',
  p13_bcc5520: 'p13_bcc5520',
  p13_bcc5620: 'p13_bcc5620',
  p13_bcc5830: 'p13_bcc5830',
  p13_bcc6160: 'p13_bcc6160',
  p13_bcc6200: 'p13_bcc6200',
  p13_bcc6280: 'p13_bcc6280',
  p13_bcc7110: 'p13_bcc7110',
  p13_bcc7117: 'p13_bcc7117',
  p13_bcc7120: 'p13_bcc7120',
  p13_bcc7130: 'p13_bcc7130',
  p13_bcc7800: 'p13_bcc7800',
  p13_bcc8120: 'p13_bcc8120',
  p13_bcc8220: 'p13_bcc8220',
  p13_bcc8320: 'p13_bcc8320',
  p13_brc0400: 'p13_brc0400',
  p13_brc0437: 'p13_brc0437',
  p13_brc3425: 'p13_brc3425',
  p13_brc5620: 'p13_brc5620',
  p13_brc6280: 'p13_brc6280',
  p13_brc7140: 'p13_brc7140',
  p13_reh3510: 'p13_reh3510',
  p13_reh5020: 'p13_reh5020',
  p13_reh5320: 'p13_reh5320',
  p13_reh5420: 'p13_reh5420',
  p13_reh7110: 'p13_reh7110',
  p13_rev0300: 'p13_rev0300',
  p13_rev0416: 'p13_rev0416',
  p13_rev0438: 'p13_rev0438',
  p13_rev1300: 'p13_rev1300',
  p13_rev1360: 'p13_rev1360',
  p13_rev1370: 'p13_rev1370',
  p13_rev1380: 'p13_rev1380',
  p13_rev1481: 'p13_rev1481',
  p13_rev2380: 'p13_rev2380',
  p13_rev2388: 'p13_rev2388',
  p13_rev2525: 'p13_rev2525',
  p13_rev3421: 'p13_rev3421',
  p13_rev3422: 'p13_rev3422',
  p13_rev3423: 'p13_rev3423',
  p13_rev3511: 'p13_rev3511',
  p13_rev3517: 'p13_rev3517',
  p13_rev3592: 'p13_rev3592',
  p13_rev4080: 'p13_rev4080',
  p13_rev4380: 'p13_rev4380',
  p13_rev4780: 'p13_rev4780',
  p13_rev4975: 'p13_rev4975',
  p13_rev4976: 'p13_rev4976',
  p13_rev5020: 'p13_rev5020',
  p13_rev5620: 'p13_rev5620',
  p13_rev5725: 'p13_rev5725',
  p13_rev5830: 'p13_rev5830',
  p13_rev6160: 'p13_rev6160',
  p13_rev6200: 'p13_rev6200',
  p13_rev6230: 'p13_rev6230',
  p13_rev7110: 'p13_rev7110',
  p13_rev7420: 'p13_rev7420',
  p13_rev7436: 'p13_rev7436',
  p13_rev7440: 'p13_rev7440',
  p13_rev7800: 'p13_rev7800',
  p13_rev8220: 'p13_rev8220',
  p13_rev8320: 'p13_rev8320',
  p13_rta0300: 'p13_rta0300',
  p13_rta0416: 'p13_rta0416',
  p13_rta0436: 'p13_rta0436',
  p13_rta1300: 'p13_rta1300',
  p13_rta2388: 'p13_rta2388',
  p13_rta4180: 'p13_rta4180',
  p13_rta5030: 'p13_rta5030',
  p13_rta5320: 'p13_rta5320',
  p13_rta5830: 'p13_rta5830',
  p13_rta6200: 'p13_rta6200',
  p13_rta6280: 'p13_rta6280',
  p13_rta8151: 'p13_rta8151',
  p13_rta8320: 'p13_rta8320',
  p13_rtr0300: 'p13_rtr0300',
  p13_rtr0416: 'p13_rtr0416',
  p13_rtr0436: 'p13_rtr0436',
  p13_rtr0437: 'p13_rtr0437',
  p13_rtr0438: 'p13_rtr0438',
  p13_rtr1300: 'p13_rtr1300',
  p13_rtr1380: 'p13_rtr1380',
  p13_rtr2320: 'p13_rtr2320',
  p13_rtr2328: 'p13_rtr2328',
  p13_rtr2358: 'p13_rtr2358',
  p13_rtr2380: 'p13_rtr2380',
  p13_rtr2388: 'p13_rtr2388',
  p13_rtr2800: 'p13_rtr2800',
  p13_rtr3347: 'p13_rtr3347',
  p13_rtr3422: 'p13_rtr3422',
  p13_rtr3510: 'p13_rtr3510',
  p13_rtr3511: 'p13_rtr3511',
  p13_rtr5030: 'p13_rtr5030',
  p13_rtr5320: 'p13_rtr5320',
  p13_rtr5420: 'p13_rtr5420',
  p13_rtr5520: 'p13_rtr5520',
  p13_rtr5620: 'p13_rtr5620',
  p13_rtr5830: 'p13_rtr5830',
  p13_rtr6200: 'p13_rtr6200',
  p13_rtr6280: 'p13_rtr6280',
  p13_rtr7110: 'p13_rtr7110',
  p13_rtr7140: 'p13_rtr7140',
  p13_rtr8120: 'p13_rtr8120',
  p13_rtr8220: 'p13_rtr8220',
  p13_rtr8320: 'p13_rtr8320'
} as const

export type Xpn_attributes_revolvingScalarFieldEnum = (typeof Xpn_attributes_revolvingScalarFieldEnum)[keyof typeof Xpn_attributes_revolvingScalarFieldEnum]


export const Xpn_attributes_revolving_stagingScalarFieldEnum = {
  application_id: 'application_id',
  originator_number: 'originator_number',
  created_at: 'created_at',
  updated_at: 'updated_at',
  p13_bca0436: 'p13_bca0436',
  p13_bca1300: 'p13_bca1300',
  p13_bca3510: 'p13_bca3510',
  p13_bca3511: 'p13_bca3511',
  p13_bca4180: 'p13_bca4180',
  p13_bca5020: 'p13_bca5020',
  p13_bca5030: 'p13_bca5030',
  p13_bca6200: 'p13_bca6200',
  p13_bca6210: 'p13_bca6210',
  p13_bca6280: 'p13_bca6280',
  p13_bca8120: 'p13_bca8120',
  p13_bca8150: 'p13_bca8150',
  p13_bca8151: 'p13_bca8151',
  p13_bca8153: 'p13_bca8153',
  p13_bca8157: 'p13_bca8157',
  p13_bca8160: 'p13_bca8160',
  p13_bca8220: 'p13_bca8220',
  p13_bca8320: 'p13_bca8320',
  p13_bcc0300: 'p13_bcc0300',
  p13_bcc0316: 'p13_bcc0316',
  p13_bcc0317: 'p13_bcc0317',
  p13_bcc0318: 'p13_bcc0318',
  p13_bcc0400: 'p13_bcc0400',
  p13_bcc0416: 'p13_bcc0416',
  p13_bcc0436: 'p13_bcc0436',
  p13_bcc0437: 'p13_bcc0437',
  p13_bcc0438: 'p13_bcc0438',
  p13_bcc0446: 'p13_bcc0446',
  p13_bcc1300: 'p13_bcc1300',
  p13_bcc1360: 'p13_bcc1360',
  p13_bcc1370: 'p13_bcc1370',
  p13_bcc1380: 'p13_bcc1380',
  p13_bcc2000: 'p13_bcc2000',
  p13_bcc2320: 'p13_bcc2320',
  p13_bcc2326: 'p13_bcc2326',
  p13_bcc2327: 'p13_bcc2327',
  p13_bcc2328: 'p13_bcc2328',
  p13_bcc2350: 'p13_bcc2350',
  p13_bcc2356: 'p13_bcc2356',
  p13_bcc2357: 'p13_bcc2357',
  p13_bcc2358: 'p13_bcc2358',
  p13_bcc2380: 'p13_bcc2380',
  p13_bcc2386: 'p13_bcc2386',
  p13_bcc2387: 'p13_bcc2387',
  p13_bcc2388: 'p13_bcc2388',
  p13_bcc2800: 'p13_bcc2800',
  p13_bcc2900: 'p13_bcc2900',
  p13_bcc2930: 'p13_bcc2930',
  p13_bcc3110: 'p13_bcc3110',
  p13_bcc3421: 'p13_bcc3421',
  p13_bcc3422: 'p13_bcc3422',
  p13_bcc3423: 'p13_bcc3423',
  p13_bcc3456: 'p13_bcc3456',
  p13_bcc3510: 'p13_bcc3510',
  p13_bcc3511: 'p13_bcc3511',
  p13_bcc3512: 'p13_bcc3512',
  p13_bcc3515: 'p13_bcc3515',
  p13_bcc4070: 'p13_bcc4070',
  p13_bcc4080: 'p13_bcc4080',
  p13_bcc4380: 'p13_bcc4380',
  p13_bcc4780: 'p13_bcc4780',
  p13_bcc5020: 'p13_bcc5020',
  p13_bcc5030: 'p13_bcc5030',
  p13_bcc5120: 'p13_bcc5120',
  p13_bcc5320: 'p13_bcc5320',
  p13_bcc5400: 'p13_bcc5400',
  p13_bcc5420: 'p13_bcc5420',
  p13_bcc5421: 'p13_bcc5421',
  p13_bcc5422: 'p13_bcc5422',
  p13_bcc5520: 'p13_bcc5520',
  p13_bcc5620: 'p13_bcc5620',
  p13_bcc5830: 'p13_bcc5830',
  p13_bcc6160: 'p13_bcc6160',
  p13_bcc6200: 'p13_bcc6200',
  p13_bcc6280: 'p13_bcc6280',
  p13_bcc7110: 'p13_bcc7110',
  p13_bcc7117: 'p13_bcc7117',
  p13_bcc7120: 'p13_bcc7120',
  p13_bcc7130: 'p13_bcc7130',
  p13_bcc7800: 'p13_bcc7800',
  p13_bcc8120: 'p13_bcc8120',
  p13_bcc8220: 'p13_bcc8220',
  p13_bcc8320: 'p13_bcc8320',
  p13_brc0400: 'p13_brc0400',
  p13_brc0437: 'p13_brc0437',
  p13_brc3425: 'p13_brc3425',
  p13_brc5620: 'p13_brc5620',
  p13_brc6280: 'p13_brc6280',
  p13_brc7140: 'p13_brc7140',
  p13_reh3510: 'p13_reh3510',
  p13_reh5020: 'p13_reh5020',
  p13_reh5320: 'p13_reh5320',
  p13_reh5420: 'p13_reh5420',
  p13_reh7110: 'p13_reh7110',
  p13_rev0300: 'p13_rev0300',
  p13_rev0416: 'p13_rev0416',
  p13_rev0438: 'p13_rev0438',
  p13_rev1300: 'p13_rev1300',
  p13_rev1360: 'p13_rev1360',
  p13_rev1370: 'p13_rev1370',
  p13_rev1380: 'p13_rev1380',
  p13_rev1481: 'p13_rev1481',
  p13_rev2380: 'p13_rev2380',
  p13_rev2388: 'p13_rev2388',
  p13_rev2525: 'p13_rev2525',
  p13_rev3421: 'p13_rev3421',
  p13_rev3422: 'p13_rev3422',
  p13_rev3423: 'p13_rev3423',
  p13_rev3511: 'p13_rev3511',
  p13_rev3517: 'p13_rev3517',
  p13_rev3592: 'p13_rev3592',
  p13_rev4080: 'p13_rev4080',
  p13_rev4380: 'p13_rev4380',
  p13_rev4780: 'p13_rev4780',
  p13_rev4975: 'p13_rev4975',
  p13_rev4976: 'p13_rev4976',
  p13_rev5020: 'p13_rev5020',
  p13_rev5620: 'p13_rev5620',
  p13_rev5725: 'p13_rev5725',
  p13_rev5830: 'p13_rev5830',
  p13_rev6160: 'p13_rev6160',
  p13_rev6200: 'p13_rev6200',
  p13_rev6230: 'p13_rev6230',
  p13_rev7110: 'p13_rev7110',
  p13_rev7420: 'p13_rev7420',
  p13_rev7436: 'p13_rev7436',
  p13_rev7440: 'p13_rev7440',
  p13_rev7800: 'p13_rev7800',
  p13_rev8220: 'p13_rev8220',
  p13_rev8320: 'p13_rev8320',
  p13_rta0300: 'p13_rta0300',
  p13_rta0416: 'p13_rta0416',
  p13_rta0436: 'p13_rta0436',
  p13_rta1300: 'p13_rta1300',
  p13_rta2388: 'p13_rta2388',
  p13_rta4180: 'p13_rta4180',
  p13_rta5030: 'p13_rta5030',
  p13_rta5320: 'p13_rta5320',
  p13_rta5830: 'p13_rta5830',
  p13_rta6200: 'p13_rta6200',
  p13_rta6280: 'p13_rta6280',
  p13_rta8151: 'p13_rta8151',
  p13_rta8320: 'p13_rta8320',
  p13_rtr0300: 'p13_rtr0300',
  p13_rtr0416: 'p13_rtr0416',
  p13_rtr0436: 'p13_rtr0436',
  p13_rtr0437: 'p13_rtr0437',
  p13_rtr0438: 'p13_rtr0438',
  p13_rtr1300: 'p13_rtr1300',
  p13_rtr1380: 'p13_rtr1380',
  p13_rtr2320: 'p13_rtr2320',
  p13_rtr2328: 'p13_rtr2328',
  p13_rtr2358: 'p13_rtr2358',
  p13_rtr2380: 'p13_rtr2380',
  p13_rtr2388: 'p13_rtr2388',
  p13_rtr2800: 'p13_rtr2800',
  p13_rtr3347: 'p13_rtr3347',
  p13_rtr3422: 'p13_rtr3422',
  p13_rtr3510: 'p13_rtr3510',
  p13_rtr3511: 'p13_rtr3511',
  p13_rtr5030: 'p13_rtr5030',
  p13_rtr5320: 'p13_rtr5320',
  p13_rtr5420: 'p13_rtr5420',
  p13_rtr5520: 'p13_rtr5520',
  p13_rtr5620: 'p13_rtr5620',
  p13_rtr5830: 'p13_rtr5830',
  p13_rtr6200: 'p13_rtr6200',
  p13_rtr6280: 'p13_rtr6280',
  p13_rtr7110: 'p13_rtr7110',
  p13_rtr7140: 'p13_rtr7140',
  p13_rtr8120: 'p13_rtr8120',
  p13_rtr8220: 'p13_rtr8220',
  p13_rtr8320: 'p13_rtr8320'
} as const

export type Xpn_attributes_revolving_stagingScalarFieldEnum = (typeof Xpn_attributes_revolving_stagingScalarFieldEnum)[keyof typeof Xpn_attributes_revolving_stagingScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Decimal'
 */
export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


/**
 * Reference to a field of type 'Decimal[]'
 */
export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Bytes'
 */
export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


/**
 * Reference to a field of type 'Bytes[]'
 */
export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  sequelizeMeta?: Prisma.SequelizeMetaOmit
  adverse_actions?: Prisma.adverse_actionsOmit
  bankruptcy_status?: Prisma.bankruptcy_statusOmit
  bankruptcy_type?: Prisma.bankruptcy_typeOmit
  characteristic_scores?: Prisma.characteristic_scoresOmit
  charge_off_status?: Prisma.charge_off_statusOmit
  delos_crm?: Prisma.delos_crmOmit
  delos_crm_staging?: Prisma.delos_crm_stagingOmit
  factortrust_credit_attributes?: Prisma.factortrust_credit_attributesOmit
  factortrust_credit_attributes_staging?: Prisma.factortrust_credit_attributes_stagingOmit
  investor?: Prisma.investorOmit
  lexisnexis_credit_attributes?: Prisma.lexisnexis_credit_attributesOmit
  lexisnexis_credit_attributes_staging?: Prisma.lexisnexis_credit_attributes_stagingOmit
  loan?: Prisma.loanOmit
  loan_application?: Prisma.loan_applicationOmit
  loan_application_staging?: Prisma.loan_application_stagingOmit
  loan_modification?: Prisma.loan_modificationOmit
  loan_modification_staging?: Prisma.loan_modification_stagingOmit
  loan_modification_status?: Prisma.loan_modification_statusOmit
  loan_modification_type?: Prisma.loan_modification_typeOmit
  loan_product?: Prisma.loan_productOmit
  loan_staging?: Prisma.loan_stagingOmit
  loan_status?: Prisma.loan_statusOmit
  loan_transaction?: Prisma.loan_transactionOmit
  loan_transaction_staging?: Prisma.loan_transaction_stagingOmit
  loan_transaction_type?: Prisma.loan_transaction_typeOmit
  loan_trial_balance?: Prisma.loan_trial_balanceOmit
  loan_trial_balance_staging?: Prisma.loan_trial_balance_stagingOmit
  oln_credit_attributes?: Prisma.oln_credit_attributesOmit
  oln_credit_attributes_staging?: Prisma.oln_credit_attributes_stagingOmit
  originator?: Prisma.originatorOmit
  pricing_engine?: Prisma.pricing_engineOmit
  pricing_grid?: Prisma.pricing_gridOmit
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsOmit
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingOmit
  second_look_applications?: Prisma.second_look_applicationsOmit
  second_look_applications_staging?: Prisma.second_look_applications_stagingOmit
  second_look_crm?: Prisma.second_look_crmOmit
  second_look_crm_staging?: Prisma.second_look_crm_stagingOmit
  second_look_metrics?: Prisma.second_look_metricsOmit
  second_look_offers?: Prisma.second_look_offersOmit
  second_look_offers_staging?: Prisma.second_look_offers_stagingOmit
  settlement_status?: Prisma.settlement_statusOmit
  simulation_bytea?: Prisma.simulation_byteaOmit
  tu_attributes_all_tradelines?: Prisma.tu_attributes_all_tradelinesOmit
  tu_attributes_all_tradelines_staging?: Prisma.tu_attributes_all_tradelines_stagingOmit
  tu_attributes_non_revolving?: Prisma.tu_attributes_non_revolvingOmit
  tu_attributes_non_revolving_staging?: Prisma.tu_attributes_non_revolving_stagingOmit
  tu_attributes_non_standard?: Prisma.tu_attributes_non_standardOmit
  tu_attributes_non_standard_staging?: Prisma.tu_attributes_non_standard_stagingOmit
  tu_attributes_other?: Prisma.tu_attributes_otherOmit
  tu_attributes_other_staging?: Prisma.tu_attributes_other_stagingOmit
  tu_attributes_revolving?: Prisma.tu_attributes_revolvingOmit
  tu_attributes_revolving_staging?: Prisma.tu_attributes_revolving_stagingOmit
  xpn_attributes_all_tradelines?: Prisma.xpn_attributes_all_tradelinesOmit
  xpn_attributes_all_tradelines_staging?: Prisma.xpn_attributes_all_tradelines_stagingOmit
  xpn_attributes_non_revolving?: Prisma.xpn_attributes_non_revolvingOmit
  xpn_attributes_non_revolving_staging?: Prisma.xpn_attributes_non_revolving_stagingOmit
  xpn_attributes_other?: Prisma.xpn_attributes_otherOmit
  xpn_attributes_other_staging?: Prisma.xpn_attributes_other_stagingOmit
  xpn_attributes_revolving?: Prisma.xpn_attributes_revolvingOmit
  xpn_attributes_revolving_staging?: Prisma.xpn_attributes_revolving_stagingOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

