
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `bankruptcy_type` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model bankruptcy_type
 * 
 */
export type bankruptcy_typeModel = runtime.Types.Result.DefaultSelection<Prisma.$bankruptcy_typePayload>

export type AggregateBankruptcy_type = {
  _count: Bankruptcy_typeCountAggregateOutputType | null
  _avg: Bankruptcy_typeAvgAggregateOutputType | null
  _sum: Bankruptcy_typeSumAggregateOutputType | null
  _min: Bankruptcy_typeMinAggregateOutputType | null
  _max: Bankruptcy_typeMaxAggregateOutputType | null
}

export type Bankruptcy_typeAvgAggregateOutputType = {
  bankruptcy_type_number: number | null
}

export type Bankruptcy_typeSumAggregateOutputType = {
  bankruptcy_type_number: number | null
}

export type Bankruptcy_typeMinAggregateOutputType = {
  bankruptcy_type_number: number | null
  bankruptcy_type_description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type Bankruptcy_typeMaxAggregateOutputType = {
  bankruptcy_type_number: number | null
  bankruptcy_type_description: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type Bankruptcy_typeCountAggregateOutputType = {
  bankruptcy_type_number: number
  bankruptcy_type_description: number
  created_at: number
  updated_at: number
  _all: number
}


export type Bankruptcy_typeAvgAggregateInputType = {
  bankruptcy_type_number?: true
}

export type Bankruptcy_typeSumAggregateInputType = {
  bankruptcy_type_number?: true
}

export type Bankruptcy_typeMinAggregateInputType = {
  bankruptcy_type_number?: true
  bankruptcy_type_description?: true
  created_at?: true
  updated_at?: true
}

export type Bankruptcy_typeMaxAggregateInputType = {
  bankruptcy_type_number?: true
  bankruptcy_type_description?: true
  created_at?: true
  updated_at?: true
}

export type Bankruptcy_typeCountAggregateInputType = {
  bankruptcy_type_number?: true
  bankruptcy_type_description?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type Bankruptcy_typeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which bankruptcy_type to aggregate.
   */
  where?: Prisma.bankruptcy_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bankruptcy_types to fetch.
   */
  orderBy?: Prisma.bankruptcy_typeOrderByWithRelationInput | Prisma.bankruptcy_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.bankruptcy_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bankruptcy_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bankruptcy_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned bankruptcy_types
  **/
  _count?: true | Bankruptcy_typeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Bankruptcy_typeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Bankruptcy_typeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Bankruptcy_typeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Bankruptcy_typeMaxAggregateInputType
}

export type GetBankruptcy_typeAggregateType<T extends Bankruptcy_typeAggregateArgs> = {
      [P in keyof T & keyof AggregateBankruptcy_type]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBankruptcy_type[P]>
    : Prisma.GetScalarType<T[P], AggregateBankruptcy_type[P]>
}




export type bankruptcy_typeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.bankruptcy_typeWhereInput
  orderBy?: Prisma.bankruptcy_typeOrderByWithAggregationInput | Prisma.bankruptcy_typeOrderByWithAggregationInput[]
  by: Prisma.Bankruptcy_typeScalarFieldEnum[] | Prisma.Bankruptcy_typeScalarFieldEnum
  having?: Prisma.bankruptcy_typeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Bankruptcy_typeCountAggregateInputType | true
  _avg?: Bankruptcy_typeAvgAggregateInputType
  _sum?: Bankruptcy_typeSumAggregateInputType
  _min?: Bankruptcy_typeMinAggregateInputType
  _max?: Bankruptcy_typeMaxAggregateInputType
}

export type Bankruptcy_typeGroupByOutputType = {
  bankruptcy_type_number: number
  bankruptcy_type_description: string | null
  created_at: Date
  updated_at: Date | null
  _count: Bankruptcy_typeCountAggregateOutputType | null
  _avg: Bankruptcy_typeAvgAggregateOutputType | null
  _sum: Bankruptcy_typeSumAggregateOutputType | null
  _min: Bankruptcy_typeMinAggregateOutputType | null
  _max: Bankruptcy_typeMaxAggregateOutputType | null
}

type GetBankruptcy_typeGroupByPayload<T extends bankruptcy_typeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Bankruptcy_typeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Bankruptcy_typeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Bankruptcy_typeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Bankruptcy_typeGroupByOutputType[P]>
      }
    >
  >



export type bankruptcy_typeWhereInput = {
  AND?: Prisma.bankruptcy_typeWhereInput | Prisma.bankruptcy_typeWhereInput[]
  OR?: Prisma.bankruptcy_typeWhereInput[]
  NOT?: Prisma.bankruptcy_typeWhereInput | Prisma.bankruptcy_typeWhereInput[]
  bankruptcy_type_number?: Prisma.IntFilter<"bankruptcy_type"> | number
  bankruptcy_type_description?: Prisma.StringNullableFilter<"bankruptcy_type"> | string | null
  created_at?: Prisma.DateTimeFilter<"bankruptcy_type"> | Date | string
  updated_at?: Prisma.DateTimeNullableFilter<"bankruptcy_type"> | Date | string | null
  loan?: Prisma.LoanListRelationFilter
  loan_staging?: Prisma.Loan_stagingListRelationFilter
}

export type bankruptcy_typeOrderByWithRelationInput = {
  bankruptcy_type_number?: Prisma.SortOrder
  bankruptcy_type_description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  loan?: Prisma.loanOrderByRelationAggregateInput
  loan_staging?: Prisma.loan_stagingOrderByRelationAggregateInput
}

export type bankruptcy_typeWhereUniqueInput = Prisma.AtLeast<{
  bankruptcy_type_number?: number
  bankruptcy_type_description?: string
  AND?: Prisma.bankruptcy_typeWhereInput | Prisma.bankruptcy_typeWhereInput[]
  OR?: Prisma.bankruptcy_typeWhereInput[]
  NOT?: Prisma.bankruptcy_typeWhereInput | Prisma.bankruptcy_typeWhereInput[]
  created_at?: Prisma.DateTimeFilter<"bankruptcy_type"> | Date | string
  updated_at?: Prisma.DateTimeNullableFilter<"bankruptcy_type"> | Date | string | null
  loan?: Prisma.LoanListRelationFilter
  loan_staging?: Prisma.Loan_stagingListRelationFilter
}, "bankruptcy_type_number" | "bankruptcy_type_description">

export type bankruptcy_typeOrderByWithAggregationInput = {
  bankruptcy_type_number?: Prisma.SortOrder
  bankruptcy_type_description?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.bankruptcy_typeCountOrderByAggregateInput
  _avg?: Prisma.bankruptcy_typeAvgOrderByAggregateInput
  _max?: Prisma.bankruptcy_typeMaxOrderByAggregateInput
  _min?: Prisma.bankruptcy_typeMinOrderByAggregateInput
  _sum?: Prisma.bankruptcy_typeSumOrderByAggregateInput
}

export type bankruptcy_typeScalarWhereWithAggregatesInput = {
  AND?: Prisma.bankruptcy_typeScalarWhereWithAggregatesInput | Prisma.bankruptcy_typeScalarWhereWithAggregatesInput[]
  OR?: Prisma.bankruptcy_typeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.bankruptcy_typeScalarWhereWithAggregatesInput | Prisma.bankruptcy_typeScalarWhereWithAggregatesInput[]
  bankruptcy_type_number?: Prisma.IntWithAggregatesFilter<"bankruptcy_type"> | number
  bankruptcy_type_description?: Prisma.StringNullableWithAggregatesFilter<"bankruptcy_type"> | string | null
  created_at?: Prisma.DateTimeWithAggregatesFilter<"bankruptcy_type"> | Date | string
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"bankruptcy_type"> | Date | string | null
}

export type bankruptcy_typeCreateInput = {
  bankruptcy_type_number: number
  bankruptcy_type_description?: string | null
  created_at?: Date | string
  updated_at?: Date | string | null
  loan?: Prisma.loanCreateNestedManyWithoutBankruptcy_typeInput
  loan_staging?: Prisma.loan_stagingCreateNestedManyWithoutBankruptcy_typeInput
}

export type bankruptcy_typeUncheckedCreateInput = {
  bankruptcy_type_number: number
  bankruptcy_type_description?: string | null
  created_at?: Date | string
  updated_at?: Date | string | null
  loan?: Prisma.loanUncheckedCreateNestedManyWithoutBankruptcy_typeInput
  loan_staging?: Prisma.loan_stagingUncheckedCreateNestedManyWithoutBankruptcy_typeInput
}

export type bankruptcy_typeUpdateInput = {
  bankruptcy_type_number?: Prisma.IntFieldUpdateOperationsInput | number
  bankruptcy_type_description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  loan?: Prisma.loanUpdateManyWithoutBankruptcy_typeNestedInput
  loan_staging?: Prisma.loan_stagingUpdateManyWithoutBankruptcy_typeNestedInput
}

export type bankruptcy_typeUncheckedUpdateInput = {
  bankruptcy_type_number?: Prisma.IntFieldUpdateOperationsInput | number
  bankruptcy_type_description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  loan?: Prisma.loanUncheckedUpdateManyWithoutBankruptcy_typeNestedInput
  loan_staging?: Prisma.loan_stagingUncheckedUpdateManyWithoutBankruptcy_typeNestedInput
}

export type bankruptcy_typeCreateManyInput = {
  bankruptcy_type_number: number
  bankruptcy_type_description?: string | null
  created_at?: Date | string
  updated_at?: Date | string | null
}

export type bankruptcy_typeUpdateManyMutationInput = {
  bankruptcy_type_number?: Prisma.IntFieldUpdateOperationsInput | number
  bankruptcy_type_description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type bankruptcy_typeUncheckedUpdateManyInput = {
  bankruptcy_type_number?: Prisma.IntFieldUpdateOperationsInput | number
  bankruptcy_type_description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type bankruptcy_typeCountOrderByAggregateInput = {
  bankruptcy_type_number?: Prisma.SortOrder
  bankruptcy_type_description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type bankruptcy_typeAvgOrderByAggregateInput = {
  bankruptcy_type_number?: Prisma.SortOrder
}

export type bankruptcy_typeMaxOrderByAggregateInput = {
  bankruptcy_type_number?: Prisma.SortOrder
  bankruptcy_type_description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type bankruptcy_typeMinOrderByAggregateInput = {
  bankruptcy_type_number?: Prisma.SortOrder
  bankruptcy_type_description?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type bankruptcy_typeSumOrderByAggregateInput = {
  bankruptcy_type_number?: Prisma.SortOrder
}

export type Bankruptcy_typeNullableScalarRelationFilter = {
  is?: Prisma.bankruptcy_typeWhereInput | null
  isNot?: Prisma.bankruptcy_typeWhereInput | null
}

export type bankruptcy_typeCreateNestedOneWithoutLoanInput = {
  create?: Prisma.XOR<Prisma.bankruptcy_typeCreateWithoutLoanInput, Prisma.bankruptcy_typeUncheckedCreateWithoutLoanInput>
  connectOrCreate?: Prisma.bankruptcy_typeCreateOrConnectWithoutLoanInput
  connect?: Prisma.bankruptcy_typeWhereUniqueInput
}

export type bankruptcy_typeUpdateOneWithoutLoanNestedInput = {
  create?: Prisma.XOR<Prisma.bankruptcy_typeCreateWithoutLoanInput, Prisma.bankruptcy_typeUncheckedCreateWithoutLoanInput>
  connectOrCreate?: Prisma.bankruptcy_typeCreateOrConnectWithoutLoanInput
  upsert?: Prisma.bankruptcy_typeUpsertWithoutLoanInput
  disconnect?: Prisma.bankruptcy_typeWhereInput | boolean
  delete?: Prisma.bankruptcy_typeWhereInput | boolean
  connect?: Prisma.bankruptcy_typeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.bankruptcy_typeUpdateToOneWithWhereWithoutLoanInput, Prisma.bankruptcy_typeUpdateWithoutLoanInput>, Prisma.bankruptcy_typeUncheckedUpdateWithoutLoanInput>
}

export type bankruptcy_typeCreateNestedOneWithoutLoan_stagingInput = {
  create?: Prisma.XOR<Prisma.bankruptcy_typeCreateWithoutLoan_stagingInput, Prisma.bankruptcy_typeUncheckedCreateWithoutLoan_stagingInput>
  connectOrCreate?: Prisma.bankruptcy_typeCreateOrConnectWithoutLoan_stagingInput
  connect?: Prisma.bankruptcy_typeWhereUniqueInput
}

export type bankruptcy_typeUpdateOneWithoutLoan_stagingNestedInput = {
  create?: Prisma.XOR<Prisma.bankruptcy_typeCreateWithoutLoan_stagingInput, Prisma.bankruptcy_typeUncheckedCreateWithoutLoan_stagingInput>
  connectOrCreate?: Prisma.bankruptcy_typeCreateOrConnectWithoutLoan_stagingInput
  upsert?: Prisma.bankruptcy_typeUpsertWithoutLoan_stagingInput
  disconnect?: Prisma.bankruptcy_typeWhereInput | boolean
  delete?: Prisma.bankruptcy_typeWhereInput | boolean
  connect?: Prisma.bankruptcy_typeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.bankruptcy_typeUpdateToOneWithWhereWithoutLoan_stagingInput, Prisma.bankruptcy_typeUpdateWithoutLoan_stagingInput>, Prisma.bankruptcy_typeUncheckedUpdateWithoutLoan_stagingInput>
}

export type bankruptcy_typeCreateWithoutLoanInput = {
  bankruptcy_type_number: number
  bankruptcy_type_description?: string | null
  created_at?: Date | string
  updated_at?: Date | string | null
  loan_staging?: Prisma.loan_stagingCreateNestedManyWithoutBankruptcy_typeInput
}

export type bankruptcy_typeUncheckedCreateWithoutLoanInput = {
  bankruptcy_type_number: number
  bankruptcy_type_description?: string | null
  created_at?: Date | string
  updated_at?: Date | string | null
  loan_staging?: Prisma.loan_stagingUncheckedCreateNestedManyWithoutBankruptcy_typeInput
}

export type bankruptcy_typeCreateOrConnectWithoutLoanInput = {
  where: Prisma.bankruptcy_typeWhereUniqueInput
  create: Prisma.XOR<Prisma.bankruptcy_typeCreateWithoutLoanInput, Prisma.bankruptcy_typeUncheckedCreateWithoutLoanInput>
}

export type bankruptcy_typeUpsertWithoutLoanInput = {
  update: Prisma.XOR<Prisma.bankruptcy_typeUpdateWithoutLoanInput, Prisma.bankruptcy_typeUncheckedUpdateWithoutLoanInput>
  create: Prisma.XOR<Prisma.bankruptcy_typeCreateWithoutLoanInput, Prisma.bankruptcy_typeUncheckedCreateWithoutLoanInput>
  where?: Prisma.bankruptcy_typeWhereInput
}

export type bankruptcy_typeUpdateToOneWithWhereWithoutLoanInput = {
  where?: Prisma.bankruptcy_typeWhereInput
  data: Prisma.XOR<Prisma.bankruptcy_typeUpdateWithoutLoanInput, Prisma.bankruptcy_typeUncheckedUpdateWithoutLoanInput>
}

export type bankruptcy_typeUpdateWithoutLoanInput = {
  bankruptcy_type_number?: Prisma.IntFieldUpdateOperationsInput | number
  bankruptcy_type_description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  loan_staging?: Prisma.loan_stagingUpdateManyWithoutBankruptcy_typeNestedInput
}

export type bankruptcy_typeUncheckedUpdateWithoutLoanInput = {
  bankruptcy_type_number?: Prisma.IntFieldUpdateOperationsInput | number
  bankruptcy_type_description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  loan_staging?: Prisma.loan_stagingUncheckedUpdateManyWithoutBankruptcy_typeNestedInput
}

export type bankruptcy_typeCreateWithoutLoan_stagingInput = {
  bankruptcy_type_number: number
  bankruptcy_type_description?: string | null
  created_at?: Date | string
  updated_at?: Date | string | null
  loan?: Prisma.loanCreateNestedManyWithoutBankruptcy_typeInput
}

export type bankruptcy_typeUncheckedCreateWithoutLoan_stagingInput = {
  bankruptcy_type_number: number
  bankruptcy_type_description?: string | null
  created_at?: Date | string
  updated_at?: Date | string | null
  loan?: Prisma.loanUncheckedCreateNestedManyWithoutBankruptcy_typeInput
}

export type bankruptcy_typeCreateOrConnectWithoutLoan_stagingInput = {
  where: Prisma.bankruptcy_typeWhereUniqueInput
  create: Prisma.XOR<Prisma.bankruptcy_typeCreateWithoutLoan_stagingInput, Prisma.bankruptcy_typeUncheckedCreateWithoutLoan_stagingInput>
}

export type bankruptcy_typeUpsertWithoutLoan_stagingInput = {
  update: Prisma.XOR<Prisma.bankruptcy_typeUpdateWithoutLoan_stagingInput, Prisma.bankruptcy_typeUncheckedUpdateWithoutLoan_stagingInput>
  create: Prisma.XOR<Prisma.bankruptcy_typeCreateWithoutLoan_stagingInput, Prisma.bankruptcy_typeUncheckedCreateWithoutLoan_stagingInput>
  where?: Prisma.bankruptcy_typeWhereInput
}

export type bankruptcy_typeUpdateToOneWithWhereWithoutLoan_stagingInput = {
  where?: Prisma.bankruptcy_typeWhereInput
  data: Prisma.XOR<Prisma.bankruptcy_typeUpdateWithoutLoan_stagingInput, Prisma.bankruptcy_typeUncheckedUpdateWithoutLoan_stagingInput>
}

export type bankruptcy_typeUpdateWithoutLoan_stagingInput = {
  bankruptcy_type_number?: Prisma.IntFieldUpdateOperationsInput | number
  bankruptcy_type_description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  loan?: Prisma.loanUpdateManyWithoutBankruptcy_typeNestedInput
}

export type bankruptcy_typeUncheckedUpdateWithoutLoan_stagingInput = {
  bankruptcy_type_number?: Prisma.IntFieldUpdateOperationsInput | number
  bankruptcy_type_description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  loan?: Prisma.loanUncheckedUpdateManyWithoutBankruptcy_typeNestedInput
}


/**
 * Count Type Bankruptcy_typeCountOutputType
 */

export type Bankruptcy_typeCountOutputType = {
  loan: number
  loan_staging: number
}

export type Bankruptcy_typeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  loan?: boolean | Bankruptcy_typeCountOutputTypeCountLoanArgs
  loan_staging?: boolean | Bankruptcy_typeCountOutputTypeCountLoan_stagingArgs
}

/**
 * Bankruptcy_typeCountOutputType without action
 */
export type Bankruptcy_typeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bankruptcy_typeCountOutputType
   */
  select?: Prisma.Bankruptcy_typeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Bankruptcy_typeCountOutputType without action
 */
export type Bankruptcy_typeCountOutputTypeCountLoanArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.loanWhereInput
}

/**
 * Bankruptcy_typeCountOutputType without action
 */
export type Bankruptcy_typeCountOutputTypeCountLoan_stagingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.loan_stagingWhereInput
}


export type bankruptcy_typeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  bankruptcy_type_number?: boolean
  bankruptcy_type_description?: boolean
  created_at?: boolean
  updated_at?: boolean
  loan?: boolean | Prisma.bankruptcy_type$loanArgs<ExtArgs>
  loan_staging?: boolean | Prisma.bankruptcy_type$loan_stagingArgs<ExtArgs>
  _count?: boolean | Prisma.Bankruptcy_typeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bankruptcy_type"]>

export type bankruptcy_typeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  bankruptcy_type_number?: boolean
  bankruptcy_type_description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["bankruptcy_type"]>

export type bankruptcy_typeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  bankruptcy_type_number?: boolean
  bankruptcy_type_description?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["bankruptcy_type"]>

export type bankruptcy_typeSelectScalar = {
  bankruptcy_type_number?: boolean
  bankruptcy_type_description?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type bankruptcy_typeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"bankruptcy_type_number" | "bankruptcy_type_description" | "created_at" | "updated_at", ExtArgs["result"]["bankruptcy_type"]>
export type bankruptcy_typeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  loan?: boolean | Prisma.bankruptcy_type$loanArgs<ExtArgs>
  loan_staging?: boolean | Prisma.bankruptcy_type$loan_stagingArgs<ExtArgs>
  _count?: boolean | Prisma.Bankruptcy_typeCountOutputTypeDefaultArgs<ExtArgs>
}
export type bankruptcy_typeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type bankruptcy_typeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $bankruptcy_typePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "bankruptcy_type"
  objects: {
    loan: Prisma.$loanPayload<ExtArgs>[]
    loan_staging: Prisma.$loan_stagingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    bankruptcy_type_number: number
    bankruptcy_type_description: string | null
    created_at: Date
    updated_at: Date | null
  }, ExtArgs["result"]["bankruptcy_type"]>
  composites: {}
}

export type bankruptcy_typeGetPayload<S extends boolean | null | undefined | bankruptcy_typeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload, S>

export type bankruptcy_typeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<bankruptcy_typeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Bankruptcy_typeCountAggregateInputType | true
  }

export interface bankruptcy_typeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bankruptcy_type'], meta: { name: 'bankruptcy_type' } }
  /**
   * Find zero or one Bankruptcy_type that matches the filter.
   * @param {bankruptcy_typeFindUniqueArgs} args - Arguments to find a Bankruptcy_type
   * @example
   * // Get one Bankruptcy_type
   * const bankruptcy_type = await prisma.bankruptcy_type.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends bankruptcy_typeFindUniqueArgs>(args: Prisma.SelectSubset<T, bankruptcy_typeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__bankruptcy_typeClient<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Bankruptcy_type that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {bankruptcy_typeFindUniqueOrThrowArgs} args - Arguments to find a Bankruptcy_type
   * @example
   * // Get one Bankruptcy_type
   * const bankruptcy_type = await prisma.bankruptcy_type.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends bankruptcy_typeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, bankruptcy_typeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__bankruptcy_typeClient<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Bankruptcy_type that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bankruptcy_typeFindFirstArgs} args - Arguments to find a Bankruptcy_type
   * @example
   * // Get one Bankruptcy_type
   * const bankruptcy_type = await prisma.bankruptcy_type.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends bankruptcy_typeFindFirstArgs>(args?: Prisma.SelectSubset<T, bankruptcy_typeFindFirstArgs<ExtArgs>>): Prisma.Prisma__bankruptcy_typeClient<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Bankruptcy_type that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bankruptcy_typeFindFirstOrThrowArgs} args - Arguments to find a Bankruptcy_type
   * @example
   * // Get one Bankruptcy_type
   * const bankruptcy_type = await prisma.bankruptcy_type.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends bankruptcy_typeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, bankruptcy_typeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__bankruptcy_typeClient<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Bankruptcy_types that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bankruptcy_typeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bankruptcy_types
   * const bankruptcy_types = await prisma.bankruptcy_type.findMany()
   * 
   * // Get first 10 Bankruptcy_types
   * const bankruptcy_types = await prisma.bankruptcy_type.findMany({ take: 10 })
   * 
   * // Only select the `bankruptcy_type_number`
   * const bankruptcy_typeWithBankruptcy_type_numberOnly = await prisma.bankruptcy_type.findMany({ select: { bankruptcy_type_number: true } })
   * 
   */
  findMany<T extends bankruptcy_typeFindManyArgs>(args?: Prisma.SelectSubset<T, bankruptcy_typeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Bankruptcy_type.
   * @param {bankruptcy_typeCreateArgs} args - Arguments to create a Bankruptcy_type.
   * @example
   * // Create one Bankruptcy_type
   * const Bankruptcy_type = await prisma.bankruptcy_type.create({
   *   data: {
   *     // ... data to create a Bankruptcy_type
   *   }
   * })
   * 
   */
  create<T extends bankruptcy_typeCreateArgs>(args: Prisma.SelectSubset<T, bankruptcy_typeCreateArgs<ExtArgs>>): Prisma.Prisma__bankruptcy_typeClient<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Bankruptcy_types.
   * @param {bankruptcy_typeCreateManyArgs} args - Arguments to create many Bankruptcy_types.
   * @example
   * // Create many Bankruptcy_types
   * const bankruptcy_type = await prisma.bankruptcy_type.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends bankruptcy_typeCreateManyArgs>(args?: Prisma.SelectSubset<T, bankruptcy_typeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Bankruptcy_types and returns the data saved in the database.
   * @param {bankruptcy_typeCreateManyAndReturnArgs} args - Arguments to create many Bankruptcy_types.
   * @example
   * // Create many Bankruptcy_types
   * const bankruptcy_type = await prisma.bankruptcy_type.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Bankruptcy_types and only return the `bankruptcy_type_number`
   * const bankruptcy_typeWithBankruptcy_type_numberOnly = await prisma.bankruptcy_type.createManyAndReturn({
   *   select: { bankruptcy_type_number: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends bankruptcy_typeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, bankruptcy_typeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Bankruptcy_type.
   * @param {bankruptcy_typeDeleteArgs} args - Arguments to delete one Bankruptcy_type.
   * @example
   * // Delete one Bankruptcy_type
   * const Bankruptcy_type = await prisma.bankruptcy_type.delete({
   *   where: {
   *     // ... filter to delete one Bankruptcy_type
   *   }
   * })
   * 
   */
  delete<T extends bankruptcy_typeDeleteArgs>(args: Prisma.SelectSubset<T, bankruptcy_typeDeleteArgs<ExtArgs>>): Prisma.Prisma__bankruptcy_typeClient<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Bankruptcy_type.
   * @param {bankruptcy_typeUpdateArgs} args - Arguments to update one Bankruptcy_type.
   * @example
   * // Update one Bankruptcy_type
   * const bankruptcy_type = await prisma.bankruptcy_type.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends bankruptcy_typeUpdateArgs>(args: Prisma.SelectSubset<T, bankruptcy_typeUpdateArgs<ExtArgs>>): Prisma.Prisma__bankruptcy_typeClient<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Bankruptcy_types.
   * @param {bankruptcy_typeDeleteManyArgs} args - Arguments to filter Bankruptcy_types to delete.
   * @example
   * // Delete a few Bankruptcy_types
   * const { count } = await prisma.bankruptcy_type.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends bankruptcy_typeDeleteManyArgs>(args?: Prisma.SelectSubset<T, bankruptcy_typeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bankruptcy_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bankruptcy_typeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bankruptcy_types
   * const bankruptcy_type = await prisma.bankruptcy_type.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends bankruptcy_typeUpdateManyArgs>(args: Prisma.SelectSubset<T, bankruptcy_typeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bankruptcy_types and returns the data updated in the database.
   * @param {bankruptcy_typeUpdateManyAndReturnArgs} args - Arguments to update many Bankruptcy_types.
   * @example
   * // Update many Bankruptcy_types
   * const bankruptcy_type = await prisma.bankruptcy_type.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Bankruptcy_types and only return the `bankruptcy_type_number`
   * const bankruptcy_typeWithBankruptcy_type_numberOnly = await prisma.bankruptcy_type.updateManyAndReturn({
   *   select: { bankruptcy_type_number: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends bankruptcy_typeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, bankruptcy_typeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Bankruptcy_type.
   * @param {bankruptcy_typeUpsertArgs} args - Arguments to update or create a Bankruptcy_type.
   * @example
   * // Update or create a Bankruptcy_type
   * const bankruptcy_type = await prisma.bankruptcy_type.upsert({
   *   create: {
   *     // ... data to create a Bankruptcy_type
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Bankruptcy_type we want to update
   *   }
   * })
   */
  upsert<T extends bankruptcy_typeUpsertArgs>(args: Prisma.SelectSubset<T, bankruptcy_typeUpsertArgs<ExtArgs>>): Prisma.Prisma__bankruptcy_typeClient<runtime.Types.Result.GetResult<Prisma.$bankruptcy_typePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Bankruptcy_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bankruptcy_typeCountArgs} args - Arguments to filter Bankruptcy_types to count.
   * @example
   * // Count the number of Bankruptcy_types
   * const count = await prisma.bankruptcy_type.count({
   *   where: {
   *     // ... the filter for the Bankruptcy_types we want to count
   *   }
   * })
  **/
  count<T extends bankruptcy_typeCountArgs>(
    args?: Prisma.Subset<T, bankruptcy_typeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Bankruptcy_typeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Bankruptcy_type.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Bankruptcy_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Bankruptcy_typeAggregateArgs>(args: Prisma.Subset<T, Bankruptcy_typeAggregateArgs>): Prisma.PrismaPromise<GetBankruptcy_typeAggregateType<T>>

  /**
   * Group by Bankruptcy_type.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {bankruptcy_typeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends bankruptcy_typeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: bankruptcy_typeGroupByArgs['orderBy'] }
      : { orderBy?: bankruptcy_typeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, bankruptcy_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankruptcy_typeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the bankruptcy_type model
 */
readonly fields: bankruptcy_typeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for bankruptcy_type.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__bankruptcy_typeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  loan<T extends Prisma.bankruptcy_type$loanArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.bankruptcy_type$loanArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$loanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  loan_staging<T extends Prisma.bankruptcy_type$loan_stagingArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.bankruptcy_type$loan_stagingArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$loan_stagingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the bankruptcy_type model
 */
export interface bankruptcy_typeFieldRefs {
  readonly bankruptcy_type_number: Prisma.FieldRef<"bankruptcy_type", 'Int'>
  readonly bankruptcy_type_description: Prisma.FieldRef<"bankruptcy_type", 'String'>
  readonly created_at: Prisma.FieldRef<"bankruptcy_type", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"bankruptcy_type", 'DateTime'>
}
    

// Custom InputTypes
/**
 * bankruptcy_type findUnique
 */
export type bankruptcy_typeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
  /**
   * Filter, which bankruptcy_type to fetch.
   */
  where: Prisma.bankruptcy_typeWhereUniqueInput
}

/**
 * bankruptcy_type findUniqueOrThrow
 */
export type bankruptcy_typeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
  /**
   * Filter, which bankruptcy_type to fetch.
   */
  where: Prisma.bankruptcy_typeWhereUniqueInput
}

/**
 * bankruptcy_type findFirst
 */
export type bankruptcy_typeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
  /**
   * Filter, which bankruptcy_type to fetch.
   */
  where?: Prisma.bankruptcy_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bankruptcy_types to fetch.
   */
  orderBy?: Prisma.bankruptcy_typeOrderByWithRelationInput | Prisma.bankruptcy_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for bankruptcy_types.
   */
  cursor?: Prisma.bankruptcy_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bankruptcy_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bankruptcy_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of bankruptcy_types.
   */
  distinct?: Prisma.Bankruptcy_typeScalarFieldEnum | Prisma.Bankruptcy_typeScalarFieldEnum[]
}

/**
 * bankruptcy_type findFirstOrThrow
 */
export type bankruptcy_typeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
  /**
   * Filter, which bankruptcy_type to fetch.
   */
  where?: Prisma.bankruptcy_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bankruptcy_types to fetch.
   */
  orderBy?: Prisma.bankruptcy_typeOrderByWithRelationInput | Prisma.bankruptcy_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for bankruptcy_types.
   */
  cursor?: Prisma.bankruptcy_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bankruptcy_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bankruptcy_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of bankruptcy_types.
   */
  distinct?: Prisma.Bankruptcy_typeScalarFieldEnum | Prisma.Bankruptcy_typeScalarFieldEnum[]
}

/**
 * bankruptcy_type findMany
 */
export type bankruptcy_typeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
  /**
   * Filter, which bankruptcy_types to fetch.
   */
  where?: Prisma.bankruptcy_typeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of bankruptcy_types to fetch.
   */
  orderBy?: Prisma.bankruptcy_typeOrderByWithRelationInput | Prisma.bankruptcy_typeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing bankruptcy_types.
   */
  cursor?: Prisma.bankruptcy_typeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` bankruptcy_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` bankruptcy_types.
   */
  skip?: number
  distinct?: Prisma.Bankruptcy_typeScalarFieldEnum | Prisma.Bankruptcy_typeScalarFieldEnum[]
}

/**
 * bankruptcy_type create
 */
export type bankruptcy_typeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
  /**
   * The data needed to create a bankruptcy_type.
   */
  data: Prisma.XOR<Prisma.bankruptcy_typeCreateInput, Prisma.bankruptcy_typeUncheckedCreateInput>
}

/**
 * bankruptcy_type createMany
 */
export type bankruptcy_typeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many bankruptcy_types.
   */
  data: Prisma.bankruptcy_typeCreateManyInput | Prisma.bankruptcy_typeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * bankruptcy_type createManyAndReturn
 */
export type bankruptcy_typeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * The data used to create many bankruptcy_types.
   */
  data: Prisma.bankruptcy_typeCreateManyInput | Prisma.bankruptcy_typeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * bankruptcy_type update
 */
export type bankruptcy_typeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
  /**
   * The data needed to update a bankruptcy_type.
   */
  data: Prisma.XOR<Prisma.bankruptcy_typeUpdateInput, Prisma.bankruptcy_typeUncheckedUpdateInput>
  /**
   * Choose, which bankruptcy_type to update.
   */
  where: Prisma.bankruptcy_typeWhereUniqueInput
}

/**
 * bankruptcy_type updateMany
 */
export type bankruptcy_typeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update bankruptcy_types.
   */
  data: Prisma.XOR<Prisma.bankruptcy_typeUpdateManyMutationInput, Prisma.bankruptcy_typeUncheckedUpdateManyInput>
  /**
   * Filter which bankruptcy_types to update
   */
  where?: Prisma.bankruptcy_typeWhereInput
  /**
   * Limit how many bankruptcy_types to update.
   */
  limit?: number
}

/**
 * bankruptcy_type updateManyAndReturn
 */
export type bankruptcy_typeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * The data used to update bankruptcy_types.
   */
  data: Prisma.XOR<Prisma.bankruptcy_typeUpdateManyMutationInput, Prisma.bankruptcy_typeUncheckedUpdateManyInput>
  /**
   * Filter which bankruptcy_types to update
   */
  where?: Prisma.bankruptcy_typeWhereInput
  /**
   * Limit how many bankruptcy_types to update.
   */
  limit?: number
}

/**
 * bankruptcy_type upsert
 */
export type bankruptcy_typeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
  /**
   * The filter to search for the bankruptcy_type to update in case it exists.
   */
  where: Prisma.bankruptcy_typeWhereUniqueInput
  /**
   * In case the bankruptcy_type found by the `where` argument doesn't exist, create a new bankruptcy_type with this data.
   */
  create: Prisma.XOR<Prisma.bankruptcy_typeCreateInput, Prisma.bankruptcy_typeUncheckedCreateInput>
  /**
   * In case the bankruptcy_type was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.bankruptcy_typeUpdateInput, Prisma.bankruptcy_typeUncheckedUpdateInput>
}

/**
 * bankruptcy_type delete
 */
export type bankruptcy_typeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
  /**
   * Filter which bankruptcy_type to delete.
   */
  where: Prisma.bankruptcy_typeWhereUniqueInput
}

/**
 * bankruptcy_type deleteMany
 */
export type bankruptcy_typeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which bankruptcy_types to delete
   */
  where?: Prisma.bankruptcy_typeWhereInput
  /**
   * Limit how many bankruptcy_types to delete.
   */
  limit?: number
}

/**
 * bankruptcy_type.loan
 */
export type bankruptcy_type$loanArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the loan
   */
  select?: Prisma.loanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the loan
   */
  omit?: Prisma.loanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.loanInclude<ExtArgs> | null
  where?: Prisma.loanWhereInput
  orderBy?: Prisma.loanOrderByWithRelationInput | Prisma.loanOrderByWithRelationInput[]
  cursor?: Prisma.loanWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LoanScalarFieldEnum | Prisma.LoanScalarFieldEnum[]
}

/**
 * bankruptcy_type.loan_staging
 */
export type bankruptcy_type$loan_stagingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the loan_staging
   */
  select?: Prisma.loan_stagingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the loan_staging
   */
  omit?: Prisma.loan_stagingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.loan_stagingInclude<ExtArgs> | null
  where?: Prisma.loan_stagingWhereInput
  orderBy?: Prisma.loan_stagingOrderByWithRelationInput | Prisma.loan_stagingOrderByWithRelationInput[]
  cursor?: Prisma.loan_stagingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Loan_stagingScalarFieldEnum | Prisma.Loan_stagingScalarFieldEnum[]
}

/**
 * bankruptcy_type without action
 */
export type bankruptcy_typeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the bankruptcy_type
   */
  select?: Prisma.bankruptcy_typeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the bankruptcy_type
   */
  omit?: Prisma.bankruptcy_typeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.bankruptcy_typeInclude<ExtArgs> | null
}
