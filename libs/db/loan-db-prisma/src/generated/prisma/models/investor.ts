
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `investor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model investor
 * 
 */
export type investorModel = runtime.Types.Result.DefaultSelection<Prisma.$investorPayload>

export type AggregateInvestor = {
  _count: InvestorCountAggregateOutputType | null
  _min: InvestorMinAggregateOutputType | null
  _max: InvestorMaxAggregateOutputType | null
}

export type InvestorMinAggregateOutputType = {
  company_investor_id: string | null
  originator_assigned_investor_id: string | null
  investor_name: string | null
}

export type InvestorMaxAggregateOutputType = {
  company_investor_id: string | null
  originator_assigned_investor_id: string | null
  investor_name: string | null
}

export type InvestorCountAggregateOutputType = {
  company_investor_id: number
  originator_assigned_investor_id: number
  investor_name: number
  _all: number
}


export type InvestorMinAggregateInputType = {
  company_investor_id?: true
  originator_assigned_investor_id?: true
  investor_name?: true
}

export type InvestorMaxAggregateInputType = {
  company_investor_id?: true
  originator_assigned_investor_id?: true
  investor_name?: true
}

export type InvestorCountAggregateInputType = {
  company_investor_id?: true
  originator_assigned_investor_id?: true
  investor_name?: true
  _all?: true
}

export type InvestorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which investor to aggregate.
   */
  where?: Prisma.investorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of investors to fetch.
   */
  orderBy?: Prisma.investorOrderByWithRelationInput | Prisma.investorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.investorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` investors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` investors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned investors
  **/
  _count?: true | InvestorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InvestorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InvestorMaxAggregateInputType
}

export type GetInvestorAggregateType<T extends InvestorAggregateArgs> = {
      [P in keyof T & keyof AggregateInvestor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInvestor[P]>
    : Prisma.GetScalarType<T[P], AggregateInvestor[P]>
}




export type investorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.investorWhereInput
  orderBy?: Prisma.investorOrderByWithAggregationInput | Prisma.investorOrderByWithAggregationInput[]
  by: Prisma.InvestorScalarFieldEnum[] | Prisma.InvestorScalarFieldEnum
  having?: Prisma.investorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InvestorCountAggregateInputType | true
  _min?: InvestorMinAggregateInputType
  _max?: InvestorMaxAggregateInputType
}

export type InvestorGroupByOutputType = {
  company_investor_id: string
  originator_assigned_investor_id: string
  investor_name: string
  _count: InvestorCountAggregateOutputType | null
  _min: InvestorMinAggregateOutputType | null
  _max: InvestorMaxAggregateOutputType | null
}

type GetInvestorGroupByPayload<T extends investorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InvestorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InvestorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InvestorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InvestorGroupByOutputType[P]>
      }
    >
  >



export type investorWhereInput = {
  AND?: Prisma.investorWhereInput | Prisma.investorWhereInput[]
  OR?: Prisma.investorWhereInput[]
  NOT?: Prisma.investorWhereInput | Prisma.investorWhereInput[]
  company_investor_id?: Prisma.UuidFilter<"investor"> | string
  originator_assigned_investor_id?: Prisma.UuidFilter<"investor"> | string
  investor_name?: Prisma.StringFilter<"investor"> | string
}

export type investorOrderByWithRelationInput = {
  company_investor_id?: Prisma.SortOrder
  originator_assigned_investor_id?: Prisma.SortOrder
  investor_name?: Prisma.SortOrder
}

export type investorWhereUniqueInput = Prisma.AtLeast<{
  company_investor_id?: string
  AND?: Prisma.investorWhereInput | Prisma.investorWhereInput[]
  OR?: Prisma.investorWhereInput[]
  NOT?: Prisma.investorWhereInput | Prisma.investorWhereInput[]
  originator_assigned_investor_id?: Prisma.UuidFilter<"investor"> | string
  investor_name?: Prisma.StringFilter<"investor"> | string
}, "company_investor_id">

export type investorOrderByWithAggregationInput = {
  company_investor_id?: Prisma.SortOrder
  originator_assigned_investor_id?: Prisma.SortOrder
  investor_name?: Prisma.SortOrder
  _count?: Prisma.investorCountOrderByAggregateInput
  _max?: Prisma.investorMaxOrderByAggregateInput
  _min?: Prisma.investorMinOrderByAggregateInput
}

export type investorScalarWhereWithAggregatesInput = {
  AND?: Prisma.investorScalarWhereWithAggregatesInput | Prisma.investorScalarWhereWithAggregatesInput[]
  OR?: Prisma.investorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.investorScalarWhereWithAggregatesInput | Prisma.investorScalarWhereWithAggregatesInput[]
  company_investor_id?: Prisma.UuidWithAggregatesFilter<"investor"> | string
  originator_assigned_investor_id?: Prisma.UuidWithAggregatesFilter<"investor"> | string
  investor_name?: Prisma.StringWithAggregatesFilter<"investor"> | string
}

export type investorCreateInput = {
  company_investor_id?: string
  originator_assigned_investor_id: string
  investor_name: string
}

export type investorUncheckedCreateInput = {
  company_investor_id?: string
  originator_assigned_investor_id: string
  investor_name: string
}

export type investorUpdateInput = {
  company_investor_id?: Prisma.StringFieldUpdateOperationsInput | string
  originator_assigned_investor_id?: Prisma.StringFieldUpdateOperationsInput | string
  investor_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type investorUncheckedUpdateInput = {
  company_investor_id?: Prisma.StringFieldUpdateOperationsInput | string
  originator_assigned_investor_id?: Prisma.StringFieldUpdateOperationsInput | string
  investor_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type investorCreateManyInput = {
  company_investor_id?: string
  originator_assigned_investor_id: string
  investor_name: string
}

export type investorUpdateManyMutationInput = {
  company_investor_id?: Prisma.StringFieldUpdateOperationsInput | string
  originator_assigned_investor_id?: Prisma.StringFieldUpdateOperationsInput | string
  investor_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type investorUncheckedUpdateManyInput = {
  company_investor_id?: Prisma.StringFieldUpdateOperationsInput | string
  originator_assigned_investor_id?: Prisma.StringFieldUpdateOperationsInput | string
  investor_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type investorCountOrderByAggregateInput = {
  company_investor_id?: Prisma.SortOrder
  originator_assigned_investor_id?: Prisma.SortOrder
  investor_name?: Prisma.SortOrder
}

export type investorMaxOrderByAggregateInput = {
  company_investor_id?: Prisma.SortOrder
  originator_assigned_investor_id?: Prisma.SortOrder
  investor_name?: Prisma.SortOrder
}

export type investorMinOrderByAggregateInput = {
  company_investor_id?: Prisma.SortOrder
  originator_assigned_investor_id?: Prisma.SortOrder
  investor_name?: Prisma.SortOrder
}



export type investorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  company_investor_id?: boolean
  originator_assigned_investor_id?: boolean
  investor_name?: boolean
}, ExtArgs["result"]["investor"]>

export type investorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  company_investor_id?: boolean
  originator_assigned_investor_id?: boolean
  investor_name?: boolean
}, ExtArgs["result"]["investor"]>

export type investorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  company_investor_id?: boolean
  originator_assigned_investor_id?: boolean
  investor_name?: boolean
}, ExtArgs["result"]["investor"]>

export type investorSelectScalar = {
  company_investor_id?: boolean
  originator_assigned_investor_id?: boolean
  investor_name?: boolean
}

export type investorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"company_investor_id" | "originator_assigned_investor_id" | "investor_name", ExtArgs["result"]["investor"]>

export type $investorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "investor"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    company_investor_id: string
    originator_assigned_investor_id: string
    investor_name: string
  }, ExtArgs["result"]["investor"]>
  composites: {}
}

export type investorGetPayload<S extends boolean | null | undefined | investorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$investorPayload, S>

export type investorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<investorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InvestorCountAggregateInputType | true
  }

export interface investorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['investor'], meta: { name: 'investor' } }
  /**
   * Find zero or one Investor that matches the filter.
   * @param {investorFindUniqueArgs} args - Arguments to find a Investor
   * @example
   * // Get one Investor
   * const investor = await prisma.investor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends investorFindUniqueArgs>(args: Prisma.SelectSubset<T, investorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__investorClient<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Investor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {investorFindUniqueOrThrowArgs} args - Arguments to find a Investor
   * @example
   * // Get one Investor
   * const investor = await prisma.investor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends investorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, investorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__investorClient<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Investor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {investorFindFirstArgs} args - Arguments to find a Investor
   * @example
   * // Get one Investor
   * const investor = await prisma.investor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends investorFindFirstArgs>(args?: Prisma.SelectSubset<T, investorFindFirstArgs<ExtArgs>>): Prisma.Prisma__investorClient<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Investor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {investorFindFirstOrThrowArgs} args - Arguments to find a Investor
   * @example
   * // Get one Investor
   * const investor = await prisma.investor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends investorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, investorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__investorClient<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Investors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {investorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Investors
   * const investors = await prisma.investor.findMany()
   * 
   * // Get first 10 Investors
   * const investors = await prisma.investor.findMany({ take: 10 })
   * 
   * // Only select the `company_investor_id`
   * const investorWithCompany_investor_idOnly = await prisma.investor.findMany({ select: { company_investor_id: true } })
   * 
   */
  findMany<T extends investorFindManyArgs>(args?: Prisma.SelectSubset<T, investorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Investor.
   * @param {investorCreateArgs} args - Arguments to create a Investor.
   * @example
   * // Create one Investor
   * const Investor = await prisma.investor.create({
   *   data: {
   *     // ... data to create a Investor
   *   }
   * })
   * 
   */
  create<T extends investorCreateArgs>(args: Prisma.SelectSubset<T, investorCreateArgs<ExtArgs>>): Prisma.Prisma__investorClient<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Investors.
   * @param {investorCreateManyArgs} args - Arguments to create many Investors.
   * @example
   * // Create many Investors
   * const investor = await prisma.investor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends investorCreateManyArgs>(args?: Prisma.SelectSubset<T, investorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Investors and returns the data saved in the database.
   * @param {investorCreateManyAndReturnArgs} args - Arguments to create many Investors.
   * @example
   * // Create many Investors
   * const investor = await prisma.investor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Investors and only return the `company_investor_id`
   * const investorWithCompany_investor_idOnly = await prisma.investor.createManyAndReturn({
   *   select: { company_investor_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends investorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, investorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Investor.
   * @param {investorDeleteArgs} args - Arguments to delete one Investor.
   * @example
   * // Delete one Investor
   * const Investor = await prisma.investor.delete({
   *   where: {
   *     // ... filter to delete one Investor
   *   }
   * })
   * 
   */
  delete<T extends investorDeleteArgs>(args: Prisma.SelectSubset<T, investorDeleteArgs<ExtArgs>>): Prisma.Prisma__investorClient<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Investor.
   * @param {investorUpdateArgs} args - Arguments to update one Investor.
   * @example
   * // Update one Investor
   * const investor = await prisma.investor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends investorUpdateArgs>(args: Prisma.SelectSubset<T, investorUpdateArgs<ExtArgs>>): Prisma.Prisma__investorClient<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Investors.
   * @param {investorDeleteManyArgs} args - Arguments to filter Investors to delete.
   * @example
   * // Delete a few Investors
   * const { count } = await prisma.investor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends investorDeleteManyArgs>(args?: Prisma.SelectSubset<T, investorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Investors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {investorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Investors
   * const investor = await prisma.investor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends investorUpdateManyArgs>(args: Prisma.SelectSubset<T, investorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Investors and returns the data updated in the database.
   * @param {investorUpdateManyAndReturnArgs} args - Arguments to update many Investors.
   * @example
   * // Update many Investors
   * const investor = await prisma.investor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Investors and only return the `company_investor_id`
   * const investorWithCompany_investor_idOnly = await prisma.investor.updateManyAndReturn({
   *   select: { company_investor_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends investorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, investorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Investor.
   * @param {investorUpsertArgs} args - Arguments to update or create a Investor.
   * @example
   * // Update or create a Investor
   * const investor = await prisma.investor.upsert({
   *   create: {
   *     // ... data to create a Investor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Investor we want to update
   *   }
   * })
   */
  upsert<T extends investorUpsertArgs>(args: Prisma.SelectSubset<T, investorUpsertArgs<ExtArgs>>): Prisma.Prisma__investorClient<runtime.Types.Result.GetResult<Prisma.$investorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Investors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {investorCountArgs} args - Arguments to filter Investors to count.
   * @example
   * // Count the number of Investors
   * const count = await prisma.investor.count({
   *   where: {
   *     // ... the filter for the Investors we want to count
   *   }
   * })
  **/
  count<T extends investorCountArgs>(
    args?: Prisma.Subset<T, investorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InvestorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Investor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InvestorAggregateArgs>(args: Prisma.Subset<T, InvestorAggregateArgs>): Prisma.PrismaPromise<GetInvestorAggregateType<T>>

  /**
   * Group by Investor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {investorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends investorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: investorGroupByArgs['orderBy'] }
      : { orderBy?: investorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, investorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvestorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the investor model
 */
readonly fields: investorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for investor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__investorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the investor model
 */
export interface investorFieldRefs {
  readonly company_investor_id: Prisma.FieldRef<"investor", 'String'>
  readonly originator_assigned_investor_id: Prisma.FieldRef<"investor", 'String'>
  readonly investor_name: Prisma.FieldRef<"investor", 'String'>
}
    

// Custom InputTypes
/**
 * investor findUnique
 */
export type investorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * Filter, which investor to fetch.
   */
  where: Prisma.investorWhereUniqueInput
}

/**
 * investor findUniqueOrThrow
 */
export type investorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * Filter, which investor to fetch.
   */
  where: Prisma.investorWhereUniqueInput
}

/**
 * investor findFirst
 */
export type investorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * Filter, which investor to fetch.
   */
  where?: Prisma.investorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of investors to fetch.
   */
  orderBy?: Prisma.investorOrderByWithRelationInput | Prisma.investorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for investors.
   */
  cursor?: Prisma.investorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` investors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` investors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of investors.
   */
  distinct?: Prisma.InvestorScalarFieldEnum | Prisma.InvestorScalarFieldEnum[]
}

/**
 * investor findFirstOrThrow
 */
export type investorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * Filter, which investor to fetch.
   */
  where?: Prisma.investorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of investors to fetch.
   */
  orderBy?: Prisma.investorOrderByWithRelationInput | Prisma.investorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for investors.
   */
  cursor?: Prisma.investorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` investors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` investors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of investors.
   */
  distinct?: Prisma.InvestorScalarFieldEnum | Prisma.InvestorScalarFieldEnum[]
}

/**
 * investor findMany
 */
export type investorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * Filter, which investors to fetch.
   */
  where?: Prisma.investorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of investors to fetch.
   */
  orderBy?: Prisma.investorOrderByWithRelationInput | Prisma.investorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing investors.
   */
  cursor?: Prisma.investorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` investors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` investors.
   */
  skip?: number
  distinct?: Prisma.InvestorScalarFieldEnum | Prisma.InvestorScalarFieldEnum[]
}

/**
 * investor create
 */
export type investorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * The data needed to create a investor.
   */
  data: Prisma.XOR<Prisma.investorCreateInput, Prisma.investorUncheckedCreateInput>
}

/**
 * investor createMany
 */
export type investorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many investors.
   */
  data: Prisma.investorCreateManyInput | Prisma.investorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * investor createManyAndReturn
 */
export type investorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * The data used to create many investors.
   */
  data: Prisma.investorCreateManyInput | Prisma.investorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * investor update
 */
export type investorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * The data needed to update a investor.
   */
  data: Prisma.XOR<Prisma.investorUpdateInput, Prisma.investorUncheckedUpdateInput>
  /**
   * Choose, which investor to update.
   */
  where: Prisma.investorWhereUniqueInput
}

/**
 * investor updateMany
 */
export type investorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update investors.
   */
  data: Prisma.XOR<Prisma.investorUpdateManyMutationInput, Prisma.investorUncheckedUpdateManyInput>
  /**
   * Filter which investors to update
   */
  where?: Prisma.investorWhereInput
  /**
   * Limit how many investors to update.
   */
  limit?: number
}

/**
 * investor updateManyAndReturn
 */
export type investorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * The data used to update investors.
   */
  data: Prisma.XOR<Prisma.investorUpdateManyMutationInput, Prisma.investorUncheckedUpdateManyInput>
  /**
   * Filter which investors to update
   */
  where?: Prisma.investorWhereInput
  /**
   * Limit how many investors to update.
   */
  limit?: number
}

/**
 * investor upsert
 */
export type investorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * The filter to search for the investor to update in case it exists.
   */
  where: Prisma.investorWhereUniqueInput
  /**
   * In case the investor found by the `where` argument doesn't exist, create a new investor with this data.
   */
  create: Prisma.XOR<Prisma.investorCreateInput, Prisma.investorUncheckedCreateInput>
  /**
   * In case the investor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.investorUpdateInput, Prisma.investorUncheckedUpdateInput>
}

/**
 * investor delete
 */
export type investorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
  /**
   * Filter which investor to delete.
   */
  where: Prisma.investorWhereUniqueInput
}

/**
 * investor deleteMany
 */
export type investorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which investors to delete
   */
  where?: Prisma.investorWhereInput
  /**
   * Limit how many investors to delete.
   */
  limit?: number
}

/**
 * investor without action
 */
export type investorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the investor
   */
  select?: Prisma.investorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the investor
   */
  omit?: Prisma.investorOmit<ExtArgs> | null
}
