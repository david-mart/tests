
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `adverse_actions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model adverse_actions
 * 
 */
export type adverse_actionsModel = runtime.Types.Result.DefaultSelection<Prisma.$adverse_actionsPayload>

export type AggregateAdverse_actions = {
  _count: Adverse_actionsCountAggregateOutputType | null
  _min: Adverse_actionsMinAggregateOutputType | null
  _max: Adverse_actionsMaxAggregateOutputType | null
}

export type Adverse_actionsMinAggregateOutputType = {
  code: string | null
  description: string | null
  characteristic: string | null
}

export type Adverse_actionsMaxAggregateOutputType = {
  code: string | null
  description: string | null
  characteristic: string | null
}

export type Adverse_actionsCountAggregateOutputType = {
  code: number
  description: number
  characteristic: number
  _all: number
}


export type Adverse_actionsMinAggregateInputType = {
  code?: true
  description?: true
  characteristic?: true
}

export type Adverse_actionsMaxAggregateInputType = {
  code?: true
  description?: true
  characteristic?: true
}

export type Adverse_actionsCountAggregateInputType = {
  code?: true
  description?: true
  characteristic?: true
  _all?: true
}

export type Adverse_actionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which adverse_actions to aggregate.
   */
  where?: Prisma.adverse_actionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of adverse_actions to fetch.
   */
  orderBy?: Prisma.adverse_actionsOrderByWithRelationInput | Prisma.adverse_actionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.adverse_actionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` adverse_actions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` adverse_actions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned adverse_actions
  **/
  _count?: true | Adverse_actionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Adverse_actionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Adverse_actionsMaxAggregateInputType
}

export type GetAdverse_actionsAggregateType<T extends Adverse_actionsAggregateArgs> = {
      [P in keyof T & keyof AggregateAdverse_actions]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdverse_actions[P]>
    : Prisma.GetScalarType<T[P], AggregateAdverse_actions[P]>
}




export type adverse_actionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.adverse_actionsWhereInput
  orderBy?: Prisma.adverse_actionsOrderByWithAggregationInput | Prisma.adverse_actionsOrderByWithAggregationInput[]
  by: Prisma.Adverse_actionsScalarFieldEnum[] | Prisma.Adverse_actionsScalarFieldEnum
  having?: Prisma.adverse_actionsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Adverse_actionsCountAggregateInputType | true
  _min?: Adverse_actionsMinAggregateInputType
  _max?: Adverse_actionsMaxAggregateInputType
}

export type Adverse_actionsGroupByOutputType = {
  code: string
  description: string
  characteristic: string | null
  _count: Adverse_actionsCountAggregateOutputType | null
  _min: Adverse_actionsMinAggregateOutputType | null
  _max: Adverse_actionsMaxAggregateOutputType | null
}

type GetAdverse_actionsGroupByPayload<T extends adverse_actionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Adverse_actionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Adverse_actionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Adverse_actionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Adverse_actionsGroupByOutputType[P]>
      }
    >
  >



export type adverse_actionsWhereInput = {
  AND?: Prisma.adverse_actionsWhereInput | Prisma.adverse_actionsWhereInput[]
  OR?: Prisma.adverse_actionsWhereInput[]
  NOT?: Prisma.adverse_actionsWhereInput | Prisma.adverse_actionsWhereInput[]
  code?: Prisma.StringFilter<"adverse_actions"> | string
  description?: Prisma.StringFilter<"adverse_actions"> | string
  characteristic?: Prisma.StringNullableFilter<"adverse_actions"> | string | null
  second_look_adverse_actions?: Prisma.Second_look_adverse_actionsListRelationFilter
  second_look_adverse_actions_staging?: Prisma.Second_look_adverse_actions_stagingListRelationFilter
}

export type adverse_actionsOrderByWithRelationInput = {
  code?: Prisma.SortOrder
  description?: Prisma.SortOrder
  characteristic?: Prisma.SortOrderInput | Prisma.SortOrder
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsOrderByRelationAggregateInput
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingOrderByRelationAggregateInput
}

export type adverse_actionsWhereUniqueInput = Prisma.AtLeast<{
  code?: string
  AND?: Prisma.adverse_actionsWhereInput | Prisma.adverse_actionsWhereInput[]
  OR?: Prisma.adverse_actionsWhereInput[]
  NOT?: Prisma.adverse_actionsWhereInput | Prisma.adverse_actionsWhereInput[]
  description?: Prisma.StringFilter<"adverse_actions"> | string
  characteristic?: Prisma.StringNullableFilter<"adverse_actions"> | string | null
  second_look_adverse_actions?: Prisma.Second_look_adverse_actionsListRelationFilter
  second_look_adverse_actions_staging?: Prisma.Second_look_adverse_actions_stagingListRelationFilter
}, "code">

export type adverse_actionsOrderByWithAggregationInput = {
  code?: Prisma.SortOrder
  description?: Prisma.SortOrder
  characteristic?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.adverse_actionsCountOrderByAggregateInput
  _max?: Prisma.adverse_actionsMaxOrderByAggregateInput
  _min?: Prisma.adverse_actionsMinOrderByAggregateInput
}

export type adverse_actionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.adverse_actionsScalarWhereWithAggregatesInput | Prisma.adverse_actionsScalarWhereWithAggregatesInput[]
  OR?: Prisma.adverse_actionsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.adverse_actionsScalarWhereWithAggregatesInput | Prisma.adverse_actionsScalarWhereWithAggregatesInput[]
  code?: Prisma.StringWithAggregatesFilter<"adverse_actions"> | string
  description?: Prisma.StringWithAggregatesFilter<"adverse_actions"> | string
  characteristic?: Prisma.StringNullableWithAggregatesFilter<"adverse_actions"> | string | null
}

export type adverse_actionsCreateInput = {
  code: string
  description: string
  characteristic?: string | null
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsCreateNestedManyWithoutAdverse_actionsInput
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingCreateNestedManyWithoutAdverse_actionsInput
}

export type adverse_actionsUncheckedCreateInput = {
  code: string
  description: string
  characteristic?: string | null
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsUncheckedCreateNestedManyWithoutAdverse_actionsInput
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingUncheckedCreateNestedManyWithoutAdverse_actionsInput
}

export type adverse_actionsUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  characteristic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsUpdateManyWithoutAdverse_actionsNestedInput
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingUpdateManyWithoutAdverse_actionsNestedInput
}

export type adverse_actionsUncheckedUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  characteristic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsUncheckedUpdateManyWithoutAdverse_actionsNestedInput
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingUncheckedUpdateManyWithoutAdverse_actionsNestedInput
}

export type adverse_actionsCreateManyInput = {
  code: string
  description: string
  characteristic?: string | null
}

export type adverse_actionsUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  characteristic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type adverse_actionsUncheckedUpdateManyInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  characteristic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type adverse_actionsCountOrderByAggregateInput = {
  code?: Prisma.SortOrder
  description?: Prisma.SortOrder
  characteristic?: Prisma.SortOrder
}

export type adverse_actionsMaxOrderByAggregateInput = {
  code?: Prisma.SortOrder
  description?: Prisma.SortOrder
  characteristic?: Prisma.SortOrder
}

export type adverse_actionsMinOrderByAggregateInput = {
  code?: Prisma.SortOrder
  description?: Prisma.SortOrder
  characteristic?: Prisma.SortOrder
}

export type Adverse_actionsScalarRelationFilter = {
  is?: Prisma.adverse_actionsWhereInput
  isNot?: Prisma.adverse_actionsWhereInput
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type adverse_actionsCreateNestedOneWithoutSecond_look_adverse_actionsInput = {
  create?: Prisma.XOR<Prisma.adverse_actionsCreateWithoutSecond_look_adverse_actionsInput, Prisma.adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actionsInput>
  connectOrCreate?: Prisma.adverse_actionsCreateOrConnectWithoutSecond_look_adverse_actionsInput
  connect?: Prisma.adverse_actionsWhereUniqueInput
}

export type adverse_actionsUpdateOneRequiredWithoutSecond_look_adverse_actionsNestedInput = {
  create?: Prisma.XOR<Prisma.adverse_actionsCreateWithoutSecond_look_adverse_actionsInput, Prisma.adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actionsInput>
  connectOrCreate?: Prisma.adverse_actionsCreateOrConnectWithoutSecond_look_adverse_actionsInput
  upsert?: Prisma.adverse_actionsUpsertWithoutSecond_look_adverse_actionsInput
  connect?: Prisma.adverse_actionsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.adverse_actionsUpdateToOneWithWhereWithoutSecond_look_adverse_actionsInput, Prisma.adverse_actionsUpdateWithoutSecond_look_adverse_actionsInput>, Prisma.adverse_actionsUncheckedUpdateWithoutSecond_look_adverse_actionsInput>
}

export type adverse_actionsCreateNestedOneWithoutSecond_look_adverse_actions_stagingInput = {
  create?: Prisma.XOR<Prisma.adverse_actionsCreateWithoutSecond_look_adverse_actions_stagingInput, Prisma.adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actions_stagingInput>
  connectOrCreate?: Prisma.adverse_actionsCreateOrConnectWithoutSecond_look_adverse_actions_stagingInput
  connect?: Prisma.adverse_actionsWhereUniqueInput
}

export type adverse_actionsUpdateOneRequiredWithoutSecond_look_adverse_actions_stagingNestedInput = {
  create?: Prisma.XOR<Prisma.adverse_actionsCreateWithoutSecond_look_adverse_actions_stagingInput, Prisma.adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actions_stagingInput>
  connectOrCreate?: Prisma.adverse_actionsCreateOrConnectWithoutSecond_look_adverse_actions_stagingInput
  upsert?: Prisma.adverse_actionsUpsertWithoutSecond_look_adverse_actions_stagingInput
  connect?: Prisma.adverse_actionsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.adverse_actionsUpdateToOneWithWhereWithoutSecond_look_adverse_actions_stagingInput, Prisma.adverse_actionsUpdateWithoutSecond_look_adverse_actions_stagingInput>, Prisma.adverse_actionsUncheckedUpdateWithoutSecond_look_adverse_actions_stagingInput>
}

export type adverse_actionsCreateWithoutSecond_look_adverse_actionsInput = {
  code: string
  description: string
  characteristic?: string | null
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingCreateNestedManyWithoutAdverse_actionsInput
}

export type adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actionsInput = {
  code: string
  description: string
  characteristic?: string | null
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingUncheckedCreateNestedManyWithoutAdverse_actionsInput
}

export type adverse_actionsCreateOrConnectWithoutSecond_look_adverse_actionsInput = {
  where: Prisma.adverse_actionsWhereUniqueInput
  create: Prisma.XOR<Prisma.adverse_actionsCreateWithoutSecond_look_adverse_actionsInput, Prisma.adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actionsInput>
}

export type adverse_actionsUpsertWithoutSecond_look_adverse_actionsInput = {
  update: Prisma.XOR<Prisma.adverse_actionsUpdateWithoutSecond_look_adverse_actionsInput, Prisma.adverse_actionsUncheckedUpdateWithoutSecond_look_adverse_actionsInput>
  create: Prisma.XOR<Prisma.adverse_actionsCreateWithoutSecond_look_adverse_actionsInput, Prisma.adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actionsInput>
  where?: Prisma.adverse_actionsWhereInput
}

export type adverse_actionsUpdateToOneWithWhereWithoutSecond_look_adverse_actionsInput = {
  where?: Prisma.adverse_actionsWhereInput
  data: Prisma.XOR<Prisma.adverse_actionsUpdateWithoutSecond_look_adverse_actionsInput, Prisma.adverse_actionsUncheckedUpdateWithoutSecond_look_adverse_actionsInput>
}

export type adverse_actionsUpdateWithoutSecond_look_adverse_actionsInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  characteristic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingUpdateManyWithoutAdverse_actionsNestedInput
}

export type adverse_actionsUncheckedUpdateWithoutSecond_look_adverse_actionsInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  characteristic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  second_look_adverse_actions_staging?: Prisma.second_look_adverse_actions_stagingUncheckedUpdateManyWithoutAdverse_actionsNestedInput
}

export type adverse_actionsCreateWithoutSecond_look_adverse_actions_stagingInput = {
  code: string
  description: string
  characteristic?: string | null
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsCreateNestedManyWithoutAdverse_actionsInput
}

export type adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actions_stagingInput = {
  code: string
  description: string
  characteristic?: string | null
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsUncheckedCreateNestedManyWithoutAdverse_actionsInput
}

export type adverse_actionsCreateOrConnectWithoutSecond_look_adverse_actions_stagingInput = {
  where: Prisma.adverse_actionsWhereUniqueInput
  create: Prisma.XOR<Prisma.adverse_actionsCreateWithoutSecond_look_adverse_actions_stagingInput, Prisma.adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actions_stagingInput>
}

export type adverse_actionsUpsertWithoutSecond_look_adverse_actions_stagingInput = {
  update: Prisma.XOR<Prisma.adverse_actionsUpdateWithoutSecond_look_adverse_actions_stagingInput, Prisma.adverse_actionsUncheckedUpdateWithoutSecond_look_adverse_actions_stagingInput>
  create: Prisma.XOR<Prisma.adverse_actionsCreateWithoutSecond_look_adverse_actions_stagingInput, Prisma.adverse_actionsUncheckedCreateWithoutSecond_look_adverse_actions_stagingInput>
  where?: Prisma.adverse_actionsWhereInput
}

export type adverse_actionsUpdateToOneWithWhereWithoutSecond_look_adverse_actions_stagingInput = {
  where?: Prisma.adverse_actionsWhereInput
  data: Prisma.XOR<Prisma.adverse_actionsUpdateWithoutSecond_look_adverse_actions_stagingInput, Prisma.adverse_actionsUncheckedUpdateWithoutSecond_look_adverse_actions_stagingInput>
}

export type adverse_actionsUpdateWithoutSecond_look_adverse_actions_stagingInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  characteristic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsUpdateManyWithoutAdverse_actionsNestedInput
}

export type adverse_actionsUncheckedUpdateWithoutSecond_look_adverse_actions_stagingInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  characteristic?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  second_look_adverse_actions?: Prisma.second_look_adverse_actionsUncheckedUpdateManyWithoutAdverse_actionsNestedInput
}


/**
 * Count Type Adverse_actionsCountOutputType
 */

export type Adverse_actionsCountOutputType = {
  second_look_adverse_actions: number
  second_look_adverse_actions_staging: number
}

export type Adverse_actionsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  second_look_adverse_actions?: boolean | Adverse_actionsCountOutputTypeCountSecond_look_adverse_actionsArgs
  second_look_adverse_actions_staging?: boolean | Adverse_actionsCountOutputTypeCountSecond_look_adverse_actions_stagingArgs
}

/**
 * Adverse_actionsCountOutputType without action
 */
export type Adverse_actionsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Adverse_actionsCountOutputType
   */
  select?: Prisma.Adverse_actionsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Adverse_actionsCountOutputType without action
 */
export type Adverse_actionsCountOutputTypeCountSecond_look_adverse_actionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.second_look_adverse_actionsWhereInput
}

/**
 * Adverse_actionsCountOutputType without action
 */
export type Adverse_actionsCountOutputTypeCountSecond_look_adverse_actions_stagingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.second_look_adverse_actions_stagingWhereInput
}


export type adverse_actionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  code?: boolean
  description?: boolean
  characteristic?: boolean
  second_look_adverse_actions?: boolean | Prisma.adverse_actions$second_look_adverse_actionsArgs<ExtArgs>
  second_look_adverse_actions_staging?: boolean | Prisma.adverse_actions$second_look_adverse_actions_stagingArgs<ExtArgs>
  _count?: boolean | Prisma.Adverse_actionsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adverse_actions"]>

export type adverse_actionsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  code?: boolean
  description?: boolean
  characteristic?: boolean
}, ExtArgs["result"]["adverse_actions"]>

export type adverse_actionsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  code?: boolean
  description?: boolean
  characteristic?: boolean
}, ExtArgs["result"]["adverse_actions"]>

export type adverse_actionsSelectScalar = {
  code?: boolean
  description?: boolean
  characteristic?: boolean
}

export type adverse_actionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"code" | "description" | "characteristic", ExtArgs["result"]["adverse_actions"]>
export type adverse_actionsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  second_look_adverse_actions?: boolean | Prisma.adverse_actions$second_look_adverse_actionsArgs<ExtArgs>
  second_look_adverse_actions_staging?: boolean | Prisma.adverse_actions$second_look_adverse_actions_stagingArgs<ExtArgs>
  _count?: boolean | Prisma.Adverse_actionsCountOutputTypeDefaultArgs<ExtArgs>
}
export type adverse_actionsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type adverse_actionsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $adverse_actionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "adverse_actions"
  objects: {
    second_look_adverse_actions: Prisma.$second_look_adverse_actionsPayload<ExtArgs>[]
    second_look_adverse_actions_staging: Prisma.$second_look_adverse_actions_stagingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    code: string
    description: string
    characteristic: string | null
  }, ExtArgs["result"]["adverse_actions"]>
  composites: {}
}

export type adverse_actionsGetPayload<S extends boolean | null | undefined | adverse_actionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload, S>

export type adverse_actionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<adverse_actionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Adverse_actionsCountAggregateInputType | true
  }

export interface adverse_actionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['adverse_actions'], meta: { name: 'adverse_actions' } }
  /**
   * Find zero or one Adverse_actions that matches the filter.
   * @param {adverse_actionsFindUniqueArgs} args - Arguments to find a Adverse_actions
   * @example
   * // Get one Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends adverse_actionsFindUniqueArgs>(args: Prisma.SelectSubset<T, adverse_actionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__adverse_actionsClient<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Adverse_actions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {adverse_actionsFindUniqueOrThrowArgs} args - Arguments to find a Adverse_actions
   * @example
   * // Get one Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends adverse_actionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, adverse_actionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__adverse_actionsClient<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Adverse_actions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {adverse_actionsFindFirstArgs} args - Arguments to find a Adverse_actions
   * @example
   * // Get one Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends adverse_actionsFindFirstArgs>(args?: Prisma.SelectSubset<T, adverse_actionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__adverse_actionsClient<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Adverse_actions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {adverse_actionsFindFirstOrThrowArgs} args - Arguments to find a Adverse_actions
   * @example
   * // Get one Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends adverse_actionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, adverse_actionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__adverse_actionsClient<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Adverse_actions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {adverse_actionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.findMany()
   * 
   * // Get first 10 Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.findMany({ take: 10 })
   * 
   * // Only select the `code`
   * const adverse_actionsWithCodeOnly = await prisma.adverse_actions.findMany({ select: { code: true } })
   * 
   */
  findMany<T extends adverse_actionsFindManyArgs>(args?: Prisma.SelectSubset<T, adverse_actionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Adverse_actions.
   * @param {adverse_actionsCreateArgs} args - Arguments to create a Adverse_actions.
   * @example
   * // Create one Adverse_actions
   * const Adverse_actions = await prisma.adverse_actions.create({
   *   data: {
   *     // ... data to create a Adverse_actions
   *   }
   * })
   * 
   */
  create<T extends adverse_actionsCreateArgs>(args: Prisma.SelectSubset<T, adverse_actionsCreateArgs<ExtArgs>>): Prisma.Prisma__adverse_actionsClient<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Adverse_actions.
   * @param {adverse_actionsCreateManyArgs} args - Arguments to create many Adverse_actions.
   * @example
   * // Create many Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends adverse_actionsCreateManyArgs>(args?: Prisma.SelectSubset<T, adverse_actionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Adverse_actions and returns the data saved in the database.
   * @param {adverse_actionsCreateManyAndReturnArgs} args - Arguments to create many Adverse_actions.
   * @example
   * // Create many Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Adverse_actions and only return the `code`
   * const adverse_actionsWithCodeOnly = await prisma.adverse_actions.createManyAndReturn({
   *   select: { code: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends adverse_actionsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, adverse_actionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Adverse_actions.
   * @param {adverse_actionsDeleteArgs} args - Arguments to delete one Adverse_actions.
   * @example
   * // Delete one Adverse_actions
   * const Adverse_actions = await prisma.adverse_actions.delete({
   *   where: {
   *     // ... filter to delete one Adverse_actions
   *   }
   * })
   * 
   */
  delete<T extends adverse_actionsDeleteArgs>(args: Prisma.SelectSubset<T, adverse_actionsDeleteArgs<ExtArgs>>): Prisma.Prisma__adverse_actionsClient<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Adverse_actions.
   * @param {adverse_actionsUpdateArgs} args - Arguments to update one Adverse_actions.
   * @example
   * // Update one Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends adverse_actionsUpdateArgs>(args: Prisma.SelectSubset<T, adverse_actionsUpdateArgs<ExtArgs>>): Prisma.Prisma__adverse_actionsClient<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Adverse_actions.
   * @param {adverse_actionsDeleteManyArgs} args - Arguments to filter Adverse_actions to delete.
   * @example
   * // Delete a few Adverse_actions
   * const { count } = await prisma.adverse_actions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends adverse_actionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, adverse_actionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Adverse_actions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {adverse_actionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends adverse_actionsUpdateManyArgs>(args: Prisma.SelectSubset<T, adverse_actionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Adverse_actions and returns the data updated in the database.
   * @param {adverse_actionsUpdateManyAndReturnArgs} args - Arguments to update many Adverse_actions.
   * @example
   * // Update many Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Adverse_actions and only return the `code`
   * const adverse_actionsWithCodeOnly = await prisma.adverse_actions.updateManyAndReturn({
   *   select: { code: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends adverse_actionsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, adverse_actionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Adverse_actions.
   * @param {adverse_actionsUpsertArgs} args - Arguments to update or create a Adverse_actions.
   * @example
   * // Update or create a Adverse_actions
   * const adverse_actions = await prisma.adverse_actions.upsert({
   *   create: {
   *     // ... data to create a Adverse_actions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Adverse_actions we want to update
   *   }
   * })
   */
  upsert<T extends adverse_actionsUpsertArgs>(args: Prisma.SelectSubset<T, adverse_actionsUpsertArgs<ExtArgs>>): Prisma.Prisma__adverse_actionsClient<runtime.Types.Result.GetResult<Prisma.$adverse_actionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Adverse_actions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {adverse_actionsCountArgs} args - Arguments to filter Adverse_actions to count.
   * @example
   * // Count the number of Adverse_actions
   * const count = await prisma.adverse_actions.count({
   *   where: {
   *     // ... the filter for the Adverse_actions we want to count
   *   }
   * })
  **/
  count<T extends adverse_actionsCountArgs>(
    args?: Prisma.Subset<T, adverse_actionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Adverse_actionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Adverse_actions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Adverse_actionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Adverse_actionsAggregateArgs>(args: Prisma.Subset<T, Adverse_actionsAggregateArgs>): Prisma.PrismaPromise<GetAdverse_actionsAggregateType<T>>

  /**
   * Group by Adverse_actions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {adverse_actionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends adverse_actionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: adverse_actionsGroupByArgs['orderBy'] }
      : { orderBy?: adverse_actionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, adverse_actionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdverse_actionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the adverse_actions model
 */
readonly fields: adverse_actionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for adverse_actions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__adverse_actionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  second_look_adverse_actions<T extends Prisma.adverse_actions$second_look_adverse_actionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.adverse_actions$second_look_adverse_actionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$second_look_adverse_actionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  second_look_adverse_actions_staging<T extends Prisma.adverse_actions$second_look_adverse_actions_stagingArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.adverse_actions$second_look_adverse_actions_stagingArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$second_look_adverse_actions_stagingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the adverse_actions model
 */
export interface adverse_actionsFieldRefs {
  readonly code: Prisma.FieldRef<"adverse_actions", 'String'>
  readonly description: Prisma.FieldRef<"adverse_actions", 'String'>
  readonly characteristic: Prisma.FieldRef<"adverse_actions", 'String'>
}
    

// Custom InputTypes
/**
 * adverse_actions findUnique
 */
export type adverse_actionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
  /**
   * Filter, which adverse_actions to fetch.
   */
  where: Prisma.adverse_actionsWhereUniqueInput
}

/**
 * adverse_actions findUniqueOrThrow
 */
export type adverse_actionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
  /**
   * Filter, which adverse_actions to fetch.
   */
  where: Prisma.adverse_actionsWhereUniqueInput
}

/**
 * adverse_actions findFirst
 */
export type adverse_actionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
  /**
   * Filter, which adverse_actions to fetch.
   */
  where?: Prisma.adverse_actionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of adverse_actions to fetch.
   */
  orderBy?: Prisma.adverse_actionsOrderByWithRelationInput | Prisma.adverse_actionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for adverse_actions.
   */
  cursor?: Prisma.adverse_actionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` adverse_actions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` adverse_actions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of adverse_actions.
   */
  distinct?: Prisma.Adverse_actionsScalarFieldEnum | Prisma.Adverse_actionsScalarFieldEnum[]
}

/**
 * adverse_actions findFirstOrThrow
 */
export type adverse_actionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
  /**
   * Filter, which adverse_actions to fetch.
   */
  where?: Prisma.adverse_actionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of adverse_actions to fetch.
   */
  orderBy?: Prisma.adverse_actionsOrderByWithRelationInput | Prisma.adverse_actionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for adverse_actions.
   */
  cursor?: Prisma.adverse_actionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` adverse_actions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` adverse_actions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of adverse_actions.
   */
  distinct?: Prisma.Adverse_actionsScalarFieldEnum | Prisma.Adverse_actionsScalarFieldEnum[]
}

/**
 * adverse_actions findMany
 */
export type adverse_actionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
  /**
   * Filter, which adverse_actions to fetch.
   */
  where?: Prisma.adverse_actionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of adverse_actions to fetch.
   */
  orderBy?: Prisma.adverse_actionsOrderByWithRelationInput | Prisma.adverse_actionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing adverse_actions.
   */
  cursor?: Prisma.adverse_actionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` adverse_actions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` adverse_actions.
   */
  skip?: number
  distinct?: Prisma.Adverse_actionsScalarFieldEnum | Prisma.Adverse_actionsScalarFieldEnum[]
}

/**
 * adverse_actions create
 */
export type adverse_actionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
  /**
   * The data needed to create a adverse_actions.
   */
  data: Prisma.XOR<Prisma.adverse_actionsCreateInput, Prisma.adverse_actionsUncheckedCreateInput>
}

/**
 * adverse_actions createMany
 */
export type adverse_actionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many adverse_actions.
   */
  data: Prisma.adverse_actionsCreateManyInput | Prisma.adverse_actionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * adverse_actions createManyAndReturn
 */
export type adverse_actionsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * The data used to create many adverse_actions.
   */
  data: Prisma.adverse_actionsCreateManyInput | Prisma.adverse_actionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * adverse_actions update
 */
export type adverse_actionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
  /**
   * The data needed to update a adverse_actions.
   */
  data: Prisma.XOR<Prisma.adverse_actionsUpdateInput, Prisma.adverse_actionsUncheckedUpdateInput>
  /**
   * Choose, which adverse_actions to update.
   */
  where: Prisma.adverse_actionsWhereUniqueInput
}

/**
 * adverse_actions updateMany
 */
export type adverse_actionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update adverse_actions.
   */
  data: Prisma.XOR<Prisma.adverse_actionsUpdateManyMutationInput, Prisma.adverse_actionsUncheckedUpdateManyInput>
  /**
   * Filter which adverse_actions to update
   */
  where?: Prisma.adverse_actionsWhereInput
  /**
   * Limit how many adverse_actions to update.
   */
  limit?: number
}

/**
 * adverse_actions updateManyAndReturn
 */
export type adverse_actionsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * The data used to update adverse_actions.
   */
  data: Prisma.XOR<Prisma.adverse_actionsUpdateManyMutationInput, Prisma.adverse_actionsUncheckedUpdateManyInput>
  /**
   * Filter which adverse_actions to update
   */
  where?: Prisma.adverse_actionsWhereInput
  /**
   * Limit how many adverse_actions to update.
   */
  limit?: number
}

/**
 * adverse_actions upsert
 */
export type adverse_actionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
  /**
   * The filter to search for the adverse_actions to update in case it exists.
   */
  where: Prisma.adverse_actionsWhereUniqueInput
  /**
   * In case the adverse_actions found by the `where` argument doesn't exist, create a new adverse_actions with this data.
   */
  create: Prisma.XOR<Prisma.adverse_actionsCreateInput, Prisma.adverse_actionsUncheckedCreateInput>
  /**
   * In case the adverse_actions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.adverse_actionsUpdateInput, Prisma.adverse_actionsUncheckedUpdateInput>
}

/**
 * adverse_actions delete
 */
export type adverse_actionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
  /**
   * Filter which adverse_actions to delete.
   */
  where: Prisma.adverse_actionsWhereUniqueInput
}

/**
 * adverse_actions deleteMany
 */
export type adverse_actionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which adverse_actions to delete
   */
  where?: Prisma.adverse_actionsWhereInput
  /**
   * Limit how many adverse_actions to delete.
   */
  limit?: number
}

/**
 * adverse_actions.second_look_adverse_actions
 */
export type adverse_actions$second_look_adverse_actionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the second_look_adverse_actions
   */
  select?: Prisma.second_look_adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the second_look_adverse_actions
   */
  omit?: Prisma.second_look_adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.second_look_adverse_actionsInclude<ExtArgs> | null
  where?: Prisma.second_look_adverse_actionsWhereInput
  orderBy?: Prisma.second_look_adverse_actionsOrderByWithRelationInput | Prisma.second_look_adverse_actionsOrderByWithRelationInput[]
  cursor?: Prisma.second_look_adverse_actionsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Second_look_adverse_actionsScalarFieldEnum | Prisma.Second_look_adverse_actionsScalarFieldEnum[]
}

/**
 * adverse_actions.second_look_adverse_actions_staging
 */
export type adverse_actions$second_look_adverse_actions_stagingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the second_look_adverse_actions_staging
   */
  select?: Prisma.second_look_adverse_actions_stagingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the second_look_adverse_actions_staging
   */
  omit?: Prisma.second_look_adverse_actions_stagingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.second_look_adverse_actions_stagingInclude<ExtArgs> | null
  where?: Prisma.second_look_adverse_actions_stagingWhereInput
  orderBy?: Prisma.second_look_adverse_actions_stagingOrderByWithRelationInput | Prisma.second_look_adverse_actions_stagingOrderByWithRelationInput[]
  cursor?: Prisma.second_look_adverse_actions_stagingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Second_look_adverse_actions_stagingScalarFieldEnum | Prisma.Second_look_adverse_actions_stagingScalarFieldEnum[]
}

/**
 * adverse_actions without action
 */
export type adverse_actionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the adverse_actions
   */
  select?: Prisma.adverse_actionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the adverse_actions
   */
  omit?: Prisma.adverse_actionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.adverse_actionsInclude<ExtArgs> | null
}
