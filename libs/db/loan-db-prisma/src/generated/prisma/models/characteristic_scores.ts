
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `characteristic_scores` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model characteristic_scores
 * 
 */
export type characteristic_scoresModel = runtime.Types.Result.DefaultSelection<Prisma.$characteristic_scoresPayload>

export type AggregateCharacteristic_scores = {
  _count: Characteristic_scoresCountAggregateOutputType | null
  _avg: Characteristic_scoresAvgAggregateOutputType | null
  _sum: Characteristic_scoresSumAggregateOutputType | null
  _min: Characteristic_scoresMinAggregateOutputType | null
  _max: Characteristic_scoresMaxAggregateOutputType | null
}

export type Characteristic_scoresAvgAggregateOutputType = {
  id: number | null
  partial_score: runtime.Decimal | null
  version: number | null
}

export type Characteristic_scoresSumAggregateOutputType = {
  id: number | null
  partial_score: runtime.Decimal | null
  version: number | null
}

export type Characteristic_scoresMinAggregateOutputType = {
  id: number | null
  characteristic: string | null
  partial_score: runtime.Decimal | null
  created_at: Date | null
  updated_at: Date | null
  version: number | null
}

export type Characteristic_scoresMaxAggregateOutputType = {
  id: number | null
  characteristic: string | null
  partial_score: runtime.Decimal | null
  created_at: Date | null
  updated_at: Date | null
  version: number | null
}

export type Characteristic_scoresCountAggregateOutputType = {
  id: number
  characteristic: number
  partial_score: number
  created_at: number
  updated_at: number
  version: number
  _all: number
}


export type Characteristic_scoresAvgAggregateInputType = {
  id?: true
  partial_score?: true
  version?: true
}

export type Characteristic_scoresSumAggregateInputType = {
  id?: true
  partial_score?: true
  version?: true
}

export type Characteristic_scoresMinAggregateInputType = {
  id?: true
  characteristic?: true
  partial_score?: true
  created_at?: true
  updated_at?: true
  version?: true
}

export type Characteristic_scoresMaxAggregateInputType = {
  id?: true
  characteristic?: true
  partial_score?: true
  created_at?: true
  updated_at?: true
  version?: true
}

export type Characteristic_scoresCountAggregateInputType = {
  id?: true
  characteristic?: true
  partial_score?: true
  created_at?: true
  updated_at?: true
  version?: true
  _all?: true
}

export type Characteristic_scoresAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which characteristic_scores to aggregate.
   */
  where?: Prisma.characteristic_scoresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of characteristic_scores to fetch.
   */
  orderBy?: Prisma.characteristic_scoresOrderByWithRelationInput | Prisma.characteristic_scoresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.characteristic_scoresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` characteristic_scores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` characteristic_scores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned characteristic_scores
  **/
  _count?: true | Characteristic_scoresCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Characteristic_scoresAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Characteristic_scoresSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Characteristic_scoresMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Characteristic_scoresMaxAggregateInputType
}

export type GetCharacteristic_scoresAggregateType<T extends Characteristic_scoresAggregateArgs> = {
      [P in keyof T & keyof AggregateCharacteristic_scores]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCharacteristic_scores[P]>
    : Prisma.GetScalarType<T[P], AggregateCharacteristic_scores[P]>
}




export type characteristic_scoresGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.characteristic_scoresWhereInput
  orderBy?: Prisma.characteristic_scoresOrderByWithAggregationInput | Prisma.characteristic_scoresOrderByWithAggregationInput[]
  by: Prisma.Characteristic_scoresScalarFieldEnum[] | Prisma.Characteristic_scoresScalarFieldEnum
  having?: Prisma.characteristic_scoresScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Characteristic_scoresCountAggregateInputType | true
  _avg?: Characteristic_scoresAvgAggregateInputType
  _sum?: Characteristic_scoresSumAggregateInputType
  _min?: Characteristic_scoresMinAggregateInputType
  _max?: Characteristic_scoresMaxAggregateInputType
}

export type Characteristic_scoresGroupByOutputType = {
  id: number
  characteristic: string
  partial_score: runtime.Decimal
  created_at: Date | null
  updated_at: Date | null
  version: number | null
  _count: Characteristic_scoresCountAggregateOutputType | null
  _avg: Characteristic_scoresAvgAggregateOutputType | null
  _sum: Characteristic_scoresSumAggregateOutputType | null
  _min: Characteristic_scoresMinAggregateOutputType | null
  _max: Characteristic_scoresMaxAggregateOutputType | null
}

type GetCharacteristic_scoresGroupByPayload<T extends characteristic_scoresGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Characteristic_scoresGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Characteristic_scoresGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Characteristic_scoresGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Characteristic_scoresGroupByOutputType[P]>
      }
    >
  >



export type characteristic_scoresWhereInput = {
  AND?: Prisma.characteristic_scoresWhereInput | Prisma.characteristic_scoresWhereInput[]
  OR?: Prisma.characteristic_scoresWhereInput[]
  NOT?: Prisma.characteristic_scoresWhereInput | Prisma.characteristic_scoresWhereInput[]
  id?: Prisma.IntFilter<"characteristic_scores"> | number
  characteristic?: Prisma.StringFilter<"characteristic_scores"> | string
  partial_score?: Prisma.DecimalFilter<"characteristic_scores"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  created_at?: Prisma.DateTimeNullableFilter<"characteristic_scores"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"characteristic_scores"> | Date | string | null
  version?: Prisma.IntNullableFilter<"characteristic_scores"> | number | null
}

export type characteristic_scoresOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  characteristic?: Prisma.SortOrder
  partial_score?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  version?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type characteristic_scoresWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.characteristic_scoresWhereInput | Prisma.characteristic_scoresWhereInput[]
  OR?: Prisma.characteristic_scoresWhereInput[]
  NOT?: Prisma.characteristic_scoresWhereInput | Prisma.characteristic_scoresWhereInput[]
  characteristic?: Prisma.StringFilter<"characteristic_scores"> | string
  partial_score?: Prisma.DecimalFilter<"characteristic_scores"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  created_at?: Prisma.DateTimeNullableFilter<"characteristic_scores"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"characteristic_scores"> | Date | string | null
  version?: Prisma.IntNullableFilter<"characteristic_scores"> | number | null
}, "id">

export type characteristic_scoresOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  characteristic?: Prisma.SortOrder
  partial_score?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  version?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.characteristic_scoresCountOrderByAggregateInput
  _avg?: Prisma.characteristic_scoresAvgOrderByAggregateInput
  _max?: Prisma.characteristic_scoresMaxOrderByAggregateInput
  _min?: Prisma.characteristic_scoresMinOrderByAggregateInput
  _sum?: Prisma.characteristic_scoresSumOrderByAggregateInput
}

export type characteristic_scoresScalarWhereWithAggregatesInput = {
  AND?: Prisma.characteristic_scoresScalarWhereWithAggregatesInput | Prisma.characteristic_scoresScalarWhereWithAggregatesInput[]
  OR?: Prisma.characteristic_scoresScalarWhereWithAggregatesInput[]
  NOT?: Prisma.characteristic_scoresScalarWhereWithAggregatesInput | Prisma.characteristic_scoresScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"characteristic_scores"> | number
  characteristic?: Prisma.StringWithAggregatesFilter<"characteristic_scores"> | string
  partial_score?: Prisma.DecimalWithAggregatesFilter<"characteristic_scores"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"characteristic_scores"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"characteristic_scores"> | Date | string | null
  version?: Prisma.IntNullableWithAggregatesFilter<"characteristic_scores"> | number | null
}

export type characteristic_scoresUpdateInput = {
  characteristic?: Prisma.StringFieldUpdateOperationsInput | string
  partial_score?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  version?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type characteristic_scoresUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  characteristic?: Prisma.StringFieldUpdateOperationsInput | string
  partial_score?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  version?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type characteristic_scoresUpdateManyMutationInput = {
  characteristic?: Prisma.StringFieldUpdateOperationsInput | string
  partial_score?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  version?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type characteristic_scoresUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  characteristic?: Prisma.StringFieldUpdateOperationsInput | string
  partial_score?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  version?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type characteristic_scoresCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  characteristic?: Prisma.SortOrder
  partial_score?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  version?: Prisma.SortOrder
}

export type characteristic_scoresAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  partial_score?: Prisma.SortOrder
  version?: Prisma.SortOrder
}

export type characteristic_scoresMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  characteristic?: Prisma.SortOrder
  partial_score?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  version?: Prisma.SortOrder
}

export type characteristic_scoresMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  characteristic?: Prisma.SortOrder
  partial_score?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  version?: Prisma.SortOrder
}

export type characteristic_scoresSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  partial_score?: Prisma.SortOrder
  version?: Prisma.SortOrder
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type characteristic_scoresSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  characteristic?: boolean
  partial_score?: boolean
  created_at?: boolean
  updated_at?: boolean
  version?: boolean
}, ExtArgs["result"]["characteristic_scores"]>


export type characteristic_scoresSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  characteristic?: boolean
  partial_score?: boolean
  created_at?: boolean
  updated_at?: boolean
  version?: boolean
}, ExtArgs["result"]["characteristic_scores"]>

export type characteristic_scoresSelectScalar = {
  id?: boolean
  characteristic?: boolean
  partial_score?: boolean
  created_at?: boolean
  updated_at?: boolean
  version?: boolean
}

export type characteristic_scoresOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "characteristic" | "partial_score" | "created_at" | "updated_at" | "version", ExtArgs["result"]["characteristic_scores"]>

export type $characteristic_scoresPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "characteristic_scores"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    characteristic: string
    partial_score: runtime.Decimal
    created_at: Date | null
    updated_at: Date | null
    version: number | null
  }, ExtArgs["result"]["characteristic_scores"]>
  composites: {}
}

export type characteristic_scoresGetPayload<S extends boolean | null | undefined | characteristic_scoresDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$characteristic_scoresPayload, S>

export type characteristic_scoresCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<characteristic_scoresFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Characteristic_scoresCountAggregateInputType | true
  }

export interface characteristic_scoresDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['characteristic_scores'], meta: { name: 'characteristic_scores' } }
  /**
   * Find zero or one Characteristic_scores that matches the filter.
   * @param {characteristic_scoresFindUniqueArgs} args - Arguments to find a Characteristic_scores
   * @example
   * // Get one Characteristic_scores
   * const characteristic_scores = await prisma.characteristic_scores.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends characteristic_scoresFindUniqueArgs>(args: Prisma.SelectSubset<T, characteristic_scoresFindUniqueArgs<ExtArgs>>): Prisma.Prisma__characteristic_scoresClient<runtime.Types.Result.GetResult<Prisma.$characteristic_scoresPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Characteristic_scores that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {characteristic_scoresFindUniqueOrThrowArgs} args - Arguments to find a Characteristic_scores
   * @example
   * // Get one Characteristic_scores
   * const characteristic_scores = await prisma.characteristic_scores.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends characteristic_scoresFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, characteristic_scoresFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__characteristic_scoresClient<runtime.Types.Result.GetResult<Prisma.$characteristic_scoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Characteristic_scores that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {characteristic_scoresFindFirstArgs} args - Arguments to find a Characteristic_scores
   * @example
   * // Get one Characteristic_scores
   * const characteristic_scores = await prisma.characteristic_scores.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends characteristic_scoresFindFirstArgs>(args?: Prisma.SelectSubset<T, characteristic_scoresFindFirstArgs<ExtArgs>>): Prisma.Prisma__characteristic_scoresClient<runtime.Types.Result.GetResult<Prisma.$characteristic_scoresPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Characteristic_scores that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {characteristic_scoresFindFirstOrThrowArgs} args - Arguments to find a Characteristic_scores
   * @example
   * // Get one Characteristic_scores
   * const characteristic_scores = await prisma.characteristic_scores.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends characteristic_scoresFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, characteristic_scoresFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__characteristic_scoresClient<runtime.Types.Result.GetResult<Prisma.$characteristic_scoresPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Characteristic_scores that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {characteristic_scoresFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Characteristic_scores
   * const characteristic_scores = await prisma.characteristic_scores.findMany()
   * 
   * // Get first 10 Characteristic_scores
   * const characteristic_scores = await prisma.characteristic_scores.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const characteristic_scoresWithIdOnly = await prisma.characteristic_scores.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends characteristic_scoresFindManyArgs>(args?: Prisma.SelectSubset<T, characteristic_scoresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$characteristic_scoresPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Delete a Characteristic_scores.
   * @param {characteristic_scoresDeleteArgs} args - Arguments to delete one Characteristic_scores.
   * @example
   * // Delete one Characteristic_scores
   * const Characteristic_scores = await prisma.characteristic_scores.delete({
   *   where: {
   *     // ... filter to delete one Characteristic_scores
   *   }
   * })
   * 
   */
  delete<T extends characteristic_scoresDeleteArgs>(args: Prisma.SelectSubset<T, characteristic_scoresDeleteArgs<ExtArgs>>): Prisma.Prisma__characteristic_scoresClient<runtime.Types.Result.GetResult<Prisma.$characteristic_scoresPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Characteristic_scores.
   * @param {characteristic_scoresUpdateArgs} args - Arguments to update one Characteristic_scores.
   * @example
   * // Update one Characteristic_scores
   * const characteristic_scores = await prisma.characteristic_scores.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends characteristic_scoresUpdateArgs>(args: Prisma.SelectSubset<T, characteristic_scoresUpdateArgs<ExtArgs>>): Prisma.Prisma__characteristic_scoresClient<runtime.Types.Result.GetResult<Prisma.$characteristic_scoresPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Characteristic_scores.
   * @param {characteristic_scoresDeleteManyArgs} args - Arguments to filter Characteristic_scores to delete.
   * @example
   * // Delete a few Characteristic_scores
   * const { count } = await prisma.characteristic_scores.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends characteristic_scoresDeleteManyArgs>(args?: Prisma.SelectSubset<T, characteristic_scoresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Characteristic_scores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {characteristic_scoresUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Characteristic_scores
   * const characteristic_scores = await prisma.characteristic_scores.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends characteristic_scoresUpdateManyArgs>(args: Prisma.SelectSubset<T, characteristic_scoresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Characteristic_scores and returns the data updated in the database.
   * @param {characteristic_scoresUpdateManyAndReturnArgs} args - Arguments to update many Characteristic_scores.
   * @example
   * // Update many Characteristic_scores
   * const characteristic_scores = await prisma.characteristic_scores.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Characteristic_scores and only return the `id`
   * const characteristic_scoresWithIdOnly = await prisma.characteristic_scores.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends characteristic_scoresUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, characteristic_scoresUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$characteristic_scoresPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>


  /**
   * Count the number of Characteristic_scores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {characteristic_scoresCountArgs} args - Arguments to filter Characteristic_scores to count.
   * @example
   * // Count the number of Characteristic_scores
   * const count = await prisma.characteristic_scores.count({
   *   where: {
   *     // ... the filter for the Characteristic_scores we want to count
   *   }
   * })
  **/
  count<T extends characteristic_scoresCountArgs>(
    args?: Prisma.Subset<T, characteristic_scoresCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Characteristic_scoresCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Characteristic_scores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Characteristic_scoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Characteristic_scoresAggregateArgs>(args: Prisma.Subset<T, Characteristic_scoresAggregateArgs>): Prisma.PrismaPromise<GetCharacteristic_scoresAggregateType<T>>

  /**
   * Group by Characteristic_scores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {characteristic_scoresGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends characteristic_scoresGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: characteristic_scoresGroupByArgs['orderBy'] }
      : { orderBy?: characteristic_scoresGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, characteristic_scoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacteristic_scoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the characteristic_scores model
 */
readonly fields: characteristic_scoresFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for characteristic_scores.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__characteristic_scoresClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the characteristic_scores model
 */
export interface characteristic_scoresFieldRefs {
  readonly id: Prisma.FieldRef<"characteristic_scores", 'Int'>
  readonly characteristic: Prisma.FieldRef<"characteristic_scores", 'String'>
  readonly partial_score: Prisma.FieldRef<"characteristic_scores", 'Decimal'>
  readonly created_at: Prisma.FieldRef<"characteristic_scores", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"characteristic_scores", 'DateTime'>
  readonly version: Prisma.FieldRef<"characteristic_scores", 'Int'>
}
    

// Custom InputTypes
/**
 * characteristic_scores findUnique
 */
export type characteristic_scoresFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the characteristic_scores
   */
  select?: Prisma.characteristic_scoresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the characteristic_scores
   */
  omit?: Prisma.characteristic_scoresOmit<ExtArgs> | null
  /**
   * Filter, which characteristic_scores to fetch.
   */
  where: Prisma.characteristic_scoresWhereUniqueInput
}

/**
 * characteristic_scores findUniqueOrThrow
 */
export type characteristic_scoresFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the characteristic_scores
   */
  select?: Prisma.characteristic_scoresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the characteristic_scores
   */
  omit?: Prisma.characteristic_scoresOmit<ExtArgs> | null
  /**
   * Filter, which characteristic_scores to fetch.
   */
  where: Prisma.characteristic_scoresWhereUniqueInput
}

/**
 * characteristic_scores findFirst
 */
export type characteristic_scoresFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the characteristic_scores
   */
  select?: Prisma.characteristic_scoresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the characteristic_scores
   */
  omit?: Prisma.characteristic_scoresOmit<ExtArgs> | null
  /**
   * Filter, which characteristic_scores to fetch.
   */
  where?: Prisma.characteristic_scoresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of characteristic_scores to fetch.
   */
  orderBy?: Prisma.characteristic_scoresOrderByWithRelationInput | Prisma.characteristic_scoresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for characteristic_scores.
   */
  cursor?: Prisma.characteristic_scoresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` characteristic_scores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` characteristic_scores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of characteristic_scores.
   */
  distinct?: Prisma.Characteristic_scoresScalarFieldEnum | Prisma.Characteristic_scoresScalarFieldEnum[]
}

/**
 * characteristic_scores findFirstOrThrow
 */
export type characteristic_scoresFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the characteristic_scores
   */
  select?: Prisma.characteristic_scoresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the characteristic_scores
   */
  omit?: Prisma.characteristic_scoresOmit<ExtArgs> | null
  /**
   * Filter, which characteristic_scores to fetch.
   */
  where?: Prisma.characteristic_scoresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of characteristic_scores to fetch.
   */
  orderBy?: Prisma.characteristic_scoresOrderByWithRelationInput | Prisma.characteristic_scoresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for characteristic_scores.
   */
  cursor?: Prisma.characteristic_scoresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` characteristic_scores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` characteristic_scores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of characteristic_scores.
   */
  distinct?: Prisma.Characteristic_scoresScalarFieldEnum | Prisma.Characteristic_scoresScalarFieldEnum[]
}

/**
 * characteristic_scores findMany
 */
export type characteristic_scoresFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the characteristic_scores
   */
  select?: Prisma.characteristic_scoresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the characteristic_scores
   */
  omit?: Prisma.characteristic_scoresOmit<ExtArgs> | null
  /**
   * Filter, which characteristic_scores to fetch.
   */
  where?: Prisma.characteristic_scoresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of characteristic_scores to fetch.
   */
  orderBy?: Prisma.characteristic_scoresOrderByWithRelationInput | Prisma.characteristic_scoresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing characteristic_scores.
   */
  cursor?: Prisma.characteristic_scoresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` characteristic_scores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` characteristic_scores.
   */
  skip?: number
  distinct?: Prisma.Characteristic_scoresScalarFieldEnum | Prisma.Characteristic_scoresScalarFieldEnum[]
}

/**
 * characteristic_scores update
 */
export type characteristic_scoresUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the characteristic_scores
   */
  select?: Prisma.characteristic_scoresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the characteristic_scores
   */
  omit?: Prisma.characteristic_scoresOmit<ExtArgs> | null
  /**
   * The data needed to update a characteristic_scores.
   */
  data: Prisma.XOR<Prisma.characteristic_scoresUpdateInput, Prisma.characteristic_scoresUncheckedUpdateInput>
  /**
   * Choose, which characteristic_scores to update.
   */
  where: Prisma.characteristic_scoresWhereUniqueInput
}

/**
 * characteristic_scores updateMany
 */
export type characteristic_scoresUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update characteristic_scores.
   */
  data: Prisma.XOR<Prisma.characteristic_scoresUpdateManyMutationInput, Prisma.characteristic_scoresUncheckedUpdateManyInput>
  /**
   * Filter which characteristic_scores to update
   */
  where?: Prisma.characteristic_scoresWhereInput
  /**
   * Limit how many characteristic_scores to update.
   */
  limit?: number
}

/**
 * characteristic_scores updateManyAndReturn
 */
export type characteristic_scoresUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the characteristic_scores
   */
  select?: Prisma.characteristic_scoresSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the characteristic_scores
   */
  omit?: Prisma.characteristic_scoresOmit<ExtArgs> | null
  /**
   * The data used to update characteristic_scores.
   */
  data: Prisma.XOR<Prisma.characteristic_scoresUpdateManyMutationInput, Prisma.characteristic_scoresUncheckedUpdateManyInput>
  /**
   * Filter which characteristic_scores to update
   */
  where?: Prisma.characteristic_scoresWhereInput
  /**
   * Limit how many characteristic_scores to update.
   */
  limit?: number
}

/**
 * characteristic_scores delete
 */
export type characteristic_scoresDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the characteristic_scores
   */
  select?: Prisma.characteristic_scoresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the characteristic_scores
   */
  omit?: Prisma.characteristic_scoresOmit<ExtArgs> | null
  /**
   * Filter which characteristic_scores to delete.
   */
  where: Prisma.characteristic_scoresWhereUniqueInput
}

/**
 * characteristic_scores deleteMany
 */
export type characteristic_scoresDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which characteristic_scores to delete
   */
  where?: Prisma.characteristic_scoresWhereInput
  /**
   * Limit how many characteristic_scores to delete.
   */
  limit?: number
}

/**
 * characteristic_scores without action
 */
export type characteristic_scoresDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the characteristic_scores
   */
  select?: Prisma.characteristic_scoresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the characteristic_scores
   */
  omit?: Prisma.characteristic_scoresOmit<ExtArgs> | null
}
