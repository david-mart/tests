
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SequelizeMeta` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SequelizeMeta
 * 
 */
export type SequelizeMetaModel = runtime.Types.Result.DefaultSelection<Prisma.$SequelizeMetaPayload>

export type AggregateSequelizeMeta = {
  _count: SequelizeMetaCountAggregateOutputType | null
  _min: SequelizeMetaMinAggregateOutputType | null
  _max: SequelizeMetaMaxAggregateOutputType | null
}

export type SequelizeMetaMinAggregateOutputType = {
  name: string | null
}

export type SequelizeMetaMaxAggregateOutputType = {
  name: string | null
}

export type SequelizeMetaCountAggregateOutputType = {
  name: number
  _all: number
}


export type SequelizeMetaMinAggregateInputType = {
  name?: true
}

export type SequelizeMetaMaxAggregateInputType = {
  name?: true
}

export type SequelizeMetaCountAggregateInputType = {
  name?: true
  _all?: true
}

export type SequelizeMetaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SequelizeMeta to aggregate.
   */
  where?: Prisma.SequelizeMetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SequelizeMetas to fetch.
   */
  orderBy?: Prisma.SequelizeMetaOrderByWithRelationInput | Prisma.SequelizeMetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SequelizeMetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SequelizeMetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SequelizeMetas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SequelizeMetas
  **/
  _count?: true | SequelizeMetaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SequelizeMetaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SequelizeMetaMaxAggregateInputType
}

export type GetSequelizeMetaAggregateType<T extends SequelizeMetaAggregateArgs> = {
      [P in keyof T & keyof AggregateSequelizeMeta]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSequelizeMeta[P]>
    : Prisma.GetScalarType<T[P], AggregateSequelizeMeta[P]>
}




export type SequelizeMetaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SequelizeMetaWhereInput
  orderBy?: Prisma.SequelizeMetaOrderByWithAggregationInput | Prisma.SequelizeMetaOrderByWithAggregationInput[]
  by: Prisma.SequelizeMetaScalarFieldEnum[] | Prisma.SequelizeMetaScalarFieldEnum
  having?: Prisma.SequelizeMetaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SequelizeMetaCountAggregateInputType | true
  _min?: SequelizeMetaMinAggregateInputType
  _max?: SequelizeMetaMaxAggregateInputType
}

export type SequelizeMetaGroupByOutputType = {
  name: string
  _count: SequelizeMetaCountAggregateOutputType | null
  _min: SequelizeMetaMinAggregateOutputType | null
  _max: SequelizeMetaMaxAggregateOutputType | null
}

type GetSequelizeMetaGroupByPayload<T extends SequelizeMetaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SequelizeMetaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SequelizeMetaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SequelizeMetaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SequelizeMetaGroupByOutputType[P]>
      }
    >
  >



export type SequelizeMetaWhereInput = {
  AND?: Prisma.SequelizeMetaWhereInput | Prisma.SequelizeMetaWhereInput[]
  OR?: Prisma.SequelizeMetaWhereInput[]
  NOT?: Prisma.SequelizeMetaWhereInput | Prisma.SequelizeMetaWhereInput[]
  name?: Prisma.StringFilter<"SequelizeMeta"> | string
}

export type SequelizeMetaOrderByWithRelationInput = {
  name?: Prisma.SortOrder
}

export type SequelizeMetaWhereUniqueInput = Prisma.AtLeast<{
  name?: string
  AND?: Prisma.SequelizeMetaWhereInput | Prisma.SequelizeMetaWhereInput[]
  OR?: Prisma.SequelizeMetaWhereInput[]
  NOT?: Prisma.SequelizeMetaWhereInput | Prisma.SequelizeMetaWhereInput[]
}, "name">

export type SequelizeMetaOrderByWithAggregationInput = {
  name?: Prisma.SortOrder
  _count?: Prisma.SequelizeMetaCountOrderByAggregateInput
  _max?: Prisma.SequelizeMetaMaxOrderByAggregateInput
  _min?: Prisma.SequelizeMetaMinOrderByAggregateInput
}

export type SequelizeMetaScalarWhereWithAggregatesInput = {
  AND?: Prisma.SequelizeMetaScalarWhereWithAggregatesInput | Prisma.SequelizeMetaScalarWhereWithAggregatesInput[]
  OR?: Prisma.SequelizeMetaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SequelizeMetaScalarWhereWithAggregatesInput | Prisma.SequelizeMetaScalarWhereWithAggregatesInput[]
  name?: Prisma.StringWithAggregatesFilter<"SequelizeMeta"> | string
}

export type SequelizeMetaCreateInput = {
  name: string
}

export type SequelizeMetaUncheckedCreateInput = {
  name: string
}

export type SequelizeMetaUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SequelizeMetaUncheckedUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SequelizeMetaCreateManyInput = {
  name: string
}

export type SequelizeMetaUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SequelizeMetaUncheckedUpdateManyInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SequelizeMetaCountOrderByAggregateInput = {
  name?: Prisma.SortOrder
}

export type SequelizeMetaMaxOrderByAggregateInput = {
  name?: Prisma.SortOrder
}

export type SequelizeMetaMinOrderByAggregateInput = {
  name?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}



export type SequelizeMetaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
}, ExtArgs["result"]["sequelizeMeta"]>

export type SequelizeMetaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
}, ExtArgs["result"]["sequelizeMeta"]>

export type SequelizeMetaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
}, ExtArgs["result"]["sequelizeMeta"]>

export type SequelizeMetaSelectScalar = {
  name?: boolean
}

export type SequelizeMetaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"name", ExtArgs["result"]["sequelizeMeta"]>

export type $SequelizeMetaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SequelizeMeta"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    name: string
  }, ExtArgs["result"]["sequelizeMeta"]>
  composites: {}
}

export type SequelizeMetaGetPayload<S extends boolean | null | undefined | SequelizeMetaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload, S>

export type SequelizeMetaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SequelizeMetaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SequelizeMetaCountAggregateInputType | true
  }

export interface SequelizeMetaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SequelizeMeta'], meta: { name: 'SequelizeMeta' } }
  /**
   * Find zero or one SequelizeMeta that matches the filter.
   * @param {SequelizeMetaFindUniqueArgs} args - Arguments to find a SequelizeMeta
   * @example
   * // Get one SequelizeMeta
   * const sequelizeMeta = await prisma.sequelizeMeta.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SequelizeMetaFindUniqueArgs>(args: Prisma.SelectSubset<T, SequelizeMetaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SequelizeMetaClient<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SequelizeMeta that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SequelizeMetaFindUniqueOrThrowArgs} args - Arguments to find a SequelizeMeta
   * @example
   * // Get one SequelizeMeta
   * const sequelizeMeta = await prisma.sequelizeMeta.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SequelizeMetaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SequelizeMetaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SequelizeMetaClient<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SequelizeMeta that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SequelizeMetaFindFirstArgs} args - Arguments to find a SequelizeMeta
   * @example
   * // Get one SequelizeMeta
   * const sequelizeMeta = await prisma.sequelizeMeta.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SequelizeMetaFindFirstArgs>(args?: Prisma.SelectSubset<T, SequelizeMetaFindFirstArgs<ExtArgs>>): Prisma.Prisma__SequelizeMetaClient<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SequelizeMeta that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SequelizeMetaFindFirstOrThrowArgs} args - Arguments to find a SequelizeMeta
   * @example
   * // Get one SequelizeMeta
   * const sequelizeMeta = await prisma.sequelizeMeta.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SequelizeMetaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SequelizeMetaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SequelizeMetaClient<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SequelizeMetas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SequelizeMetaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SequelizeMetas
   * const sequelizeMetas = await prisma.sequelizeMeta.findMany()
   * 
   * // Get first 10 SequelizeMetas
   * const sequelizeMetas = await prisma.sequelizeMeta.findMany({ take: 10 })
   * 
   * // Only select the `name`
   * const sequelizeMetaWithNameOnly = await prisma.sequelizeMeta.findMany({ select: { name: true } })
   * 
   */
  findMany<T extends SequelizeMetaFindManyArgs>(args?: Prisma.SelectSubset<T, SequelizeMetaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SequelizeMeta.
   * @param {SequelizeMetaCreateArgs} args - Arguments to create a SequelizeMeta.
   * @example
   * // Create one SequelizeMeta
   * const SequelizeMeta = await prisma.sequelizeMeta.create({
   *   data: {
   *     // ... data to create a SequelizeMeta
   *   }
   * })
   * 
   */
  create<T extends SequelizeMetaCreateArgs>(args: Prisma.SelectSubset<T, SequelizeMetaCreateArgs<ExtArgs>>): Prisma.Prisma__SequelizeMetaClient<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SequelizeMetas.
   * @param {SequelizeMetaCreateManyArgs} args - Arguments to create many SequelizeMetas.
   * @example
   * // Create many SequelizeMetas
   * const sequelizeMeta = await prisma.sequelizeMeta.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SequelizeMetaCreateManyArgs>(args?: Prisma.SelectSubset<T, SequelizeMetaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SequelizeMetas and returns the data saved in the database.
   * @param {SequelizeMetaCreateManyAndReturnArgs} args - Arguments to create many SequelizeMetas.
   * @example
   * // Create many SequelizeMetas
   * const sequelizeMeta = await prisma.sequelizeMeta.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SequelizeMetas and only return the `name`
   * const sequelizeMetaWithNameOnly = await prisma.sequelizeMeta.createManyAndReturn({
   *   select: { name: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SequelizeMetaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SequelizeMetaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SequelizeMeta.
   * @param {SequelizeMetaDeleteArgs} args - Arguments to delete one SequelizeMeta.
   * @example
   * // Delete one SequelizeMeta
   * const SequelizeMeta = await prisma.sequelizeMeta.delete({
   *   where: {
   *     // ... filter to delete one SequelizeMeta
   *   }
   * })
   * 
   */
  delete<T extends SequelizeMetaDeleteArgs>(args: Prisma.SelectSubset<T, SequelizeMetaDeleteArgs<ExtArgs>>): Prisma.Prisma__SequelizeMetaClient<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SequelizeMeta.
   * @param {SequelizeMetaUpdateArgs} args - Arguments to update one SequelizeMeta.
   * @example
   * // Update one SequelizeMeta
   * const sequelizeMeta = await prisma.sequelizeMeta.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SequelizeMetaUpdateArgs>(args: Prisma.SelectSubset<T, SequelizeMetaUpdateArgs<ExtArgs>>): Prisma.Prisma__SequelizeMetaClient<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SequelizeMetas.
   * @param {SequelizeMetaDeleteManyArgs} args - Arguments to filter SequelizeMetas to delete.
   * @example
   * // Delete a few SequelizeMetas
   * const { count } = await prisma.sequelizeMeta.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SequelizeMetaDeleteManyArgs>(args?: Prisma.SelectSubset<T, SequelizeMetaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SequelizeMetas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SequelizeMetaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SequelizeMetas
   * const sequelizeMeta = await prisma.sequelizeMeta.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SequelizeMetaUpdateManyArgs>(args: Prisma.SelectSubset<T, SequelizeMetaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SequelizeMetas and returns the data updated in the database.
   * @param {SequelizeMetaUpdateManyAndReturnArgs} args - Arguments to update many SequelizeMetas.
   * @example
   * // Update many SequelizeMetas
   * const sequelizeMeta = await prisma.sequelizeMeta.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SequelizeMetas and only return the `name`
   * const sequelizeMetaWithNameOnly = await prisma.sequelizeMeta.updateManyAndReturn({
   *   select: { name: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SequelizeMetaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SequelizeMetaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SequelizeMeta.
   * @param {SequelizeMetaUpsertArgs} args - Arguments to update or create a SequelizeMeta.
   * @example
   * // Update or create a SequelizeMeta
   * const sequelizeMeta = await prisma.sequelizeMeta.upsert({
   *   create: {
   *     // ... data to create a SequelizeMeta
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SequelizeMeta we want to update
   *   }
   * })
   */
  upsert<T extends SequelizeMetaUpsertArgs>(args: Prisma.SelectSubset<T, SequelizeMetaUpsertArgs<ExtArgs>>): Prisma.Prisma__SequelizeMetaClient<runtime.Types.Result.GetResult<Prisma.$SequelizeMetaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SequelizeMetas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SequelizeMetaCountArgs} args - Arguments to filter SequelizeMetas to count.
   * @example
   * // Count the number of SequelizeMetas
   * const count = await prisma.sequelizeMeta.count({
   *   where: {
   *     // ... the filter for the SequelizeMetas we want to count
   *   }
   * })
  **/
  count<T extends SequelizeMetaCountArgs>(
    args?: Prisma.Subset<T, SequelizeMetaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SequelizeMetaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SequelizeMeta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SequelizeMetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SequelizeMetaAggregateArgs>(args: Prisma.Subset<T, SequelizeMetaAggregateArgs>): Prisma.PrismaPromise<GetSequelizeMetaAggregateType<T>>

  /**
   * Group by SequelizeMeta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SequelizeMetaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SequelizeMetaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SequelizeMetaGroupByArgs['orderBy'] }
      : { orderBy?: SequelizeMetaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SequelizeMetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSequelizeMetaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SequelizeMeta model
 */
readonly fields: SequelizeMetaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SequelizeMeta.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SequelizeMetaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SequelizeMeta model
 */
export interface SequelizeMetaFieldRefs {
  readonly name: Prisma.FieldRef<"SequelizeMeta", 'String'>
}
    

// Custom InputTypes
/**
 * SequelizeMeta findUnique
 */
export type SequelizeMetaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * Filter, which SequelizeMeta to fetch.
   */
  where: Prisma.SequelizeMetaWhereUniqueInput
}

/**
 * SequelizeMeta findUniqueOrThrow
 */
export type SequelizeMetaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * Filter, which SequelizeMeta to fetch.
   */
  where: Prisma.SequelizeMetaWhereUniqueInput
}

/**
 * SequelizeMeta findFirst
 */
export type SequelizeMetaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * Filter, which SequelizeMeta to fetch.
   */
  where?: Prisma.SequelizeMetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SequelizeMetas to fetch.
   */
  orderBy?: Prisma.SequelizeMetaOrderByWithRelationInput | Prisma.SequelizeMetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SequelizeMetas.
   */
  cursor?: Prisma.SequelizeMetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SequelizeMetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SequelizeMetas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SequelizeMetas.
   */
  distinct?: Prisma.SequelizeMetaScalarFieldEnum | Prisma.SequelizeMetaScalarFieldEnum[]
}

/**
 * SequelizeMeta findFirstOrThrow
 */
export type SequelizeMetaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * Filter, which SequelizeMeta to fetch.
   */
  where?: Prisma.SequelizeMetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SequelizeMetas to fetch.
   */
  orderBy?: Prisma.SequelizeMetaOrderByWithRelationInput | Prisma.SequelizeMetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SequelizeMetas.
   */
  cursor?: Prisma.SequelizeMetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SequelizeMetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SequelizeMetas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SequelizeMetas.
   */
  distinct?: Prisma.SequelizeMetaScalarFieldEnum | Prisma.SequelizeMetaScalarFieldEnum[]
}

/**
 * SequelizeMeta findMany
 */
export type SequelizeMetaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * Filter, which SequelizeMetas to fetch.
   */
  where?: Prisma.SequelizeMetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SequelizeMetas to fetch.
   */
  orderBy?: Prisma.SequelizeMetaOrderByWithRelationInput | Prisma.SequelizeMetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SequelizeMetas.
   */
  cursor?: Prisma.SequelizeMetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SequelizeMetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SequelizeMetas.
   */
  skip?: number
  distinct?: Prisma.SequelizeMetaScalarFieldEnum | Prisma.SequelizeMetaScalarFieldEnum[]
}

/**
 * SequelizeMeta create
 */
export type SequelizeMetaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * The data needed to create a SequelizeMeta.
   */
  data: Prisma.XOR<Prisma.SequelizeMetaCreateInput, Prisma.SequelizeMetaUncheckedCreateInput>
}

/**
 * SequelizeMeta createMany
 */
export type SequelizeMetaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SequelizeMetas.
   */
  data: Prisma.SequelizeMetaCreateManyInput | Prisma.SequelizeMetaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SequelizeMeta createManyAndReturn
 */
export type SequelizeMetaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * The data used to create many SequelizeMetas.
   */
  data: Prisma.SequelizeMetaCreateManyInput | Prisma.SequelizeMetaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SequelizeMeta update
 */
export type SequelizeMetaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * The data needed to update a SequelizeMeta.
   */
  data: Prisma.XOR<Prisma.SequelizeMetaUpdateInput, Prisma.SequelizeMetaUncheckedUpdateInput>
  /**
   * Choose, which SequelizeMeta to update.
   */
  where: Prisma.SequelizeMetaWhereUniqueInput
}

/**
 * SequelizeMeta updateMany
 */
export type SequelizeMetaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SequelizeMetas.
   */
  data: Prisma.XOR<Prisma.SequelizeMetaUpdateManyMutationInput, Prisma.SequelizeMetaUncheckedUpdateManyInput>
  /**
   * Filter which SequelizeMetas to update
   */
  where?: Prisma.SequelizeMetaWhereInput
  /**
   * Limit how many SequelizeMetas to update.
   */
  limit?: number
}

/**
 * SequelizeMeta updateManyAndReturn
 */
export type SequelizeMetaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * The data used to update SequelizeMetas.
   */
  data: Prisma.XOR<Prisma.SequelizeMetaUpdateManyMutationInput, Prisma.SequelizeMetaUncheckedUpdateManyInput>
  /**
   * Filter which SequelizeMetas to update
   */
  where?: Prisma.SequelizeMetaWhereInput
  /**
   * Limit how many SequelizeMetas to update.
   */
  limit?: number
}

/**
 * SequelizeMeta upsert
 */
export type SequelizeMetaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * The filter to search for the SequelizeMeta to update in case it exists.
   */
  where: Prisma.SequelizeMetaWhereUniqueInput
  /**
   * In case the SequelizeMeta found by the `where` argument doesn't exist, create a new SequelizeMeta with this data.
   */
  create: Prisma.XOR<Prisma.SequelizeMetaCreateInput, Prisma.SequelizeMetaUncheckedCreateInput>
  /**
   * In case the SequelizeMeta was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SequelizeMetaUpdateInput, Prisma.SequelizeMetaUncheckedUpdateInput>
}

/**
 * SequelizeMeta delete
 */
export type SequelizeMetaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
  /**
   * Filter which SequelizeMeta to delete.
   */
  where: Prisma.SequelizeMetaWhereUniqueInput
}

/**
 * SequelizeMeta deleteMany
 */
export type SequelizeMetaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SequelizeMetas to delete
   */
  where?: Prisma.SequelizeMetaWhereInput
  /**
   * Limit how many SequelizeMetas to delete.
   */
  limit?: number
}

/**
 * SequelizeMeta without action
 */
export type SequelizeMetaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
   */
  select?: Prisma.SequelizeMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SequelizeMeta
   */
  omit?: Prisma.SequelizeMetaOmit<ExtArgs> | null
}
